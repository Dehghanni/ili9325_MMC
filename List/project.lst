
AVRASM ver. 2.1.30  F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm Tue Dec 08 14:55:33 2015

F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1087): warning: Register r4 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1089): warning: Register r6 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1090): warning: Register r7 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1091): warning: Register r8 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1092): warning: Register r9 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1093): warning: Register r11 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1095): warning: Register r13 already defined by the .DEF directive
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1096): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _font_color=R4
                 	.DEF _font_color_msb=R5
                 	.DEF _x_font=R6
                 	.DEF _x_font_msb=R7
                 	.DEF _y_font=R8
                 	.DEF _y_font_msb=R9
                 	.DEF _highlight=R11
                 	.DEF _fa_num=R10
                 	.DEF _effect=R13
                 	.DEF _italic=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0cb7 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _font12x16:
00002a 6000
00002b 6000
00002c 6000
00002d 6004      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x4,0x60
00002e 6004
00002f 6004
000030 6004
000031 6004      	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x4,0x60
000032 6004
000033 6004
000034 6003
000035 6000      	.DB  0x4,0x60,0x4,0x60,0x3,0x60,0x0,0x60
000036 6000
000037 6000
000038 6000
000039 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00003a 5001
00003b 5006
00003c 5008
00003d 5001      	.DB  0x1,0x50,0x6,0x50,0x8,0x50,0x1,0x50
00003e 5006
00003f 5008
000040 500c
000041 5002      	.DB  0x6,0x50,0x8,0x50,0xC,0x50,0x2,0x50
000042 5001
000043 5001
000044 501e
000045 5000      	.DB  0x1,0x50,0x1,0x50,0x1E,0x50,0x0,0x50
000046 5000
000047 5000
000048 5000
000049 5000      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
00004a 6001
00004b 600e
00004c 6010
00004d 6004      	.DB  0x1,0x60,0xE,0x60,0x10,0x60,0x4,0x60
00004e 6004
00004f 6004
000050 6004
000051 6004      	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x4,0x60
000052 6004
000053 6004
000054 6003
000055 6000      	.DB  0x4,0x60,0x4,0x60,0x3,0x60,0x0,0x60
000056 6000
000057 6000
000058 6000
000059 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00005a 4000
00005b 4000
00005c 4000
00005d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00005e 4000
00005f 4000
000060 4000
000061 4002      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x2,0x40
000062 4001
000063 4001
000064 400e
000065 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000066 4005
000067 4000
000068 4002
000069 4000      	.DB  0x5,0x40,0x0,0x40,0x2,0x40,0x0,0x40
00006a 4000
00006b 4000
00006c 4000
00006d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00006e 4000
00006f 4000
000070 4000
000071 4002      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x2,0x40
000072 4001
000073 4001
000074 400e
000075 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000076 4000
000077 4002
000078 4000
000079 4000      	.DB  0x0,0x40,0x2,0x40,0x0,0x40,0x0,0x40
00007a 4000
00007b 4000
00007c 4000
00007d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00007e 4005
00007f 4000
000080 4000
000081 4002      	.DB  0x5,0x40,0x0,0x40,0x0,0x40,0x2,0x40
000082 4001
000083 4001
000084 400e
000085 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000086 4000
000087 4000
000088 4000
000089 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00008a 4000
00008b 4000
00008c 4002
00008d 4000      	.DB  0x0,0x40,0x0,0x40,0x2,0x40,0x0,0x40
00008e 4005
00008f 4000
000090 4000
000091 4002      	.DB  0x5,0x40,0x0,0x40,0x0,0x40,0x2,0x40
000092 4001
000093 4001
000094 400e
000095 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000096 4000
000097 4000
000098 4000
000099 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00009a 8000
00009b 8000
00009c 8000
00009d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00009e 8000
00009f 8000
0000a0 8000
0000a1 8018      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x18,0x80
0000a2 8024
0000a3 8002
0000a4 80ff
0000a5 8000      	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
0000a6 8000
0000a7 8008
0000a8 8000
0000a9 8000      	.DB  0x0,0x80,0x8,0x80,0x0,0x80,0x0,0x80
0000aa 9000
0000ab 9000
0000ac 9000
0000ad 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
0000ae 9000
0000af 9000
0000b0 9070
0000b1 908f      	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
0000b2 9034
0000b3 9042
0000b4 9081
0000b5 9088      	.DB  0x34,0x90,0x42,0x90,0x81,0x90,0x88,0x90
0000b6 9080
0000b7 9041
0000b8 903e
0000b9 9000      	.DB  0x80,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
0000ba 8000
0000bb 8000
0000bc 8000
0000bd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0000be 8000
0000bf 8000
0000c0 8000
0000c1 8018      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x18,0x80
0000c2 8024
0000c3 8002
0000c4 80ff
0000c5 8000      	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
0000c6 8000
0000c7 8000
0000c8 8000
0000c9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0000ca 9000
0000cb 9000
0000cc 9000
0000cd 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
0000ce 9000
0000cf 9000
0000d0 9070
0000d1 908f      	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
0000d2 9034
0000d3 9042
0000d4 9081
0000d5 9080      	.DB  0x34,0x90,0x42,0x90,0x81,0x90,0x80,0x90
0000d6 9080
0000d7 9041
0000d8 903e
0000d9 9000      	.DB  0x80,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
0000da 8000
0000db 8000
0000dc 8000
0000dd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0000de 8010
0000df 8000
0000e0 8000
0000e1 8018      	.DB  0x10,0x80,0x0,0x80,0x0,0x80,0x18,0x80
0000e2 8024
0000e3 8002
0000e4 80ff
0000e5 8000      	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
0000e6 8000
0000e7 8000
0000e8 8000
0000e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0000ea 9000
0000eb 9000
0000ec 9000
0000ed 9020      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x20,0x90
0000ee 9000
0000ef 9000
0000f0 9070
0000f1 908f      	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
0000f2 9034
0000f3 9042
0000f4 9081
0000f5 9080      	.DB  0x34,0x90,0x42,0x90,0x81,0x90,0x80,0x90
0000f6 9080
0000f7 9041
0000f8 903e
0000f9 9000      	.DB  0x80,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
0000fa 9000
0000fb 9000
0000fc 9000
0000fd 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
0000fe 9010
0000ff 9008
000100 9014
000101 9046      	.DB  0x10,0x90,0x8,0x90,0x14,0x90,0x46,0x90
000102 9049
000103 9019
000104 91f6
000105 9000      	.DB  0x49,0x90,0x19,0x90,0xF6,0x91,0x0,0x90
000106 9000
000107 9000
000108 9000
000109 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
00010a 9000
00010b 9000
00010c 9000
00010d 9008      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x8,0x90
00010e 9000
00010f 9014
000110 9000
000111 9000      	.DB  0x0,0x90,0x14,0x90,0x0,0x90,0x0,0x90
000112 9049
000113 9049
000114 91b6
000115 9000      	.DB  0x49,0x90,0x49,0x90,0xB6,0x91,0x0,0x90
000116 9000
000117 9000
000118 9000
000119 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
00011a b000
00011b b000
00011c b000
00011d b000      	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
00011e b000
00011f b000
000120 b000
000121 b00e      	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0xE,0xB0
000122 b111
000123 b121
000124 b6fe
000125 b000      	.DB  0x11,0xB1,0x21,0xB1,0xFE,0xB6,0x0,0xB0
000126 b000
000127 b000
000128 b000
000129 b000      	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
00012a 4000
00012b 3000
00012c 3000
00012d 3000      	.DB  0x0,0x40,0x0,0x30,0x0,0x30,0x0,0x30
00012e 3000
00012f 3000
000130 3000
000131 3002      	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x2,0x30
000132 3007
000133 3002
000134 3000
000135 3000      	.DB  0x7,0x30,0x2,0x30,0x0,0x30,0x0,0x30
000136 3000
000137 3000
000138 3000
000139 3000      	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
00013a 3000
00013b 2000
00013c 2000
00013d 2000      	.DB  0x0,0x30,0x0,0x20,0x0,0x20,0x0,0x20
00013e 2002
00013f 2002
000140 2001
000141 2001      	.DB  0x2,0x20,0x2,0x20,0x1,0x20,0x1,0x20
000142 2001
000143 2001
000144 2001
000145 2001      	.DB  0x1,0x20,0x1,0x20,0x1,0x20,0x1,0x20
000146 2001
000147 2000
000148 2000
000149 2000      	.DB  0x1,0x20,0x0,0x20,0x0,0x20,0x0,0x20
00014a 6000
00014b 5000
00014c 5000
00014d 5000      	.DB  0x0,0x60,0x0,0x50,0x0,0x50,0x0,0x50
00014e 5011
00014f 5019
000150 500e
000151 5008      	.DB  0x11,0x50,0x19,0x50,0xE,0x50,0x8,0x50
000152 5004
000153 5004
000154 5004
000155 5004      	.DB  0x4,0x50,0x4,0x50,0x4,0x50,0x4,0x50
000156 5004
000157 5000
000158 5000
000159 5000      	.DB  0x4,0x50,0x0,0x50,0x0,0x50,0x0,0x50
00015a 7000
00015b 6000
00015c 6000
00015d 6000      	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
00015e 6025
00015f 6035
000160 601a
000161 6010      	.DB  0x25,0x60,0x35,0x60,0x1A,0x60,0x10,0x60
000162 6008
000163 6008
000164 6008
000165 6008      	.DB  0x8,0x60,0x8,0x60,0x8,0x60,0x8,0x60
000166 6008
000167 6000
000168 6000
000169 6000      	.DB  0x8,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00016a 8000
00016b 7000
00016c 7000
00016d 7000      	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
00016e 7026
00016f 7078
000170 7039
000171 7036      	.DB  0x26,0x70,0x78,0x70,0x39,0x70,0x36,0x70
000172 7010
000173 7010
000174 7010
000175 7010      	.DB  0x10,0x70,0x10,0x70,0x10,0x70,0x10,0x70
000176 7010
000177 7000
000178 7000
000179 7000      	.DB  0x10,0x70,0x0,0x70,0x0,0x70,0x0,0x70
00017a 8000
00017b 7000
00017c 7000
00017d 7000      	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
00017e 7010
00017f 7008
000180 7014
000181 7022      	.DB  0x10,0x70,0x8,0x70,0x14,0x70,0x22,0x70
000182 7022
000183 7041
000184 7049
000185 7049      	.DB  0x22,0x70,0x41,0x70,0x49,0x70,0x49,0x70
000186 7036
000187 7000
000188 7000
000189 7000      	.DB  0x36,0x70,0x0,0x70,0x0,0x70,0x0,0x70
00018a 7000
00018b 6000
00018c 6000
00018d 6000      	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
00018e 600c
00018f 6010
000190 6020
000191 6021      	.DB  0xC,0x60,0x10,0x60,0x20,0x60,0x21,0x60
000192 601e
000193 6004
000194 6008
000195 6010      	.DB  0x1E,0x60,0x4,0x60,0x8,0x60,0x10,0x60
000196 6020
000197 6000
000198 6000
000199 6000      	.DB  0x20,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00019a 8000
00019b 7000
00019c 7000
00019d 7000      	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
00019e 7041
00019f 7041
0001a0 7022
0001a1 7022      	.DB  0x41,0x70,0x41,0x70,0x22,0x70,0x22,0x70
0001a2 7014
0001a3 7014
0001a4 7008
0001a5 7008      	.DB  0x14,0x70,0x14,0x70,0x8,0x70,0x8,0x70
0001a6 7008
0001a7 7000
0001a8 7000
0001a9 7000      	.DB  0x8,0x70,0x0,0x70,0x0,0x70,0x0,0x70
0001aa 8000
0001ab 7000
0001ac 7000
0001ad 7000      	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
0001ae 7008
0001af 7008
0001b0 7008
0001b1 7014      	.DB  0x8,0x70,0x8,0x70,0x8,0x70,0x14,0x70
0001b2 7014
0001b3 7022
0001b4 7022
0001b5 7041      	.DB  0x14,0x70,0x22,0x70,0x22,0x70,0x41,0x70
0001b6 7041
0001b7 7000
0001b8 7000
0001b9 7000      	.DB  0x41,0x70,0x0,0x70,0x0,0x70,0x0,0x70
0001ba 6000
0001bb 5000
0001bc 5000
0001bd 5000      	.DB  0x0,0x60,0x0,0x50,0x0,0x50,0x0,0x50
0001be 500c
0001bf 5012
0001c0 5012
0001c1 500e      	.DB  0xC,0x50,0x12,0x50,0x12,0x50,0xE,0x50
0001c2 5002
0001c3 5002
0001c4 5002
0001c5 5001      	.DB  0x2,0x50,0x2,0x50,0x2,0x50,0x1,0x50
0001c6 5001
0001c7 5000
0001c8 5000
0001c9 5000      	.DB  0x1,0x50,0x0,0x50,0x0,0x50,0x0,0x50
0001ca b000
0001cb b000
0001cc b000
0001cd b000      	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
0001ce b010
0001cf b000
0001d0 b000
0001d1 b00e      	.DB  0x10,0xB0,0x0,0xB0,0x0,0xB0,0xE,0xB0
0001d2 b111
0001d3 b121
0001d4 b6fe
0001d5 b000      	.DB  0x11,0xB1,0x21,0xB1,0xFE,0xB6,0x0,0xB0
0001d6 b000
0001d7 b000
0001d8 b000
0001d9 b000      	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
0001da 6000
0001db 6000
0001dc 6000
0001dd 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
0001de 6000
0001df 6000
0001e0 600c
0001e1 6012      	.DB  0x0,0x60,0x0,0x60,0xC,0x60,0x12,0x60
0001e2 6010
0001e3 6009
0001e4 603e
0001e5 6000      	.DB  0x10,0x60,0x9,0x60,0x3E,0x60,0x0,0x60
0001e6 6000
0001e7 6000
0001e8 6000
0001e9 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
0001ea 4000
0001eb 4000
0001ec 4000
0001ed 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0001ee 4000
0001ef 4000
0001f0 4000
0001f1 4003      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x3,0x40
0001f2 4003
0001f3 4000
0001f4 4000
0001f5 4000      	.DB  0x3,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0001f6 4000
0001f7 4000
0001f8 4000
0001f9 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0001fa 4000
0001fb 4000
0001fc 4000
0001fd 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0001fe 4000
0001ff 4000
000200 4001
000201 4002      	.DB  0x0,0x40,0x0,0x40,0x1,0x40,0x2,0x40
000202 4003
000203 4003
000204 4000
000205 4000      	.DB  0x3,0x40,0x3,0x40,0x0,0x40,0x0,0x40
000206 4000
000207 4000
000208 4000
000209 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00020a 4000
00020b 4000
00020c 4000
00020d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00020e 4000
00020f 4000
000210 4003
000211 4003      	.DB  0x0,0x40,0x0,0x40,0x3,0x40,0x3,0x40
000212 4001
000213 4002
000214 4000
000215 4000      	.DB  0x1,0x40,0x2,0x40,0x0,0x40,0x0,0x40
000216 4000
000217 4000
000218 4000
000219 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00021a 4000
00021b 4000
00021c 4000
00021d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00021e 4001
00021f 4002
000220 4003
000221 4003      	.DB  0x1,0x40,0x2,0x40,0x3,0x40,0x3,0x40
000222 4000
000223 4000
000224 4003
000225 4003      	.DB  0x0,0x40,0x0,0x40,0x3,0x40,0x3,0x40
000226 4000
000227 4000
000228 4000
000229 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00022a 4000
00022b 4000
00022c 4000
00022d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00022e 4000
00022f 4000
000230 4000
000231 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
000232 4000
000233 4000
000234 4000
000235 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
000236 4000
000237 4000
000238 4000
000239 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00023a 8000
00023b 8000
00023c 8018
00023d 803c      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x3C,0x80
00023e 803c
00023f 803c
000240 8018
000241 8018      	.DB  0x3C,0x80,0x3C,0x80,0x18,0x80,0x18,0x80
000242 8018
000243 8000
000244 8018
000245 8018      	.DB  0x18,0x80,0x0,0x80,0x18,0x80,0x18,0x80
000246 8000
000247 8000
000248 8000
000249 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00024a 8000
00024b 8063
00024c 8063
00024d 8063      	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x63,0x80
00024e 8022
00024f 8000
000250 8000
000251 8000      	.DB  0x22,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000252 8000
000253 8000
000254 8000
000255 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000256 8000
000257 8000
000258 8000
000259 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00025a 8000
00025b 8000
00025c 8000
00025d 8036      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x36,0x80
00025e 8036
00025f 807f
000260 8036
000261 8036      	.DB  0x36,0x80,0x7F,0x80,0x36,0x80,0x36,0x80
000262 8036
000263 807f
000264 8036
000265 8036      	.DB  0x36,0x80,0x7F,0x80,0x36,0x80,0x36,0x80
000266 8000
000267 8000
000268 8000
000269 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00026a 800c
00026b 800c
00026c 803e
00026d 8063      	.DB  0xC,0x80,0xC,0x80,0x3E,0x80,0x63,0x80
00026e 8061
00026f 8060
000270 803e
000271 8003      	.DB  0x61,0x80,0x60,0x80,0x3E,0x80,0x3,0x80
000272 8003
000273 8043
000274 8063
000275 803e      	.DB  0x3,0x80,0x43,0x80,0x63,0x80,0x3E,0x80
000276 800c
000277 800c
000278 8000
000279 8000      	.DB  0xC,0x80,0xC,0x80,0x0,0x80,0x0,0x80
00027a 8000
00027b 8000
00027c 8000
00027d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00027e 8000
00027f 8061
000280 8063
000281 8006      	.DB  0x0,0x80,0x61,0x80,0x63,0x80,0x6,0x80
000282 800c
000283 8018
000284 8033
000285 8063      	.DB  0xC,0x80,0x18,0x80,0x33,0x80,0x63,0x80
000286 8000
000287 8000
000288 8000
000289 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00028a 8000
00028b 8000
00028c 8000
00028d 801c      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x1C,0x80
00028e 8036
00028f 8036
000290 801c
000291 803b      	.DB  0x36,0x80,0x36,0x80,0x1C,0x80,0x3B,0x80
000292 806e
000293 8066
000294 8066
000295 803b      	.DB  0x6E,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
000296 8000
000297 8000
000298 8000
000299 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00029a 8000
00029b 8030
00029c 8030
00029d 8030      	.DB  0x0,0x80,0x30,0x80,0x30,0x80,0x30,0x80
00029e 8060
00029f 8000
0002a0 8000
0002a1 8000      	.DB  0x60,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002a2 8000
0002a3 8000
0002a4 8000
0002a5 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002a6 8000
0002a7 8000
0002a8 8000
0002a9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002aa 8000
0002ab 8000
0002ac 800c
0002ad 8018      	.DB  0x0,0x80,0x0,0x80,0xC,0x80,0x18,0x80
0002ae 8018
0002af 8030
0002b0 8030
0002b1 8030      	.DB  0x18,0x80,0x30,0x80,0x30,0x80,0x30,0x80
0002b2 8030
0002b3 8018
0002b4 8018
0002b5 800c      	.DB  0x30,0x80,0x18,0x80,0x18,0x80,0xC,0x80
0002b6 8000
0002b7 8000
0002b8 8000
0002b9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002ba 8000
0002bb 8000
0002bc 8018
0002bd 800c      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0xC,0x80
0002be 800c
0002bf 8006
0002c0 8006
0002c1 8006      	.DB  0xC,0x80,0x6,0x80,0x6,0x80,0x6,0x80
0002c2 8006
0002c3 800c
0002c4 800c
0002c5 8018      	.DB  0x6,0x80,0xC,0x80,0xC,0x80,0x18,0x80
0002c6 8000
0002c7 8000
0002c8 8000
0002c9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002ca 8000
0002cb 8000
0002cc 8000
0002cd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002ce 8042
0002cf 8066
0002d0 803c
0002d1 80ff      	.DB  0x42,0x80,0x66,0x80,0x3C,0x80,0xFF,0x80
0002d2 803c
0002d3 8066
0002d4 8042
0002d5 8000      	.DB  0x3C,0x80,0x66,0x80,0x42,0x80,0x0,0x80
0002d6 8000
0002d7 8000
0002d8 8000
0002d9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002da 8000
0002db 8000
0002dc 8000
0002dd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002de 8018
0002df 8018
0002e0 8018
0002e1 80ff      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0xFF,0x80
0002e2 8018
0002e3 8018
0002e4 8018
0002e5 8000      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x0,0x80
0002e6 8000
0002e7 8000
0002e8 8000
0002e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002ea 8000
0002eb 8000
0002ec 8000
0002ed 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002ee 8000
0002ef 8000
0002f0 8000
0002f1 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002f2 8000
0002f3 8000
0002f4 8018
0002f5 8018      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
0002f6 8018
0002f7 8030
0002f8 8000
0002f9 8000      	.DB  0x18,0x80,0x30,0x80,0x0,0x80,0x0,0x80
0002fa 8000
0002fb 8000
0002fc 8000
0002fd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0002fe 8000
0002ff 8000
000300 8000
000301 80ff      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0xFF,0x80
000302 8000
000303 8000
000304 8000
000305 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000306 8000
000307 8000
000308 8000
000309 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00030a 8000
00030b 8000
00030c 8000
00030d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00030e 8000
00030f 8000
000310 8000
000311 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000312 8000
000313 8000
000314 8018
000315 8018      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
000316 8000
000317 8000
000318 8000
000319 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00031a 8000
00031b 8000
00031c 8001
00031d 8003      	.DB  0x0,0x80,0x0,0x80,0x1,0x80,0x3,0x80
00031e 8007
00031f 800e
000320 801c
000321 8038      	.DB  0x7,0x80,0xE,0x80,0x1C,0x80,0x38,0x80
000322 8070
000323 80e0
000324 80c0
000325 8080      	.DB  0x70,0x80,0xE0,0x80,0xC0,0x80,0x80,0x80
000326 8000
000327 8000
000328 8000
000329 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00032a 8000
00032b 8000
00032c 803e
00032d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00032e 8063
00032f 8063
000330 806b
000331 806b      	.DB  0x63,0x80,0x63,0x80,0x6B,0x80,0x6B,0x80
000332 8063
000333 8063
000334 8063
000335 803e      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
000336 8000
000337 8000
000338 8000
000339 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00033a 8000
00033b 8000
00033c 800c
00033d 801c      	.DB  0x0,0x80,0x0,0x80,0xC,0x80,0x1C,0x80
00033e 803c
00033f 800c
000340 800c
000341 800c      	.DB  0x3C,0x80,0xC,0x80,0xC,0x80,0xC,0x80
000342 800c
000343 800c
000344 800c
000345 803f      	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x3F,0x80
000346 8000
000347 8000
000348 8000
000349 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00034a 8000
00034b 8000
00034c 803e
00034d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00034e 8003
00034f 8006
000350 800c
000351 8018      	.DB  0x3,0x80,0x6,0x80,0xC,0x80,0x18,0x80
000352 8030
000353 8061
000354 8063
000355 807f      	.DB  0x30,0x80,0x61,0x80,0x63,0x80,0x7F,0x80
000356 8000
000357 8000
000358 8000
000359 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00035a 8000
00035b 8000
00035c 803e
00035d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00035e 8003
00035f 8003
000360 801e
000361 8003      	.DB  0x3,0x80,0x3,0x80,0x1E,0x80,0x3,0x80
000362 8003
000363 8003
000364 8063
000365 803e      	.DB  0x3,0x80,0x3,0x80,0x63,0x80,0x3E,0x80
000366 8000
000367 8000
000368 8000
000369 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00036a 8000
00036b 8000
00036c 8006
00036d 800e      	.DB  0x0,0x80,0x0,0x80,0x6,0x80,0xE,0x80
00036e 801e
00036f 8036
000370 8066
000371 8066      	.DB  0x1E,0x80,0x36,0x80,0x66,0x80,0x66,0x80
000372 807f
000373 8006
000374 8006
000375 800f      	.DB  0x7F,0x80,0x6,0x80,0x6,0x80,0xF,0x80
000376 8000
000377 8000
000378 8000
000379 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00037a 8000
00037b 8000
00037c 807f
00037d 8060      	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x60,0x80
00037e 8060
00037f 8060
000380 807e
000381 8003      	.DB  0x60,0x80,0x60,0x80,0x7E,0x80,0x3,0x80
000382 8003
000383 8063
000384 8073
000385 803e      	.DB  0x3,0x80,0x63,0x80,0x73,0x80,0x3E,0x80
000386 8000
000387 8000
000388 8000
000389 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00038a 8000
00038b 8000
00038c 801c
00038d 8030      	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0x30,0x80
00038e 8060
00038f 8060
000390 807e
000391 8063      	.DB  0x60,0x80,0x60,0x80,0x7E,0x80,0x63,0x80
000392 8063
000393 8063
000394 8063
000395 803e      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
000396 8000
000397 8000
000398 8000
000399 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00039a 8000
00039b 8000
00039c 807f
00039d 8063      	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x63,0x80
00039e 8003
00039f 8006
0003a0 8006
0003a1 800c      	.DB  0x3,0x80,0x6,0x80,0x6,0x80,0xC,0x80
0003a2 800c
0003a3 8018
0003a4 8018
0003a5 8018      	.DB  0xC,0x80,0x18,0x80,0x18,0x80,0x18,0x80
0003a6 8000
0003a7 8000
0003a8 8000
0003a9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003aa 8000
0003ab 8000
0003ac 803e
0003ad 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
0003ae 8063
0003af 8063
0003b0 803e
0003b1 8063      	.DB  0x63,0x80,0x63,0x80,0x3E,0x80,0x63,0x80
0003b2 8063
0003b3 8063
0003b4 8063
0003b5 803e      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
0003b6 8000
0003b7 8000
0003b8 8000
0003b9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003ba 8000
0003bb 8000
0003bc 803e
0003bd 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
0003be 8063
0003bf 8063
0003c0 8063
0003c1 803f      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3F,0x80
0003c2 8003
0003c3 8003
0003c4 8006
0003c5 803c      	.DB  0x3,0x80,0x3,0x80,0x6,0x80,0x3C,0x80
0003c6 8000
0003c7 8000
0003c8 8000
0003c9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003ca 8000
0003cb 8000
0003cc 8000
0003cd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003ce 8000
0003cf 8018
0003d0 8018
0003d1 8000      	.DB  0x0,0x80,0x18,0x80,0x18,0x80,0x0,0x80
0003d2 8000
0003d3 8000
0003d4 8018
0003d5 8018      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
0003d6 8000
0003d7 8000
0003d8 8000
0003d9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003da 8000
0003db 8000
0003dc 8000
0003dd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003de 8000
0003df 8018
0003e0 8018
0003e1 8000      	.DB  0x0,0x80,0x18,0x80,0x18,0x80,0x0,0x80
0003e2 8000
0003e3 8000
0003e4 8018
0003e5 8018      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
0003e6 8018
0003e7 8030
0003e8 8000
0003e9 8000      	.DB  0x18,0x80,0x30,0x80,0x0,0x80,0x0,0x80
0003ea 8000
0003eb 8000
0003ec 8000
0003ed 8006      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x6,0x80
0003ee 800c
0003ef 8018
0003f0 8030
0003f1 8060      	.DB  0xC,0x80,0x18,0x80,0x30,0x80,0x60,0x80
0003f2 8030
0003f3 8018
0003f4 800c
0003f5 8006      	.DB  0x30,0x80,0x18,0x80,0xC,0x80,0x6,0x80
0003f6 8000
0003f7 8000
0003f8 8000
0003f9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003fa 8000
0003fb 8000
0003fc 8000
0003fd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0003fe 8000
0003ff 8000
000400 807e
000401 8000      	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x0,0x80
000402 8000
000403 807e
000404 8000
000405 8000      	.DB  0x0,0x80,0x7E,0x80,0x0,0x80,0x0,0x80
000406 8000
000407 8000
000408 8000
000409 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00040a 8000
00040b 8000
00040c 8000
00040d 8060      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x60,0x80
00040e 8030
00040f 8018
000410 800c
000411 8006      	.DB  0x30,0x80,0x18,0x80,0xC,0x80,0x6,0x80
000412 800c
000413 8018
000414 8030
000415 8060      	.DB  0xC,0x80,0x18,0x80,0x30,0x80,0x60,0x80
000416 8000
000417 8000
000418 8000
000419 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00041a 8000
00041b 8000
00041c 803e
00041d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00041e 8063
00041f 8006
000420 800c
000421 800c      	.DB  0x63,0x80,0x6,0x80,0xC,0x80,0xC,0x80
000422 800c
000423 8000
000424 800c
000425 800c      	.DB  0xC,0x80,0x0,0x80,0xC,0x80,0xC,0x80
000426 8000
000427 8000
000428 8000
000429 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00042a 8000
00042b 8000
00042c 803e
00042d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00042e 8063
00042f 806f
000430 806b
000431 806b      	.DB  0x63,0x80,0x6F,0x80,0x6B,0x80,0x6B,0x80
000432 806e
000433 8060
000434 8060
000435 803e      	.DB  0x6E,0x80,0x60,0x80,0x60,0x80,0x3E,0x80
000436 8000
000437 8000
000438 8000
000439 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00043a 8000
00043b 8000
00043c 8008
00043d 801c      	.DB  0x0,0x80,0x0,0x80,0x8,0x80,0x1C,0x80
00043e 8036
00043f 8063
000440 8063
000441 8063      	.DB  0x36,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000442 807f
000443 8063
000444 8063
000445 8063      	.DB  0x7F,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000446 8000
000447 8000
000448 8000
000449 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00044a 8000
00044b 8000
00044c 807e
00044d 8033      	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x33,0x80
00044e 8033
00044f 8033
000450 803e
000451 8033      	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x33,0x80
000452 8033
000453 8033
000454 8033
000455 807e      	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x7E,0x80
000456 8000
000457 8000
000458 8000
000459 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00045a 8000
00045b 8000
00045c 801e
00045d 8033      	.DB  0x0,0x80,0x0,0x80,0x1E,0x80,0x33,0x80
00045e 8061
00045f 8060
000460 8060
000461 8060      	.DB  0x61,0x80,0x60,0x80,0x60,0x80,0x60,0x80
000462 8060
000463 8061
000464 8033
000465 801e      	.DB  0x60,0x80,0x61,0x80,0x33,0x80,0x1E,0x80
000466 8000
000467 8000
000468 8000
000469 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00046a 8000
00046b 8000
00046c 807c
00046d 8036      	.DB  0x0,0x80,0x0,0x80,0x7C,0x80,0x36,0x80
00046e 8033
00046f 8033
000470 8033
000471 8033      	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x33,0x80
000472 8033
000473 8033
000474 8036
000475 807c      	.DB  0x33,0x80,0x33,0x80,0x36,0x80,0x7C,0x80
000476 8000
000477 8000
000478 8000
000479 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00047a 8000
00047b 8000
00047c 807f
00047d 8033      	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x33,0x80
00047e 8031
00047f 8034
000480 803c
000481 8034      	.DB  0x31,0x80,0x34,0x80,0x3C,0x80,0x34,0x80
000482 8030
000483 8031
000484 8033
000485 807f      	.DB  0x30,0x80,0x31,0x80,0x33,0x80,0x7F,0x80
000486 8000
000487 8000
000488 8000
000489 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00048a 8000
00048b 8000
00048c 807f
00048d 8033      	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x33,0x80
00048e 8031
00048f 8034
000490 803c
000491 8034      	.DB  0x31,0x80,0x34,0x80,0x3C,0x80,0x34,0x80
000492 8030
000493 8030
000494 8030
000495 8078      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
000496 8000
000497 8000
000498 8000
000499 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00049a 8000
00049b 8000
00049c 801e
00049d 8033      	.DB  0x0,0x80,0x0,0x80,0x1E,0x80,0x33,0x80
00049e 8061
00049f 8060
0004a0 8060
0004a1 806f      	.DB  0x61,0x80,0x60,0x80,0x60,0x80,0x6F,0x80
0004a2 8063
0004a3 8063
0004a4 8037
0004a5 801d      	.DB  0x63,0x80,0x63,0x80,0x37,0x80,0x1D,0x80
0004a6 8000
0004a7 8000
0004a8 8000
0004a9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0004aa 8000
0004ab 8000
0004ac 8063
0004ad 8063      	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
0004ae 8063
0004af 8063
0004b0 807f
0004b1 8063      	.DB  0x63,0x80,0x63,0x80,0x7F,0x80,0x63,0x80
0004b2 8063
0004b3 8063
0004b4 8063
0004b5 8063      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
0004b6 8000
0004b7 8000
0004b8 8000
0004b9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0004ba 8000
0004bb 8000
0004bc 803c
0004bd 8018      	.DB  0x0,0x80,0x0,0x80,0x3C,0x80,0x18,0x80
0004be 8018
0004bf 8018
0004c0 8018
0004c1 8018      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x18,0x80
0004c2 8018
0004c3 8018
0004c4 8018
0004c5 803c      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x3C,0x80
0004c6 8000
0004c7 8000
0004c8 8000
0004c9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0004ca 8000
0004cb 8000
0004cc 800f
0004cd 8006      	.DB  0x0,0x80,0x0,0x80,0xF,0x80,0x6,0x80
0004ce 8006
0004cf 8006
0004d0 8006
0004d1 8006      	.DB  0x6,0x80,0x6,0x80,0x6,0x80,0x6,0x80
0004d2 8006
0004d3 8066
0004d4 8066
0004d5 803c      	.DB  0x6,0x80,0x66,0x80,0x66,0x80,0x3C,0x80
0004d6 8000
0004d7 8000
0004d8 8000
0004d9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0004da 8000
0004db 8000
0004dc 8073
0004dd 8033      	.DB  0x0,0x80,0x0,0x80,0x73,0x80,0x33,0x80
0004de 8036
0004df 8036
0004e0 803c
0004e1 8036      	.DB  0x36,0x80,0x36,0x80,0x3C,0x80,0x36,0x80
0004e2 8036
0004e3 8033
0004e4 8033
0004e5 8073      	.DB  0x36,0x80,0x33,0x80,0x33,0x80,0x73,0x80
0004e6 8000
0004e7 8000
0004e8 8000
0004e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0004ea 8000
0004eb 8000
0004ec 8078
0004ed 8030      	.DB  0x0,0x80,0x0,0x80,0x78,0x80,0x30,0x80
0004ee 8030
0004ef 8030
0004f0 8030
0004f1 8030      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x30,0x80
0004f2 8030
0004f3 8031
0004f4 8033
0004f5 807f      	.DB  0x30,0x80,0x31,0x80,0x33,0x80,0x7F,0x80
0004f6 8000
0004f7 8000
0004f8 8000
0004f9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0004fa 8000
0004fb 8000
0004fc 8063
0004fd 8077      	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x77,0x80
0004fe 807f
0004ff 806b
000500 8063
000501 8063      	.DB  0x7F,0x80,0x6B,0x80,0x63,0x80,0x63,0x80
000502 8063
000503 8063
000504 8063
000505 8063      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000506 8000
000507 8000
000508 8000
000509 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00050a 8000
00050b 8000
00050c 8063
00050d 8063      	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
00050e 8073
00050f 807b
000510 807f
000511 806f      	.DB  0x73,0x80,0x7B,0x80,0x7F,0x80,0x6F,0x80
000512 8067
000513 8063
000514 8063
000515 8063      	.DB  0x67,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000516 8000
000517 8000
000518 8000
000519 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00051a 8000
00051b 8000
00051c 801c
00051d 8036      	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0x36,0x80
00051e 8063
00051f 8063
000520 8063
000521 8063      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000522 8063
000523 8063
000524 8036
000525 801c      	.DB  0x63,0x80,0x63,0x80,0x36,0x80,0x1C,0x80
000526 8000
000527 8000
000528 8000
000529 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00052a 8000
00052b 8000
00052c 807e
00052d 8033      	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x33,0x80
00052e 8033
00052f 8033
000530 803e
000531 8030      	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x30,0x80
000532 8030
000533 8030
000534 8030
000535 8078      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
000536 8000
000537 8000
000538 8000
000539 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00053a 8000
00053b 8000
00053c 803e
00053d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00053e 8063
00053f 8063
000540 8063
000541 8063      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000542 8063
000543 806b
000544 806f
000545 803e      	.DB  0x63,0x80,0x6B,0x80,0x6F,0x80,0x3E,0x80
000546 8006
000547 8007
000548 8000
000549 8000      	.DB  0x6,0x80,0x7,0x80,0x0,0x80,0x0,0x80
00054a 8000
00054b 8000
00054c 807e
00054d 8033      	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x33,0x80
00054e 8033
00054f 8033
000550 803e
000551 8036      	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x36,0x80
000552 8036
000553 8033
000554 8033
000555 8073      	.DB  0x36,0x80,0x33,0x80,0x33,0x80,0x73,0x80
000556 8000
000557 8000
000558 8000
000559 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00055a 8000
00055b 8000
00055c 803e
00055d 8063      	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
00055e 8063
00055f 8030
000560 801c
000561 8006      	.DB  0x63,0x80,0x30,0x80,0x1C,0x80,0x6,0x80
000562 8003
000563 8063
000564 8063
000565 803e      	.DB  0x3,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
000566 8000
000567 8000
000568 8000
000569 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00056a 8000
00056b 8000
00056c 80ff
00056d 80db      	.DB  0x0,0x80,0x0,0x80,0xFF,0x80,0xDB,0x80
00056e 8099
00056f 8018
000570 8018
000571 8018      	.DB  0x99,0x80,0x18,0x80,0x18,0x80,0x18,0x80
000572 8018
000573 8018
000574 8018
000575 803c      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x3C,0x80
000576 8000
000577 8000
000578 8000
000579 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00057a 8000
00057b 8000
00057c 8063
00057d 8063      	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
00057e 8063
00057f 8063
000580 8063
000581 8063      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000582 8063
000583 8063
000584 8063
000585 803e      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
000586 8000
000587 8000
000588 8000
000589 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00058a 8000
00058b 8000
00058c 8063
00058d 8063      	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
00058e 8063
00058f 8063
000590 8063
000591 8063      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
000592 8063
000593 8036
000594 801c
000595 8008      	.DB  0x63,0x80,0x36,0x80,0x1C,0x80,0x8,0x80
000596 8000
000597 8000
000598 8000
000599 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00059a 8000
00059b 8000
00059c 8063
00059d 8063      	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
00059e 8063
00059f 8063
0005a0 8063
0005a1 806b      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x6B,0x80
0005a2 806b
0005a3 807f
0005a4 8036
0005a5 8036      	.DB  0x6B,0x80,0x7F,0x80,0x36,0x80,0x36,0x80
0005a6 8000
0005a7 8000
0005a8 8000
0005a9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0005aa 8000
0005ab 8000
0005ac 80c3
0005ad 80c3      	.DB  0x0,0x80,0x0,0x80,0xC3,0x80,0xC3,0x80
0005ae 8066
0005af 803c
0005b0 8018
0005b1 8018      	.DB  0x66,0x80,0x3C,0x80,0x18,0x80,0x18,0x80
0005b2 803c
0005b3 8066
0005b4 80c3
0005b5 80c3      	.DB  0x3C,0x80,0x66,0x80,0xC3,0x80,0xC3,0x80
0005b6 8000
0005b7 8000
0005b8 8000
0005b9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0005ba 8000
0005bb 8000
0005bc 80c3
0005bd 80c3      	.DB  0x0,0x80,0x0,0x80,0xC3,0x80,0xC3,0x80
0005be 80c3
0005bf 8066
0005c0 803c
0005c1 8018      	.DB  0xC3,0x80,0x66,0x80,0x3C,0x80,0x18,0x80
0005c2 8018
0005c3 8018
0005c4 8018
0005c5 803c      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x3C,0x80
0005c6 8000
0005c7 8000
0005c8 8000
0005c9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0005ca 8000
0005cb 8000
0005cc 807f
0005cd 8063      	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x63,0x80
0005ce 8043
0005cf 8006
0005d0 800c
0005d1 8018      	.DB  0x43,0x80,0x6,0x80,0xC,0x80,0x18,0x80
0005d2 8030
0005d3 8061
0005d4 8063
0005d5 807f      	.DB  0x30,0x80,0x61,0x80,0x63,0x80,0x7F,0x80
0005d6 8000
0005d7 8000
0005d8 8000
0005d9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0005da 8000
0005db 8000
0005dc 803c
0005dd 8030      	.DB  0x0,0x80,0x0,0x80,0x3C,0x80,0x30,0x80
0005de 8030
0005df 8030
0005e0 8030
0005e1 8030      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x30,0x80
0005e2 8030
0005e3 8030
0005e4 8030
0005e5 803c      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x3C,0x80
0005e6 8000
0005e7 8000
0005e8 8000
0005e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0005ea 8000
0005eb 8000
0005ec 8080
0005ed 80c0      	.DB  0x0,0x80,0x0,0x80,0x80,0x80,0xC0,0x80
0005ee 80e0
0005ef 8070
0005f0 8038
0005f1 801c      	.DB  0xE0,0x80,0x70,0x80,0x38,0x80,0x1C,0x80
0005f2 800e
0005f3 8007
0005f4 8003
0005f5 8001      	.DB  0xE,0x80,0x7,0x80,0x3,0x80,0x1,0x80
0005f6 8000
0005f7 8000
0005f8 8000
0005f9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0005fa 8000
0005fb 8000
0005fc 803c
0005fd 800c      	.DB  0x0,0x80,0x0,0x80,0x3C,0x80,0xC,0x80
0005fe 800c
0005ff 800c
000600 800c
000601 800c      	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0xC,0x80
000602 800c
000603 800c
000604 800c
000605 803c      	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x3C,0x80
000606 8000
000607 8000
000608 8000
000609 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00060a 8008
00060b 801c
00060c 8036
00060d 8063      	.DB  0x8,0x80,0x1C,0x80,0x36,0x80,0x63,0x80
00060e 8000
00060f 8000
000610 8000
000611 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000612 8000
000613 8000
000614 8000
000615 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000616 8000
000617 8000
000618 8000
000619 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00061a 8000
00061b 8000
00061c 8000
00061d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00061e 8000
00061f 8000
000620 8000
000621 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000622 8000
000623 8000
000624 8000
000625 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000626 80ff
000627 8000
000628 8000
000629 8000      	.DB  0xFF,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00062a 8018
00062b 8018
00062c 800c
00062d 8000      	.DB  0x18,0x80,0x18,0x80,0xC,0x80,0x0,0x80
00062e 8000
00062f 8000
000630 8000
000631 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000632 8000
000633 8000
000634 8000
000635 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000636 8000
000637 8000
000638 8000
000639 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00063a 8000
00063b 8000
00063c 8000
00063d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00063e 8000
00063f 803c
000640 8046
000641 8006      	.DB  0x0,0x80,0x3C,0x80,0x46,0x80,0x6,0x80
000642 803e
000643 8066
000644 8066
000645 803b      	.DB  0x3E,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
000646 8000
000647 8000
000648 8000
000649 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00064a 8000
00064b 8000
00064c 8070
00064d 8030      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x30,0x80
00064e 8030
00064f 803c
000650 8036
000651 8033      	.DB  0x30,0x80,0x3C,0x80,0x36,0x80,0x33,0x80
000652 8033
000653 8033
000654 8033
000655 806e      	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x6E,0x80
000656 8000
000657 8000
000658 8000
000659 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00065a 8000
00065b 8000
00065c 8000
00065d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00065e 8000
00065f 803e
000660 8063
000661 8060      	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x60,0x80
000662 8060
000663 8060
000664 8063
000665 803e      	.DB  0x60,0x80,0x60,0x80,0x63,0x80,0x3E,0x80
000666 8000
000667 8000
000668 8000
000669 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00066a 8000
00066b 8000
00066c 800e
00066d 8006      	.DB  0x0,0x80,0x0,0x80,0xE,0x80,0x6,0x80
00066e 8006
00066f 801e
000670 8036
000671 8066      	.DB  0x6,0x80,0x1E,0x80,0x36,0x80,0x66,0x80
000672 8066
000673 8066
000674 8066
000675 803b      	.DB  0x66,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
000676 8000
000677 8000
000678 8000
000679 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00067a 8000
00067b 8000
00067c 8000
00067d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00067e 8000
00067f 803e
000680 8063
000681 8063      	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x63,0x80
000682 807e
000683 8060
000684 8063
000685 803e      	.DB  0x7E,0x80,0x60,0x80,0x63,0x80,0x3E,0x80
000686 8000
000687 8000
000688 8000
000689 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00068a 8000
00068b 8000
00068c 801c
00068d 8036      	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0x36,0x80
00068e 8032
00068f 8030
000690 807c
000691 8030      	.DB  0x32,0x80,0x30,0x80,0x7C,0x80,0x30,0x80
000692 8030
000693 8030
000694 8030
000695 8078      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
000696 8000
000697 8000
000698 8000
000699 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00069a 8000
00069b 8000
00069c 8000
00069d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00069e 8000
00069f 803b
0006a0 8066
0006a1 8066      	.DB  0x0,0x80,0x3B,0x80,0x66,0x80,0x66,0x80
0006a2 8066
0006a3 8066
0006a4 803e
0006a5 8006      	.DB  0x66,0x80,0x66,0x80,0x3E,0x80,0x6,0x80
0006a6 8066
0006a7 803c
0006a8 8000
0006a9 8000      	.DB  0x66,0x80,0x3C,0x80,0x0,0x80,0x0,0x80
0006aa 8000
0006ab 8000
0006ac 8070
0006ad 8030      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x30,0x80
0006ae 8030
0006af 8036
0006b0 803b
0006b1 8033      	.DB  0x30,0x80,0x36,0x80,0x3B,0x80,0x33,0x80
0006b2 8033
0006b3 8033
0006b4 8033
0006b5 8073      	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x73,0x80
0006b6 8000
0006b7 8000
0006b8 8000
0006b9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0006ba 8000
0006bb 8000
0006bc 800c
0006bd 800c      	.DB  0x0,0x80,0x0,0x80,0xC,0x80,0xC,0x80
0006be 8000
0006bf 801c
0006c0 800c
0006c1 800c      	.DB  0x0,0x80,0x1C,0x80,0xC,0x80,0xC,0x80
0006c2 800c
0006c3 800c
0006c4 800c
0006c5 801e      	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x1E,0x80
0006c6 8000
0006c7 8000
0006c8 8000
0006c9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0006ca 8000
0006cb 8000
0006cc 8006
0006cd 8006      	.DB  0x0,0x80,0x0,0x80,0x6,0x80,0x6,0x80
0006ce 8000
0006cf 800e
0006d0 8006
0006d1 8006      	.DB  0x0,0x80,0xE,0x80,0x6,0x80,0x6,0x80
0006d2 8006
0006d3 8006
0006d4 8006
0006d5 8066      	.DB  0x6,0x80,0x6,0x80,0x6,0x80,0x66,0x80
0006d6 8066
0006d7 803c
0006d8 8000
0006d9 8000      	.DB  0x66,0x80,0x3C,0x80,0x0,0x80,0x0,0x80
0006da 8000
0006db 8000
0006dc 8070
0006dd 8030      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x30,0x80
0006de 8030
0006df 8033
0006e0 8033
0006e1 8036      	.DB  0x30,0x80,0x33,0x80,0x33,0x80,0x36,0x80
0006e2 803c
0006e3 8036
0006e4 8033
0006e5 8073      	.DB  0x3C,0x80,0x36,0x80,0x33,0x80,0x73,0x80
0006e6 8000
0006e7 8000
0006e8 8000
0006e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0006ea 8000
0006eb 8000
0006ec 801c
0006ed 800c      	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0xC,0x80
0006ee 800c
0006ef 800c
0006f0 800c
0006f1 800c      	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0xC,0x80
0006f2 800c
0006f3 800c
0006f4 800c
0006f5 801e      	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x1E,0x80
0006f6 8000
0006f7 8000
0006f8 8000
0006f9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0006fa 8000
0006fb 8000
0006fc 8000
0006fd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0006fe 8000
0006ff 806e
000700 807f
000701 806b      	.DB  0x0,0x80,0x6E,0x80,0x7F,0x80,0x6B,0x80
000702 806b
000703 806b
000704 806b
000705 806b      	.DB  0x6B,0x80,0x6B,0x80,0x6B,0x80,0x6B,0x80
000706 8000
000707 8000
000708 8000
000709 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00070a 8000
00070b 8000
00070c 8000
00070d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00070e 8000
00070f 806e
000710 8033
000711 8033      	.DB  0x0,0x80,0x6E,0x80,0x33,0x80,0x33,0x80
000712 8033
000713 8033
000714 8033
000715 8033      	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x33,0x80
000716 8000
000717 8000
000718 8000
000719 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00071a 8000
00071b 8000
00071c 8000
00071d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00071e 8000
00071f 803e
000720 8063
000721 8063      	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x63,0x80
000722 8063
000723 8063
000724 8063
000725 803e      	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
000726 8000
000727 8000
000728 8000
000729 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00072a 8000
00072b 8000
00072c 8000
00072d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00072e 8000
00072f 806e
000730 8033
000731 8033      	.DB  0x0,0x80,0x6E,0x80,0x33,0x80,0x33,0x80
000732 8033
000733 8033
000734 803e
000735 8030      	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x30,0x80
000736 8030
000737 8078
000738 8000
000739 8000      	.DB  0x30,0x80,0x78,0x80,0x0,0x80,0x0,0x80
00073a 8000
00073b 8000
00073c 8000
00073d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00073e 8000
00073f 803b
000740 8066
000741 8066      	.DB  0x0,0x80,0x3B,0x80,0x66,0x80,0x66,0x80
000742 8066
000743 8066
000744 803e
000745 8006      	.DB  0x66,0x80,0x66,0x80,0x3E,0x80,0x6,0x80
000746 8006
000747 800f
000748 8000
000749 8000      	.DB  0x6,0x80,0xF,0x80,0x0,0x80,0x0,0x80
00074a 8000
00074b 8000
00074c 8000
00074d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00074e 8000
00074f 806e
000750 803b
000751 8033      	.DB  0x0,0x80,0x6E,0x80,0x3B,0x80,0x33,0x80
000752 8030
000753 8030
000754 8030
000755 8078      	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
000756 8000
000757 8000
000758 8000
000759 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00075a 8000
00075b 8000
00075c 8000
00075d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00075e 8000
00075f 803e
000760 8063
000761 8038      	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x38,0x80
000762 800e
000763 8003
000764 8063
000765 803e      	.DB  0xE,0x80,0x3,0x80,0x63,0x80,0x3E,0x80
000766 8000
000767 8000
000768 8000
000769 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00076a 8000
00076b 8000
00076c 8008
00076d 8018      	.DB  0x0,0x80,0x0,0x80,0x8,0x80,0x18,0x80
00076e 8018
00076f 807e
000770 8018
000771 8018      	.DB  0x18,0x80,0x7E,0x80,0x18,0x80,0x18,0x80
000772 8018
000773 8018
000774 801b
000775 800e      	.DB  0x18,0x80,0x18,0x80,0x1B,0x80,0xE,0x80
000776 8000
000777 8000
000778 8000
000779 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00077a 8000
00077b 8000
00077c 8000
00077d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00077e 8000
00077f 8066
000780 8066
000781 8066      	.DB  0x0,0x80,0x66,0x80,0x66,0x80,0x66,0x80
000782 8066
000783 8066
000784 8066
000785 803b      	.DB  0x66,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
000786 8000
000787 8000
000788 8000
000789 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00078a 8000
00078b 8000
00078c 8000
00078d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00078e 8000
00078f 8063
000790 8063
000791 8036      	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x36,0x80
000792 8036
000793 801c
000794 801c
000795 8008      	.DB  0x36,0x80,0x1C,0x80,0x1C,0x80,0x8,0x80
000796 8000
000797 8000
000798 8000
000799 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00079a 8000
00079b 8000
00079c 8000
00079d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00079e 8000
00079f 8063
0007a0 8063
0007a1 8063      	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x63,0x80
0007a2 806b
0007a3 806b
0007a4 807f
0007a5 8036      	.DB  0x6B,0x80,0x6B,0x80,0x7F,0x80,0x36,0x80
0007a6 8000
0007a7 8000
0007a8 8000
0007a9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007aa 8000
0007ab 8000
0007ac 8000
0007ad 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007ae 8000
0007af 8063
0007b0 8036
0007b1 801c      	.DB  0x0,0x80,0x63,0x80,0x36,0x80,0x1C,0x80
0007b2 801c
0007b3 801c
0007b4 8036
0007b5 8063      	.DB  0x1C,0x80,0x1C,0x80,0x36,0x80,0x63,0x80
0007b6 8000
0007b7 8000
0007b8 8000
0007b9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007ba 8000
0007bb 8000
0007bc 8000
0007bd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007be 8000
0007bf 8063
0007c0 8063
0007c1 8063      	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x63,0x80
0007c2 8063
0007c3 8063
0007c4 803f
0007c5 8003      	.DB  0x63,0x80,0x63,0x80,0x3F,0x80,0x3,0x80
0007c6 8006
0007c7 803c
0007c8 8000
0007c9 8000      	.DB  0x6,0x80,0x3C,0x80,0x0,0x80,0x0,0x80
0007ca 8000
0007cb 8000
0007cc 8000
0007cd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007ce 8000
0007cf 807f
0007d0 8066
0007d1 800c      	.DB  0x0,0x80,0x7F,0x80,0x66,0x80,0xC,0x80
0007d2 8018
0007d3 8030
0007d4 8063
0007d5 807f      	.DB  0x18,0x80,0x30,0x80,0x63,0x80,0x7F,0x80
0007d6 8000
0007d7 8000
0007d8 8000
0007d9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007da 8000
0007db 8000
0007dc 800e
0007dd 8018      	.DB  0x0,0x80,0x0,0x80,0xE,0x80,0x18,0x80
0007de 8018
0007df 8018
0007e0 8070
0007e1 8018      	.DB  0x18,0x80,0x18,0x80,0x70,0x80,0x18,0x80
0007e2 8018
0007e3 8018
0007e4 8018
0007e5 800e      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0xE,0x80
0007e6 8000
0007e7 8000
0007e8 8000
0007e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007ea 8000
0007eb 8000
0007ec 8018
0007ed 8018      	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
0007ee 8018
0007ef 8018
0007f0 8018
0007f1 8000      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x0,0x80
0007f2 8018
0007f3 8018
0007f4 8018
0007f5 8018      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x18,0x80
0007f6 8018
0007f7 8000
0007f8 8000
0007f9 8000      	.DB  0x18,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0007fa 8000
0007fb 8000
0007fc 8070
0007fd 8018      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x18,0x80
0007fe 8018
0007ff 8018
000800 800e
000801 8018      	.DB  0x18,0x80,0x18,0x80,0xE,0x80,0x18,0x80
000802 8018
000803 8018
000804 8018
000805 8070      	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x70,0x80
000806 8000
000807 8000
000808 8000
000809 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00080a 8000
00080b 8000
00080c 803b
00080d 806e      	.DB  0x0,0x80,0x0,0x80,0x3B,0x80,0x6E,0x80
00080e 8000
00080f 8000
000810 8000
000811 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000812 8000
000813 8000
000814 8000
000815 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000816 8000
000817 8000
000818 8000
000819 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00081a 7000
00081b 7000
00081c 7000
00081d 7008      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x8,0x70
00081e 7000
00081f 7000
000820 700e
000821 7012      	.DB  0x0,0x70,0x0,0x70,0xE,0x70,0x12,0x70
000822 700c
000823 7012
000824 7021
000825 7020      	.DB  0xC,0x70,0x12,0x70,0x21,0x70,0x20,0x70
000826 7020
000827 7010
000828 700f
000829 7000      	.DB  0x20,0x70,0x10,0x70,0xF,0x70,0x0,0x70
00082a 5000
00082b 5000
00082c 5000
00082d 5004      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x4,0x50
00082e 5000
00082f 5000
000830 5006
000831 5009      	.DB  0x0,0x50,0x0,0x50,0x6,0x50,0x9,0x50
000832 5005
000833 5003
000834 501e
000835 5000      	.DB  0x5,0x50,0x3,0x50,0x1E,0x50,0x0,0x50
000836 5000
000837 5000
000838 5000
000839 5000      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
00083a 8000
00083b 8000
00083c 8000
00083d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00083e 8000
00083f 8000
000840 8000
000841 8040      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x40,0x80
000842 8081
000843 807e
000844 8028
000845 8010      	.DB  0x81,0x80,0x7E,0x80,0x28,0x80,0x10,0x80
000846 8000
000847 8000
000848 8000
000849 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00084a 7000
00084b 7000
00084c 7000
00084d 7000      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
00084e 7000
00084f 7000
000850 7000
000851 7006      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x6,0x70
000852 7009
000853 7019
000854 7066
000855 7000      	.DB  0x9,0x70,0x19,0x70,0x66,0x70,0x0,0x70
000856 7000
000857 7000
000858 7000
000859 7000      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
00085a 5000
00085b 5000
00085c 5000
00085d 500a      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0xA,0x50
00085e 5000
00085f 5000
000860 5006
000861 5009      	.DB  0x0,0x50,0x0,0x50,0x6,0x50,0x9,0x50
000862 5005
000863 5003
000864 501e
000865 5000      	.DB  0x5,0x50,0x3,0x50,0x1E,0x50,0x0,0x50
000866 5000
000867 5000
000868 5000
000869 5000      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
00086a 6000
00086b 6000
00086c 6000
00086d 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00086e 6002
00086f 6000
000870 6000
000871 6007      	.DB  0x2,0x60,0x0,0x60,0x0,0x60,0x7,0x60
000872 6009
000873 6006
000874 603f
000875 6000      	.DB  0x9,0x60,0x6,0x60,0x3F,0x60,0x0,0x60
000876 6000
000877 6000
000878 6000
000879 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00087a 6000
00087b 6000
00087c 6000
00087d 6008      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x8,0x60
00087e 6000
00087f 6000
000880 600c
000881 6012      	.DB  0x0,0x60,0x0,0x60,0xC,0x60,0x12,0x60
000882 6010
000883 6009
000884 603e
000885 6000      	.DB  0x10,0x60,0x9,0x60,0x3E,0x60,0x0,0x60
000886 6000
000887 6000
000888 6000
000889 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
00088a 4000
00088b 4000
00088c 4000
00088d 4001      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x1,0x40
00088e 4001
00088f 4001
000890 4001
000891 4001      	.DB  0x1,0x40,0x1,0x40,0x1,0x40,0x1,0x40
000892 4001
000893 4001
000894 400e
000895 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000896 4000
000897 4000
000898 4000
000899 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00089a 4000
00089b 4000
00089c 4000
00089d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00089e 4002
00089f 4000
0008a0 4000
0008a1 4002      	.DB  0x2,0x40,0x0,0x40,0x0,0x40,0x2,0x40
0008a2 4001
0008a3 4001
0008a4 400e
0008a5 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
0008a6 4000
0008a7 4000
0008a8 4000
0008a9 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0008aa 6000
0008ab 6000
0008ac 6000
0008ad 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
0008ae 6000
0008af 6000
0008b0 6000
0008b1 6007      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x7,0x60
0008b2 6009
0008b3 6006
0008b4 603f
0008b5 6000      	.DB  0x9,0x60,0x6,0x60,0x3F,0x60,0x0,0x60
0008b6 6000
0008b7 6000
0008b8 6000
0008b9 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
0008ba 7000
0008bb 7000
0008bc 7000
0008bd 7000      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
0008be 7000
0008bf 7000
0008c0 700e
0008c1 7012      	.DB  0x0,0x70,0x0,0x70,0xE,0x70,0x12,0x70
0008c2 700c
0008c3 7012
0008c4 7021
0008c5 7020      	.DB  0xC,0x70,0x12,0x70,0x21,0x70,0x20,0x70
0008c6 7020
0008c7 7010
0008c8 700f
0008c9 7000      	.DB  0x20,0x70,0x10,0x70,0xF,0x70,0x0,0x70
0008ca 9000
0008cb 9000
0008cc 9000
0008cd 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
0008ce 9000
0008cf 9000
0008d0 9000
0008d1 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
0008d2 9049
0008d3 9049
0008d4 91b6
0008d5 9000      	.DB  0x49,0x90,0x49,0x90,0xB6,0x91,0x0,0x90
0008d6 9000
0008d7 9000
0008d8 9000
0008d9 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
0008da 8000
0008db 8000
0008dc 8000
0008dd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0008de 8000
0008df 8008
0008e0 8008
0008e1 8034      	.DB  0x0,0x80,0x8,0x80,0x8,0x80,0x34,0x80
0008e2 8044
0008e3 803a
0008e4 8001
0008e5 8000      	.DB  0x44,0x80,0x3A,0x80,0x1,0x80,0x0,0x80
0008e6 8000
0008e7 8000
0008e8 8000
0008e9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0008ea 5000
0008eb 5000
0008ec 5000
0008ed 5001      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x1,0x50
0008ee 5006
0008ef 5008
0008f0 500c
0008f1 5002      	.DB  0x6,0x50,0x8,0x50,0xC,0x50,0x2,0x50
0008f2 5001
0008f3 5001
0008f4 501e
0008f5 5000      	.DB  0x1,0x50,0x1,0x50,0x1E,0x50,0x0,0x50
0008f6 5000
0008f7 5000
0008f8 5000
0008f9 5000      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
0008fa 8000
0008fb 8000
0008fc 8000
0008fd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0008fe 8000
0008ff 8000
000900 8070
000901 808f      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
000902 8030
000903 8040
000904 8094
000905 8080      	.DB  0x30,0x80,0x40,0x80,0x94,0x80,0x80,0x80
000906 8088
000907 8041
000908 803e
000909 8000      	.DB  0x88,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
00090a 6000
00090b 6000
00090c 6000
00090d 6002      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x2,0x60
00090e 6000
00090f 6005
000910 6000
000911 6000      	.DB  0x0,0x60,0x5,0x60,0x0,0x60,0x0,0x60
000912 6001
000913 6001
000914 6001
000915 6002      	.DB  0x1,0x60,0x1,0x60,0x1,0x60,0x2,0x60
000916 600c
000917 6030
000918 6000
000919 6000      	.DB  0xC,0x60,0x30,0x60,0x0,0x60,0x0,0x60
00091a 4000
00091b 4000
00091c 4000
00091d 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00091e 4000
00091f 4000
000920 4000
000921 4002      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x2,0x40
000922 4001
000923 4001
000924 400e
000925 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000926 4000
000927 4005
000928 4000
000929 4000      	.DB  0x0,0x40,0x5,0x40,0x0,0x40,0x0,0x40
00092a 9001
00092b 9006
00092c 9008
00092d 9001      	.DB  0x1,0x90,0x6,0x90,0x8,0x90,0x1,0x90
00092e 9006
00092f 9008
000930 900c
000931 9042      	.DB  0x6,0x90,0x8,0x90,0xC,0x90,0x42,0x90
000932 9081
000933 9081
000934 907e
000935 9000      	.DB  0x81,0x90,0x81,0x90,0x7E,0x90,0x0,0x90
000936 9000
000937 9000
000938 9000
000939 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
00093a 8000
00093b 8000
00093c 8000
00093d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00093e 8000
00093f 8000
000940 8004
000941 800a      	.DB  0x0,0x80,0x0,0x80,0x4,0x80,0xA,0x80
000942 8012
000943 8014
000944 80f9
000945 8012      	.DB  0x12,0x80,0x14,0x80,0xF9,0x80,0x12,0x80
000946 800c
000947 8006
000948 8000
000949 8000      	.DB  0xC,0x80,0x6,0x80,0x0,0x80,0x0,0x80
00094a 8000
00094b 8000
00094c 8000
00094d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00094e 8000
00094f 8000
000950 8000
000951 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000952 8000
000953 8000
000954 8047
000955 8088      	.DB  0x0,0x80,0x0,0x80,0x47,0x80,0x88,0x80
000956 8087
000957 8081
000958 807e
000959 8000      	.DB  0x87,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
00095a 8000
00095b 8000
00095c 8000
00095d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00095e 8000
00095f 8000
000960 8000
000961 8018      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x18,0x80
000962 8024
000963 8002
000964 80ff
000965 8000      	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
000966 8028
000967 8000
000968 8010
000969 8000      	.DB  0x28,0x80,0x0,0x80,0x10,0x80,0x0,0x80
00096a 9000
00096b 9000
00096c 9000
00096d 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
00096e 9000
00096f 9000
000970 9070
000971 908f      	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
000972 9034
000973 9042
000974 9095
000975 9080      	.DB  0x34,0x90,0x42,0x90,0x95,0x90,0x80,0x90
000976 9088
000977 9041
000978 903e
000979 9000      	.DB  0x88,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
00097a 8000
00097b 8000
00097c 8000
00097d 8042      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x42,0x80
00097e 8022
00097f 8012
000980 800a
000981 8006      	.DB  0x22,0x80,0x12,0x80,0xA,0x80,0x6,0x80
000982 8006
000983 800a
000984 8031
000985 8000      	.DB  0x6,0x80,0xA,0x80,0x31,0x80,0x0,0x80
000986 8000
000987 8000
000988 8000
000989 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
00098a 4000
00098b 4003
00098c 4004
00098d 4003      	.DB  0x0,0x40,0x3,0x40,0x4,0x40,0x3,0x40
00098e 4004
00098f 4000
000990 4000
000991 4002      	.DB  0x4,0x40,0x0,0x40,0x0,0x40,0x2,0x40
000992 4001
000993 4001
000994 400e
000995 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000996 4000
000997 4000
000998 4000
000999 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
00099a 7000
00099b 7000
00099c 7000
00099d 7021      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x21,0x70
00099e 7011
00099f 7009
0009a0 7005
0009a1 7003      	.DB  0x11,0x70,0x9,0x70,0x5,0x70,0x3,0x70
0009a2 7002
0009a3 7005
0009a4 7009
0009a5 700f      	.DB  0x2,0x70,0x5,0x70,0x9,0x70,0xF,0x70
0009a6 7000
0009a7 7000
0009a8 7000
0009a9 7000      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
0009aa 4000
0009ab 4000
0009ac 4000
0009ad 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0009ae 4000
0009af 4000
0009b0 4000
0009b1 4006      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x6,0x40
0009b2 4008
0009b3 4007
0009b4 400c
0009b5 4000      	.DB  0x8,0x40,0x7,0x40,0xC,0x40,0x0,0x40
0009b6 4000
0009b7 4000
0009b8 4000
0009b9 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
0009ba 6001
0009bb 600e
0009bc 6010
0009bd 6004      	.DB  0x1,0x60,0xE,0x60,0x10,0x60,0x4,0x60
0009be 6004
0009bf 6004
0009c0 6004
0009c1 6004      	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x4,0x60
0009c2 6004
0009c3 6004
0009c4 6004
0009c5 6000      	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x0,0x60
0009c6 6000
0009c7 6000
0009c8 6000
0009c9 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
0009ca 3000
0009cb 1000
0009cc 1000
0009cd 1001      	.DB  0x0,0x30,0x0,0x10,0x0,0x10,0x1,0x10
0009ce 1001
0009cf 1001
0009d0 1001
0009d1 1001      	.DB  0x1,0x10,0x1,0x10,0x1,0x10,0x1,0x10
0009d2 1001
0009d3 1001
0009d4 1001
0009d5 1000      	.DB  0x1,0x10,0x1,0x10,0x1,0x10,0x0,0x10
0009d6 1000
0009d7 1000
0009d8 1000
0009d9 1000      	.DB  0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10
0009da 8000
0009db 8000
0009dc 8000
0009dd 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0009de 8000
0009df 8000
0009e0 8000
0009e1 8040      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x40,0x80
0009e2 8081
0009e3 8081
0009e4 807e
0009e5 8000      	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
0009e6 8000
0009e7 8010
0009e8 8000
0009e9 8000      	.DB  0x0,0x80,0x10,0x80,0x0,0x80,0x0,0x80
0009ea 8000
0009eb 8000
0009ec 8000
0009ed 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0009ee 8000
0009ef 8014
0009f0 8000
0009f1 8040      	.DB  0x0,0x80,0x14,0x80,0x0,0x80,0x40,0x80
0009f2 8081
0009f3 8081
0009f4 807e
0009f5 8000      	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
0009f6 8000
0009f7 8000
0009f8 8000
0009f9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
0009fa 8000
0009fb 8000
0009fc 8000
0009fd 8008      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x8,0x80
0009fe 8000
0009ff 8014
000a00 8000
000a01 8040      	.DB  0x0,0x80,0x14,0x80,0x0,0x80,0x40,0x80
000a02 8081
000a03 8081
000a04 807e
000a05 8000      	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
000a06 8000
000a07 8000
000a08 8000
000a09 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000a0a 8000
000a0b 8000
000a0c 8000
000a0d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000a0e 8000
000a0f 8000
000a10 8070
000a11 808f      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
000a12 8030
000a13 8040
000a14 8080
000a15 8088      	.DB  0x30,0x80,0x40,0x80,0x80,0x80,0x88,0x80
000a16 8080
000a17 8041
000a18 803e
000a19 8000      	.DB  0x80,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
000a1a 8000
000a1b 8000
000a1c 8000
000a1d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000a1e 8000
000a1f 8000
000a20 8070
000a21 808f      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
000a22 8030
000a23 8040
000a24 8080
000a25 8080      	.DB  0x30,0x80,0x40,0x80,0x80,0x80,0x80,0x80
000a26 8080
000a27 8041
000a28 803e
000a29 8000      	.DB  0x80,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
000a2a 8000
000a2b 8000
000a2c 8000
000a2d 8020      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x20,0x80
000a2e 8000
000a2f 8000
000a30 8070
000a31 808f      	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
000a32 8030
000a33 8040
000a34 8080
000a35 8080      	.DB  0x30,0x80,0x40,0x80,0x80,0x80,0x80,0x80
000a36 8080
000a37 8041
000a38 803e
000a39 8000      	.DB  0x80,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
000a3a 5000
000a3b 4000
000a3c 4000
000a3d 4000      	.DB  0x0,0x50,0x0,0x40,0x0,0x40,0x0,0x40
000a3e 4000
000a3f 4000
000a40 4004
000a41 4002      	.DB  0x0,0x40,0x0,0x40,0x4,0x40,0x2,0x40
000a42 4001
000a43 4001
000a44 400e
000a45 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000a46 4000
000a47 4000
000a48 4000
000a49 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
000a4a 5000
000a4b 4000
000a4c 4000
000a4d 4004      	.DB  0x0,0x50,0x0,0x40,0x0,0x40,0x4,0x40
000a4e 4000
000a4f 4000
000a50 4004
000a51 4002      	.DB  0x0,0x40,0x0,0x40,0x4,0x40,0x2,0x40
000a52 4001
000a53 4001
000a54 400e
000a55 4000      	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
000a56 4000
000a57 4000
000a58 4000
000a59 4000      	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
000a5a 7000
000a5b 6000
000a5c 6000
000a5d 6000      	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
000a5e 6000
000a5f 6000
000a60 6000
000a61 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
000a62 6001
000a63 6001
000a64 6001
000a65 6002      	.DB  0x1,0x60,0x1,0x60,0x1,0x60,0x2,0x60
000a66 600c
000a67 6030
000a68 6000
000a69 6000      	.DB  0xC,0x60,0x30,0x60,0x0,0x60,0x0,0x60
000a6a 7000
000a6b 6000
000a6c 6000
000a6d 6000      	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
000a6e 6000
000a6f 6002
000a70 6000
000a71 6000      	.DB  0x0,0x60,0x2,0x60,0x0,0x60,0x0,0x60
000a72 6001
000a73 6001
000a74 6001
000a75 6002      	.DB  0x1,0x60,0x1,0x60,0x1,0x60,0x2,0x60
000a76 600c
000a77 6030
000a78 6000
000a79 6000      	.DB  0xC,0x60,0x30,0x60,0x0,0x60,0x0,0x60
000a7a c000
000a7b c000
000a7c c000
000a7d c000      	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
000a7e c000
000a7f c000
000a80 c000
000a81 c000      	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
000a82 c049
000a83 c449
000a84 c836
000a85 c820      	.DB  0x49,0xC0,0x49,0xC4,0x36,0xC8,0x20,0xC8
000a86 c820
000a87 c440
000a88 c380
000a89 c000      	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
000a8a c000
000a8b c000
000a8c c000
000a8d c008      	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x8,0xC0
000a8e c000
000a8f c014
000a90 c000
000a91 c000      	.DB  0x0,0xC0,0x14,0xC0,0x0,0xC0,0x0,0xC0
000a92 c049
000a93 c449
000a94 c836
000a95 c820      	.DB  0x49,0xC0,0x49,0xC4,0x36,0xC8,0x20,0xC8
000a96 c820
000a97 c440
000a98 c380
000a99 c000      	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
000a9a c000
000a9b c000
000a9c c000
000a9d c000      	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
000a9e c000
000a9f c000
000aa0 c000
000aa1 c006      	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x6,0xC0
000aa2 c049
000aa3 c451
000aa4 c83e
000aa5 c820      	.DB  0x49,0xC0,0x51,0xC4,0x3E,0xC8,0x20,0xC8
000aa6 c820
000aa7 c440
000aa8 c380
000aa9 c000      	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
000aaa c000
000aab c000
000aac c000
000aad c000      	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
000aae c010
000aaf c000
000ab0 c000
000ab1 c006      	.DB  0x10,0xC0,0x0,0xC0,0x0,0xC0,0x6,0xC0
000ab2 c049
000ab3 c451
000ab4 c83e
000ab5 c820      	.DB  0x49,0xC0,0x51,0xC4,0x3E,0xC8,0x20,0xC8
000ab6 c820
000ab7 c440
000ab8 c380
000ab9 c000      	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
000aba 8000
000abb 8000
000abc 8000
000abd 8020      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x20,0x80
000abe 8020
000abf 8020
000ac0 8020
000ac1 8026      	.DB  0x20,0x80,0x20,0x80,0x20,0x80,0x26,0x80
000ac2 8029
000ac3 8031
000ac4 80fe
000ac5 8000      	.DB  0x29,0x80,0x31,0x80,0xFE,0x80,0x0,0x80
000ac6 8000
000ac7 8000
000ac8 8000
000ac9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000aca 8000
000acb 8000
000acc 8000
000acd 8020      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x20,0x80
000ace 8024
000acf 8020
000ad0 8020
000ad1 8026      	.DB  0x24,0x80,0x20,0x80,0x20,0x80,0x26,0x80
000ad2 8029
000ad3 8031
000ad4 80fe
000ad5 8000      	.DB  0x29,0x80,0x31,0x80,0xFE,0x80,0x0,0x80
000ad6 8000
000ad7 8000
000ad8 8000
000ad9 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000ada 7000
000adb 7000
000adc 7000
000add 7000      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
000ade 7000
000adf 7030
000ae0 7040
000ae1 7044      	.DB  0x0,0x70,0x30,0x70,0x40,0x70,0x44,0x70
000ae2 7038
000ae3 7020
000ae4 7040
000ae5 7040      	.DB  0x38,0x70,0x20,0x70,0x40,0x70,0x40,0x70
000ae6 7040
000ae7 7021
000ae8 701e
000ae9 7000      	.DB  0x40,0x70,0x21,0x70,0x1E,0x70,0x0,0x70
000aea 7000
000aeb 7000
000aec 7020
000aed 7000      	.DB  0x0,0x70,0x0,0x70,0x20,0x70,0x0,0x70
000aee 7000
000aef 7030
000af0 7040
000af1 7044      	.DB  0x0,0x70,0x30,0x70,0x40,0x70,0x44,0x70
000af2 7038
000af3 7020
000af4 7040
000af5 7040      	.DB  0x38,0x70,0x20,0x70,0x40,0x70,0x40,0x70
000af6 7040
000af7 7021
000af8 701e
000af9 7000      	.DB  0x40,0x70,0x21,0x70,0x1E,0x70,0x0,0x70
000afa 3000
000afb 3000
000afc 3000
000afd 3000      	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
000afe 3000
000aff 3000
000b00 3000
000b01 3000      	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
000b02 3000
000b03 3000
000b04 3007
000b05 3000      	.DB  0x0,0x30,0x0,0x30,0x7,0x30,0x0,0x30
000b06 3000
000b07 3000
000b08 3000
000b09 3000      	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
000b0a a000
000b0b a000
000b0c a000
000b0d a004      	.DB  0x0,0xA0,0x0,0xA0,0x0,0xA0,0x4,0xA0
000b0e a000
000b0f a000
000b10 a006
000b11 a109      	.DB  0x0,0xA0,0x0,0xA0,0x6,0xA0,0x9,0xA1
000b12 a205
000b13 a203
000b14 a1fe
000b15 a000      	.DB  0x5,0xA2,0x3,0xA2,0xFE,0xA1,0x0,0xA0
000b16 a000
000b17 a000
000b18 a000
000b19 a000      	.DB  0x0,0xA0,0x0,0xA0,0x0,0xA0,0x0,0xA0
000b1a 8000
000b1b 8000
000b1c 8000
000b1d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000b1e 800a
000b1f 8000
000b20 8000
000b21 8006      	.DB  0xA,0x80,0x0,0x80,0x0,0x80,0x6,0x80
000b22 8009
000b23 8049
000b24 8087
000b25 8081      	.DB  0x9,0x80,0x49,0x80,0x87,0x80,0x81,0x80
000b26 8081
000b27 8042
000b28 803c
000b29 8000      	.DB  0x81,0x80,0x42,0x80,0x3C,0x80,0x0,0x80
000b2a 8000
000b2b 8000
000b2c 8000
000b2d 8001      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x1,0x80
000b2e 8006
000b2f 8008
000b30 800c
000b31 8042      	.DB  0x6,0x80,0x8,0x80,0xC,0x80,0x42,0x80
000b32 8081
000b33 8081
000b34 807e
000b35 8000      	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
000b36 8000
000b37 8000
000b38 8000
000b39 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000b3a 7000
000b3b 7000
000b3c 7000
000b3d 7001      	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x1,0x70
000b3e 7001
000b3f 7001
000b40 7001
000b41 7001      	.DB  0x1,0x70,0x1,0x70,0x1,0x70,0x1,0x70
000b42 7021
000b43 7041
000b44 7041
000b45 7042      	.DB  0x21,0x70,0x41,0x70,0x41,0x70,0x42,0x70
000b46 703c
000b47 7000
000b48 7000
000b49 7000      	.DB  0x3C,0x70,0x0,0x70,0x0,0x70,0x0,0x70
000b4a 6000
000b4b 6000
000b4c 6000
000b4d 6000      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
000b4e 6000
000b4f 6000
000b50 6000
000b51 6006      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x6,0x60
000b52 6009
000b53 6009
000b54 601e
000b55 6020      	.DB  0x9,0x60,0x9,0x60,0x1E,0x60,0x20,0x60
000b56 6020
000b57 6020
000b58 6020
000b59 6020      	.DB  0x20,0x60,0x20,0x60,0x20,0x60,0x20,0x60
000b5a 8000
000b5b 8000
000b5c 8000
000b5d 8000      	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
000b5e 8000
000b5f 8000
000b60 8010
000b61 8000      	.DB  0x0,0x80,0x0,0x80,0x10,0x80,0x0,0x80
000b62 8002
000b63 8041
000b64 8081
000b65 8081      	.DB  0x2,0x80,0x41,0x80,0x81,0x80,0x81,0x80
000b66 8081
000b67 8042
000b68 803c
000b69 8000      	.DB  0x81,0x80,0x42,0x80,0x3C,0x80,0x0,0x80
000b6a 5000
000b6b 5000
000b6c 5000
000b6d 5000      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
000b6e 5000
000b6f 5000
000b70 500c
000b71 5012      	.DB  0x0,0x50,0x0,0x50,0xC,0x50,0x12,0x50
000b72 5011
000b73 5011
000b74 500e
000b75 5000      	.DB  0x11,0x50,0x11,0x50,0xE,0x50,0x0,0x50
000b76 5000
000b77 5000
000b78 5000
000b79 5000      	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
000b7a 7000
000b7b 6000
000b7c 6000
000b7d 6000      	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
000b7e 6000
000b7f 6000
000b80 6000
000b81 6006      	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x6,0x60
000b82 6009
000b83 6009
000b84 6007
000b85 6001      	.DB  0x9,0x60,0x9,0x60,0x7,0x60,0x1,0x60
000b86 6002
000b87 600c
000b88 6030
000b89 6000      	.DB  0x2,0x60,0xC,0x60,0x30,0x60,0x0,0x60
000b8a 9000
000b8b 9000
000b8c 9000
000b8d 9000      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
000b8e 9000
000b8f 9000
000b90 9000
000b91 9003      	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x3,0x90
000b92 9084
000b93 9108
000b94 910e
000b95 9102      	.DB  0x84,0x90,0x8,0x91,0xE,0x91,0x2,0x91
000b96 9104
000b97 90f8
000b98 9000
000b99 9000      	.DB  0x4,0x91,0xF8,0x90,0x0,0x90,0x0,0x90
                 _FAmap:
000b9a 8cb0
000b9b 8cb0
000b9c 0101
000b9d 0381      	.DB  0xB0,0x8C,0xB0,0x8C,0x1,0x1,0x81,0x3
000b9e 0381
000b9f 0101
000ba0 938d
000ba1 9394      	.DB  0x81,0x3,0x1,0x1,0x8D,0x93,0x94,0x93
000ba2 0101
000ba3 8e8e
000ba4 8e8e
000ba5 0001      	.DB  0x1,0x1,0x8E,0x8E,0x8E,0x8E,0x1,0x0
000ba6 0190
000ba7 0190
000ba8 0101
000ba9 9698      	.DB  0x90,0x1,0x90,0x1,0x1,0x1,0x98,0x96
000baa 9698
000bab 0100
000bac 9999
000bad 0202      	.DB  0x98,0x96,0x0,0x1,0x99,0x99,0x2,0x2
000bae 0001
000baf c3c3
000bb0 0101
000bb1 0001      	.DB  0x1,0x0,0xC3,0xC3,0x1,0x1,0x1,0x0
000bb2 c4c4
000bb3 c4c4
000bb4 0000
000bb5 c5c5      	.DB  0xC4,0xC4,0xC4,0xC4,0x0,0x0,0xC5,0xC5
000bb6 0303
000bb7 0001
000bb8 c6c6
000bb9 c6c6      	.DB  0x3,0x3,0x1,0x0,0xC6,0xC6,0xC6,0xC6
000bba 0000
000bbb 9a9a
000bbc 0000
000bbd 0001      	.DB  0x0,0x0,0x9A,0x9A,0x0,0x0,0x1,0x0
000bbe 049b
000bbf 049b
000bc0 0101
000bc1 fec9      	.DB  0x9B,0x4,0x9B,0x4,0x1,0x1,0xC9,0xFE
000bc2 95e9
000bc3 0101
000bc4 059c
000bc5 059c      	.DB  0xE9,0x95,0x1,0x1,0x9C,0x5,0x9C,0x5
000bc6 0101
000bc7 069d
000bc8 069d
000bc9 0101      	.DB  0x1,0x1,0x9D,0x6,0x9D,0x6,0x1,0x1
000bca 079e
000bcb 0708
000bcc 0101
000bcd 099f      	.DB  0x9E,0x7,0x8,0x7,0x1,0x1,0x9F,0x9
000bce 090a
000bcf 0101
000bd0 0ba0
000bd1 0b0c      	.DB  0xA,0x9,0x1,0x1,0xA0,0xB,0xC,0xB
000bd2 0101
000bd3 a1a1
000bd4 a1a1
000bd5 0001      	.DB  0x1,0x1,0xA1,0xA1,0xA1,0xA1,0x1,0x0
000bd6 a2a2
000bd7 a2a2
000bd8 0001
000bd9 a3a3      	.DB  0xA2,0xA2,0xA2,0xA2,0x1,0x0,0xA3,0xA3
000bda a3a3
000bdb 0001
000bdc a4a4
000bdd a4a4      	.DB  0xA3,0xA3,0x1,0x0,0xA4,0xA4,0xA4,0xA4
000bde 0001
000bdf 8aa5
000be0 8aa5
000be1 0101      	.DB  0x1,0x0,0xA5,0x8A,0xA5,0x8A,0x1,0x1
000be2 0ea6
000be3 0ea6
000be4 0101
000be5 0fa7      	.DB  0xA6,0xE,0xA6,0xE,0x1,0x1,0xA7,0xF
000be6 0fa7
000be7 0101
000be8 1aa8
000be9 1aa8      	.DB  0xA7,0xF,0x1,0x1,0xA8,0x1A,0xA8,0x1A
000bea 0101
000beb d7d7
000bec d7d7
000bed 0000      	.DB  0x1,0x1,0xD7,0xD7,0xD7,0xD7,0x0,0x0
000bee a9a9
000bef a9a9
000bf0 0101
000bf1 aaaa      	.DB  0xA9,0xA9,0xA9,0xA9,0x1,0x1,0xAA,0xAA
000bf2 aaaa
000bf3 0101
000bf4 1bab
000bf5 8889      	.DB  0xAA,0xAA,0x1,0x1,0xAB,0x1B,0x89,0x88
000bf6 0101
000bf7 85ac
000bf8 847f
000bf9 0101      	.DB  0x1,0x1,0xAC,0x85,0x7F,0x84,0x1,0x1
000bfa adad
000bfb adad
000bfc 0101
000bfd 80ae      	.DB  0xAD,0xAD,0xAD,0xAD,0x1,0x1,0xAE,0x80
000bfe 80ae
000bff 0101
000c00 83af
000c01 83af      	.DB  0xAE,0x80,0x1,0x1,0xAF,0x83,0xAF,0x83
000c02 0101
000c03 8cb0
000c04 8cb0
000c05 0101      	.DB  0x1,0x1,0xB0,0x8C,0xB0,0x8C,0x1,0x1
000c06 e0e0
000c07 e0e0
000c08 0000
000c09 86b1      	.DB  0xE0,0xE0,0xE0,0xE0,0x0,0x0,0xB1,0x86
000c0a 86b1
000c0b 0101
000c0c e2e2
000c0d e2e2      	.DB  0xB1,0x86,0x1,0x1,0xE2,0xE2,0xE2,0xE2
000c0e 0000
000c0f 82b2
000c10 82b2
000c11 0101      	.DB  0x0,0x0,0xB2,0x82,0xB2,0x82,0x1,0x1
000c12 87b3
000c13 87b3
000c14 0101
000c15 0db4      	.DB  0xB3,0x87,0xB3,0x87,0x1,0x1,0xB4,0xD
000c16 918b
000c17 0101
000c18 b5b5
000c19 b5b5      	.DB  0x8B,0x91,0x1,0x1,0xB5,0xB5,0xB5,0xB5
000c1a 0001
000c1b e7e7
000c1c e7e7
000c1d 0000      	.DB  0x1,0x0,0xE7,0xE7,0xE7,0xE7,0x0,0x0
000c1e e8e8
000c1f e8e8
000c20 0000
000c21 e9e9      	.DB  0xE8,0xE8,0xE8,0xE8,0x0,0x0,0xE9,0xE9
000c22 e9e9
000c23 0000
000c24 fefe
000c25 fefe      	.DB  0xE9,0xE9,0x0,0x0,0xFE,0xFE,0xFE,0xFE
000c26 0000
000c27 ffff
000c28 ffff
000c29 0000      	.DB  0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0
000c2a c0ec
000c2b c0a0
000c2c 0101
000c2d 8fb6      	.DB  0xEC,0xC0,0xA0,0xC0,0x1,0x1,0xB6,0x8F
000c2e 8f92
000c2f 0101      	.DB  0x92,0x8F,0x1,0x1
                 _tbl10_G100:
000c30 2710
000c31 03e8
000c32 0064
000c33 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000c34 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000c35 1000
000c36 0100
000c37 0010
000c38 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000c39 0000      	.DB  0x0,0x0
                 
                 _0x7B:
000c3a 0000
000c3b 0000
000c3c 0000
000c3d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000c3e 0000
000c3f 0000
000c40 0000
000c41 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000c42 0000
000c43 0000
000c44 0000
000c45 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000c46 0000
000c47 0000
000c48 0000
000c49 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000c4a 0000
000c4b 0000
000c4c 0000
000c4d 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000c4e 0000
000c4f 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x147:
000c50 0000
000c51 0000
000c52 0000
000c53 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000c54 0000
000c55 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x28E:
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1920): warning: .cseg .db misalignment - padding zero byte
000c56 00ff      	.DB  0xFF
                 _0x0:
000c57 6544
000c58 6973
000c59 6e67
000c5a 6465      	.DB  0x44,0x65,0x73,0x69,0x67,0x6E,0x65,0x64
000c5b 6220
000c5c 3a79
000c5d 2000
000c5e 2020      	.DB  0x20,0x62,0x79,0x3A,0x0,0x20,0x20,0x20
000c5f 4d20
000c60 686f
000c61 6d61
000c62 616d      	.DB  0x20,0x4D,0x6F,0x68,0x61,0x6D,0x6D,0x61
000c63 2064
000c64 6544
000c65 6768
000c66 6168      	.DB  0x64,0x20,0x44,0x65,0x68,0x67,0x68,0x61
000c67 696e
000c68 2020
000c69 0020
000c6a 6552      	.DB  0x6E,0x69,0x20,0x20,0x20,0x0,0x52,0x65
000c6b 6461
000c6c 5320
000c6d 2044
000c6e 6163      	.DB  0x61,0x64,0x20,0x53,0x44,0x20,0x63,0x61
000c6f 6472
000c70 4900
000c71 696e
000c72 2074      	.DB  0x72,0x64,0x0,0x49,0x6E,0x69,0x74,0x20
000c73 7244
000c74 7669
000c75 0065
000c76 2020      	.DB  0x44,0x72,0x69,0x76,0x65,0x0,0x20,0x20
000c77 2d20
000c78 2d2d
000c79 4f3e
000c7a 004b      	.DB  0x20,0x2D,0x2D,0x2D,0x3E,0x4F,0x4B,0x0
000c7b 504f
000c7c 4e45
000c7d 4420
000c7e 4952      	.DB  0x4F,0x50,0x45,0x4E,0x20,0x44,0x52,0x49
000c7f 4556
000c80 3100
000c81 622e
000c82 706d      	.DB  0x56,0x45,0x0,0x31,0x2E,0x62,0x6D,0x70
000c83 3200
000c84 622e
000c85 706d
000c86 3100      	.DB  0x0,0x32,0x2E,0x62,0x6D,0x70,0x0,0x31
000c87 2e39
000c88 6d62
000c89 0070
000c8a 3032      	.DB  0x39,0x2E,0x62,0x6D,0x70,0x0,0x32,0x30
000c8b 622e
000c8c 706d
000c8d 3200
000c8e 2e31      	.DB  0x2E,0x62,0x6D,0x70,0x0,0x32,0x31,0x2E
000c8f 6d62
000c90 0070
000c91 3232
000c92 622e      	.DB  0x62,0x6D,0x70,0x0,0x32,0x32,0x2E,0x62
000c93 706d
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1937): warning: .cseg .db misalignment - padding zero byte
000c94 0000      	.DB  0x6D,0x70,0x0
                 _0x2080060:
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1939): warning: .cseg .db misalignment - padding zero byte
000c95 0001      	.DB  0x1
                 _0x2080000:
000c96 4e2d
000c97 4e41
000c98 4900
000c99 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\PROJECT\Put up GLCD Project for sales\LCD_MMC\C project\ili9325_MMC\List\project.asm(1942): warning: .cseg .db misalignment - padding zero byte
000c9a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000c9b 0002      	.DW  0x02
000c9c 000c      	.DW  0x0C
000c9d 1872      	.DW  __REG_VARS*2
                 
000c9e 0001      	.DW  0x01
000c9f 07a4      	.DW  _count
000ca0 18ac      	.DW  _0x28E*2
                 
000ca1 0006      	.DW  0x06
000ca2 0460      	.DW  _0x2A8
000ca3 1901      	.DW  _0x0*2+83
                 
000ca4 0006      	.DW  0x06
000ca5 0466      	.DW  _0x2A8+6
000ca6 1907      	.DW  _0x0*2+89
                 
000ca7 0007      	.DW  0x07
000ca8 046c      	.DW  _0x2A8+12
000ca9 190d      	.DW  _0x0*2+95
                 
000caa 0007      	.DW  0x07
000cab 0473      	.DW  _0x2A8+19
000cac 1914      	.DW  _0x0*2+102
                 
000cad 0007      	.DW  0x07
000cae 047a      	.DW  _0x2A8+26
000caf 191b      	.DW  _0x0*2+109
                 
000cb0 0007      	.DW  0x07
000cb1 0481      	.DW  _0x2A8+33
000cb2 1922      	.DW  _0x0*2+116
                 
000cb3 0001      	.DW  0x01
000cb4 07a5      	.DW  __seed_G104
000cb5 192a      	.DW  _0x2080060*2
                 
                 _0xFFFFFFFF:
000cb6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000cb7 94f8      	CLI
000cb8 27ee      	CLR  R30
000cb9 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000cba e0f1      	LDI  R31,1
000cbb bff5      	OUT  MCUCR,R31
000cbc bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000cbd e1f8      	LDI  R31,0x18
000cbe bdf1      	OUT  WDTCR,R31
000cbf bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000cc0 e08d      	LDI  R24,(14-2)+1
000cc1 e0a2      	LDI  R26,2
000cc2 27bb      	CLR  R27
                 __CLEAR_REG:
000cc3 93ed      	ST   X+,R30
000cc4 958a      	DEC  R24
000cc5 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000cc6 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000cc7 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000cc8 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000cc9 93ed      	ST   X+,R30
000cca 9701      	SBIW R24,1
000ccb f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000ccc e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000ccd e1f9      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000cce 9185      	LPM  R24,Z+
000ccf 9195      	LPM  R25,Z+
000cd0 9700      	SBIW R24,0
000cd1 f061      	BREQ __GLOBAL_INI_END
000cd2 91a5      	LPM  R26,Z+
000cd3 91b5      	LPM  R27,Z+
000cd4 9005      	LPM  R0,Z+
000cd5 9015      	LPM  R1,Z+
000cd6 01bf      	MOVW R22,R30
000cd7 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000cd8 9005      	LPM  R0,Z+
000cd9 920d      	ST   X+,R0
000cda 9701      	SBIW R24,1
000cdb f7e1      	BRNE __GLOBAL_INI_LOOP
000cdc 01fb      	MOVW R30,R22
000cdd cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000cde e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000cdf bfed      	OUT  SPL,R30
000ce0 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000ce1 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000ce2 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000ce3 e0d4      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000ce4 940c 19af 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x460
                 
                 	.CSEG
                 ;/*
                 ;-------------------------------Colorful Graphic Display beside MMC-----------------------------------
                 ;
                 ;by : MOHAMMAD DEHGHANI         (m.dehghani94@live.com)
                 ;
                 ;LCD features : ili9325 (320*240)
                 ;                 and MMC/SD
                 ;Processor features:    ATmega 32
                 ;                        16 MHz clock
                 ;description:
                 ;    In this source we are going to run a SD card and a Graphic Display to show Pictures in bmp 24bits.
                 ;*/
                 ;#include <mega32a.h>   //header of ATmega32A
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>     //Header for making delays
                 ;#include <stdio.h>
                 ;#include <pff.c>       //Headers used to read or write on MMC/SD cards
                 ;/*----------------------------------------------------------------------------/
                 ;/  Petit FatFs - FAT file system module  R0.02                 (C)ChaN, 2009
                 ;/-----------------------------------------------------------------------------/
                 ;/ Petit FatFs module is an open source software to implement FAT file system to
                 ;/ small embedded systems. This is a free software and is opened for education,
                 ;/ research and commercial developments under license policy of following trems.
                 ;/
                 ;/  Copyright (C) 2009, ChaN, all right reserved.
                 ;/
                 ;/ * The Petit FatFs module is a free software and there is NO WARRANTY.
                 ;/ * No restriction on use. You can use, modify and redistribute it for
                 ;/   personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
                 ;/ * Redistributions of source code must retain the above copyright notice.
                 ;/
                 ;/-----------------------------------------------------------------------------/
                 ;/ Jun 15,'09  R0.01a  First release. (Branched from FatFs R0.07b.)
                 ;/
                 ;/ Dec 14,'09  R0.02   Added multiple code page support.
                 ;/                     Added write funciton.
                 ;/                     Changed stream read mode interface.
                 ;/----------------------------------------------------------------------------*/
                 ;
                 ;#include "pff.h"		/* Petit FatFs configurations and declarations */
                 ;#include "diskio.h"		/* Declarations of low level disk I/O functions */
                 ;
                 ;
                 ;/*--------------------------------------------------------------------------
                 ;
                 ;   Private Functions
                 ;
                 ;---------------------------------------------------------------------------*/
                 ;
                 ;static
                 ;FATFS *FatFs;	/* Pointer to the file system object (logical drive) */
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* String functions                                                      */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;/* Fill memory */
                 ;static
                 ;void mem_set (void* dst, int val, int cnt) {
                 ; 0000 0010 void mem_set (void* dst, int val, int cnt) {
                 
                 	.CSEG
                 _mem_set_G000:
                 ; .FSTART _mem_set_G000
                 ;	char *d = (char*)dst;
                 ;	while (cnt--) *d++ = (char)val;
000ce6 93ba      	ST   -Y,R27
000ce7 93aa      	ST   -Y,R26
000ce8 931a      	ST   -Y,R17
000ce9 930a      	ST   -Y,R16
                 ;	*dst -> Y+6
                 ;	val -> Y+4
                 ;	cnt -> Y+2
                 ;	*d -> R16,R17
                +
000cea 810e     +LDD R16 , Y + 6
000ceb 811f     +LDD R17 , Y + 6 + 1
                 	__GETWRS 16,17,6
                 _0x3:
000cec 81ea      	LDD  R30,Y+2
000ced 81fb      	LDD  R31,Y+2+1
000cee 9731      	SBIW R30,1
000cef 83ea      	STD  Y+2,R30
000cf0 83fb      	STD  Y+2+1,R31
000cf1 9631      	ADIW R30,1
000cf2 f049      	BREQ _0x5
000cf3 931f      	PUSH R17
000cf4 930f      	PUSH R16
                +
000cf5 5f0f     +SUBI R16 , LOW ( - 1 )
000cf6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000cf7 81ec      	LDD  R30,Y+4
000cf8 91af      	POP  R26
000cf9 91bf      	POP  R27
000cfa 93ec      	ST   X,R30
000cfb cff0      	RJMP _0x3
                 _0x5:
000cfc 8119      	LDD  R17,Y+1
000cfd 8108      	LDD  R16,Y+0
000cfe c328      	RJMP _0x20A000A
                 ; .FEND
                 ;
                 ;/* Compare memory to memory */
                 ;static
                 ;int mem_cmp (const void* dst, const void* src, int cnt) {
                 _mem_cmp_G000:
                 ; .FSTART _mem_cmp_G000
                 ;	const char *d = (const char *)dst, *s = (const char *)src;
                 ;	int r = 0;
                 ;	while (cnt-- && (r = *d++ - *s++) == 0) ;
000cff 940e 1b33 	CALL SUBOPT_0x0
                 ;	*dst -> Y+10
                 ;	*src -> Y+8
                 ;	cnt -> Y+6
                 ;	*d -> R16,R17
                 ;	*s -> R18,R19
                 ;	r -> R20,R21
                +
000d01 850a     +LDD R16 , Y + 10
000d02 851b     +LDD R17 , Y + 10 + 1
                 	__GETWRS 16,17,10
                +
000d03 8528     +LDD R18 , Y + 8
000d04 8539     +LDD R19 , Y + 8 + 1
                 	__GETWRS 18,19,8
                +
000d05 e040     +LDI R20 , LOW ( 0 )
000d06 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x6:
000d07 81ee      	LDD  R30,Y+6
000d08 81ff      	LDD  R31,Y+6+1
000d09 9731      	SBIW R30,1
000d0a 83ee      	STD  Y+6,R30
000d0b 83ff      	STD  Y+6+1,R31
000d0c 9631      	ADIW R30,1
000d0d f081      	BREQ _0x9
000d0e 01d8      	MOVW R26,R16
                +
000d0f 5f0f     +SUBI R16 , LOW ( - 1 )
000d10 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000d11 900c      	LD   R0,X
000d12 2411      	CLR  R1
000d13 01d9      	MOVW R26,R18
                +
000d14 5f2f     +SUBI R18 , LOW ( - 1 )
000d15 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000d16 91ac      	LD   R26,X
000d17 27bb      	CLR  R27
000d18 01f0      	MOVW R30,R0
000d19 1bea      	SUB  R30,R26
000d1a 0bfb      	SBC  R31,R27
000d1b 01af      	MOVW R20,R30
000d1c 9730      	SBIW R30,0
000d1d f009      	BREQ _0xA
                 _0x9:
000d1e c001      	RJMP _0x8
                 _0xA:
000d1f cfe7      	RJMP _0x6
                 _0x8:
                 ;	return r;
000d20 01fa      	MOVW R30,R20
000d21 940e 2023 	CALL __LOADLOCR6
000d23 962c      	ADIW R28,12
000d24 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* FAT access - Read value of a FAT entry                                */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;CLUST get_fat (	/* 1:IO error, Else:Cluster status */
                 ;	CLUST clst	/* Cluster# to get the link information */
                 ;)
                 ;{
                 _get_fat_G000:
                 ; .FSTART _get_fat_G000
                 ;	WORD wc, bc, ofs;
                 ;	BYTE buf[4];
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
000d25 940e 1ff6 	CALL __PUTPARD2
000d27 9726      	SBIW R28,6
000d28 940e 201c 	CALL __SAVELOCR6
                 ;	clst -> Y+12
                 ;	wc -> R16,R17
                 ;	bc -> R18,R19
                 ;	ofs -> R20,R21
                 ;	buf -> Y+8
                 ;	*fs -> Y+6
000d2a 940e 1b38 	CALL SUBOPT_0x1
000d2c 83ee      	STD  Y+6,R30
000d2d 83ff      	STD  Y+6+1,R31
000d2e 940e 1b3d 	CALL SUBOPT_0x2
000d30 940e 1b42 	CALL SUBOPT_0x3
000d32 f050      	BRLO _0xC
000d33 81ae      	LDD  R26,Y+6
000d34 81bf      	LDD  R27,Y+6+1
000d35 9618      	ADIW R26,8
000d36 940e 1fc8 	CALL __GETD1P
000d38 940e 1b3d 	CALL SUBOPT_0x2
000d3a 940e 2017 	CALL __CPD21
000d3c f008      	BRLO _0xB
                 _0xC:
                 ;		return 1;
000d3d c0b5      	RJMP _0x20A000D
                 ;
                 ;	switch (fs->fs_type) {
                 _0xB:
000d3e 81ae      	LDD  R26,Y+6
000d3f 81bf      	LDD  R27,Y+6+1
000d40 91ec      	LD   R30,X
000d41 e0f0      	LDI  R31,0
                 ;	case FS_FAT12 :
000d42 30e1      	CPI  R30,LOW(0x1)
000d43 e0a0      	LDI  R26,HIGH(0x1)
000d44 07fa      	CPC  R31,R26
000d45 f009      	BREQ PC+2
000d46 c04c      	RJMP _0x11
                 ;		bc = (WORD)clst; bc += bc / 2;
                +
000d47 852c     +LDD R18 , Y + 12
000d48 853d     +LDD R19 , Y + 12 + 1
                 	__GETWRS 18,19,12
000d49 01f9      	MOVW R30,R18
000d4a 95f6      	LSR  R31
000d4b 95e7      	ROR  R30
                +
000d4c 0f2e     +ADD R18 , R30
000d4d 1f3f     +ADC R19 , R31
                 	__ADDWRR 18,19,30,31
                 ;		ofs = bc % 512; bc /= 512;
000d4e 01f9      	MOVW R30,R18
000d4f 70f1      	ANDI R31,HIGH(0x1FF)
000d50 01af      	MOVW R20,R30
000d51 01d9      	MOVW R26,R18
000d52 e0e0      	LDI  R30,LOW(512)
000d53 e0f2      	LDI  R31,HIGH(512)
000d54 940e 1f67 	CALL __DIVW21U
000d56 019f      	MOVW R18,R30
                 ;		if (ofs != 511) {
000d57 efef      	LDI  R30,LOW(511)
000d58 e0f1      	LDI  R31,HIGH(511)
000d59 17e4      	CP   R30,R20
000d5a 07f5      	CPC  R31,R21
000d5b f049      	BREQ _0x12
                 ;			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
000d5c 940e 1b4a 	CALL SUBOPT_0x4
000d5e 935a      	ST   -Y,R21
000d5f 934a      	ST   -Y,R20
000d60 940e 1b5c 	CALL SUBOPT_0x5
000d62 f009      	BREQ _0x13
000d63 c08f      	RJMP _0x10
                 ;		} else {
                 _0x13:
000d64 c01f      	RJMP _0x14
                 _0x12:
                 ;			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
000d65 940e 1b4a 	CALL SUBOPT_0x4
000d67 940e 1b62 	CALL SUBOPT_0x6
000d69 e0a1      	LDI  R26,LOW(1)
000d6a 940e 1b67 	CALL SUBOPT_0x7
000d6c f009      	BREQ _0x15
000d6d c085      	RJMP _0x10
                 ;			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
                 _0x15:
000d6e 01fe      	MOVW R30,R28
000d6f 9639      	ADIW R30,9
000d70 940e 1b6c 	CALL SUBOPT_0x8
000d72 01f9      	MOVW R30,R18
000d73 940e 1b75 	CALL SUBOPT_0x9
                +
000d75 5fef     +SUBI R30 , LOW ( - 1 )
000d76 4fff     +SBCI R31 , HIGH ( - 1 )
000d77 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000d78 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__ADDD1N 1
000d79 940e 1ff1 	CALL __PUTPARD1
000d7b e0e0      	LDI  R30,LOW(0)
000d7c e0f0      	LDI  R31,HIGH(0)
000d7d 93fa      	ST   -Y,R31
000d7e 93ea      	ST   -Y,R30
000d7f e0a1      	LDI  R26,LOW(1)
000d80 940e 1b67 	CALL SUBOPT_0x7
000d82 f009      	BREQ _0x16
000d83 c06f      	RJMP _0x10
                 ;		}
                 _0x16:
                 _0x14:
                 ;		wc = LD_WORD(buf);
000d84 940e 1b7a 	CALL SUBOPT_0xA
000d86 018f      	MOVW R16,R30
                 ;		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
000d87 85ec      	LDD  R30,Y+12
000d88 70e1      	ANDI R30,LOW(0x1)
000d89 f021      	BREQ _0x17
000d8a 01f8      	MOVW R30,R16
000d8b 940e 1f18 	CALL __LSRW4
000d8d c002      	RJMP _0x2E6
                 _0x17:
000d8e 01f8      	MOVW R30,R16
000d8f 70ff      	ANDI R31,HIGH(0xFFF)
                 _0x2E6:
000d90 2766      	CLR  R22
000d91 2777      	CLR  R23
000d92 c064      	RJMP _0x20A000C
                 ;
                 ;	case FS_FAT16 :
                 _0x11:
000d93 30e2      	CPI  R30,LOW(0x2)
000d94 e0a0      	LDI  R26,HIGH(0x2)
000d95 07fa      	CPC  R31,R26
000d96 f511      	BRNE _0x1A
                 ;		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
000d97 01fe      	MOVW R30,R28
000d98 9638      	ADIW R30,8
000d99 940e 1b6c 	CALL SUBOPT_0x8
000d9b 939f      	PUSH R25
000d9c 938f      	PUSH R24
000d9d 93bf      	PUSH R27
000d9e 93af      	PUSH R26
000d9f 940e 1b82 	CALL SUBOPT_0xB
                +
000da1 e0e0     +LDI R30 , LOW ( 0x100 )
000da2 e0f1     +LDI R31 , HIGH ( 0x100 )
000da3 e060     +LDI R22 , BYTE3 ( 0x100 )
000da4 e070     +LDI R23 , BYTE4 ( 0x100 )
                 	__GETD1N 0x100
000da5 940e 1f7f 	CALL __DIVD21U
000da7 91af      	POP  R26
000da8 91bf      	POP  R27
000da9 918f      	POP  R24
000daa 919f      	POP  R25
000dab 940e 1b87 	CALL SUBOPT_0xC
000dad 70f0      	ANDI R31,HIGH(0xFF)
000dae 0fee      	LSL  R30
000daf 1fff      	ROL  R31
000db0 940e 1b8e 	CALL SUBOPT_0xD
000db2 f009      	BREQ _0x1B
000db3 c03f      	RJMP _0x10
                 ;		return LD_WORD(buf);
                 _0x1B:
000db4 940e 1b7a 	CALL SUBOPT_0xA
000db6 2766      	CLR  R22
000db7 2777      	CLR  R23
000db8 c03e      	RJMP _0x20A000C
                 ;#if _FS_FAT32
                 ;	case FS_FAT32 :
                 _0x1A:
000db9 30e3      	CPI  R30,LOW(0x3)
000dba e0a0      	LDI  R26,HIGH(0x3)
000dbb 07fa      	CPC  R31,R26
000dbc f5b1      	BRNE _0x10
                 ;		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
000dbd 01fe      	MOVW R30,R28
000dbe 9638      	ADIW R30,8
000dbf 940e 1b6c 	CALL SUBOPT_0x8
000dc1 939f      	PUSH R25
000dc2 938f      	PUSH R24
000dc3 93bf      	PUSH R27
000dc4 93af      	PUSH R26
000dc5 940e 1b82 	CALL SUBOPT_0xB
                +
000dc7 e8e0     +LDI R30 , LOW ( 0x80 )
000dc8 e0f0     +LDI R31 , HIGH ( 0x80 )
000dc9 e060     +LDI R22 , BYTE3 ( 0x80 )
000dca e070     +LDI R23 , BYTE4 ( 0x80 )
                 	__GETD1N 0x80
000dcb 940e 1f7f 	CALL __DIVD21U
000dcd 91af      	POP  R26
000dce 91bf      	POP  R27
000dcf 918f      	POP  R24
000dd0 919f      	POP  R25
000dd1 940e 1b87 	CALL SUBOPT_0xC
000dd3 77ef      	ANDI R30,LOW(0x7F)
000dd4 70f0      	ANDI R31,HIGH(0x7F)
000dd5 940e 1f0c 	CALL __LSLW2
000dd7 93fa      	ST   -Y,R31
000dd8 93ea      	ST   -Y,R30
000dd9 e0a4      	LDI  R26,LOW(4)
000dda 940e 1b67 	CALL SUBOPT_0x7
000ddc f4b1      	BRNE _0x10
                 ;		return LD_DWORD(buf) & 0x0FFFFFFF;
000ddd 85eb      	LDD  R30,Y+11
000dde 940e 1b91 	CALL SUBOPT_0xE
000de0 85ea      	LDD  R30,Y+10
000de1 940e 1b9c 	CALL SUBOPT_0xF
000de3 01df      	MOVW R26,R30
000de4 01cb      	MOVW R24,R22
000de5 e0e0      	LDI  R30,0
000de6 85f9      	LDD  R31,Y+9
000de7 940e 1ba4 	CALL SUBOPT_0x10
000de9 01df      	MOVW R26,R30
000dea 01cb      	MOVW R24,R22
000deb 85e8      	LDD  R30,Y+8
000dec 940e 1ba9 	CALL SUBOPT_0x11
                +
000dee 7fef     +ANDI R30 , LOW ( 0xFFFFFFF )
000def 7fff     +ANDI R31 , HIGH ( 0xFFFFFFF )
000df0 7f6f     +ANDI R22 , BYTE3 ( 0xFFFFFFF )
000df1 707f     +ANDI R23 , BYTE4 ( 0xFFFFFFF )
                 	__ANDD1N 0xFFFFFFF
000df2 c004      	RJMP _0x20A000C
                 ;#endif
                 ;	}
                 _0x10:
                 ;
                 ;	return 1;	/* An error occured at the disk I/O layer */
                 _0x20A000D:
                +
000df3 e0e1     +LDI R30 , LOW ( 0x1 )
000df4 e0f0     +LDI R31 , HIGH ( 0x1 )
000df5 e060     +LDI R22 , BYTE3 ( 0x1 )
000df6 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
                 _0x20A000C:
000df7 940e 2023 	CALL __LOADLOCR6
000df9 9660      	ADIW R28,16
000dfa 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Get sector# from cluster#                                             */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
                 ;	CLUST clst		/* Cluster# to be converted */
                 ;)
                 ;{
                 _clust2sect_G000:
                 ; .FSTART _clust2sect_G000
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	clst -= 2;
000dfb 940e 1ff6 	CALL __PUTPARD2
000dfd 940e 1baf 	CALL SUBOPT_0x12
                 ;	clst -> Y+2
                 ;	*fs -> R16,R17
000dff 940e 1bb6 	CALL SUBOPT_0x13
                +
000e01 50e2     +SUBI R30 , LOW ( 2 )
000e02 40f0     +SBCI R31 , HIGH ( 2 )
000e03 4060     +SBCI R22 , BYTE3 ( 2 )
000e04 4070     +SBCI R23 , BYTE4 ( 2 )
                 	__SUBD1N 2
000e05 940e 1bbb 	CALL SUBOPT_0x14
                 ;	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
000e07 01f8      	MOVW R30,R16
                +
000e08 85a0     +LDD R26 , Z + 8
000e09 85b1     +LDD R27 , Z + 8 + 1
000e0a 8582     +LDD R24 , Z + 8 + 2
000e0b 8593     +LDD R25 , Z + 8 + 3
                 	__GETD2Z 8
                +
000e0c e0e2     +LDI R30 , LOW ( 0x2 )
000e0d e0f0     +LDI R31 , HIGH ( 0x2 )
000e0e e060     +LDI R22 , BYTE3 ( 0x2 )
000e0f e070     +LDI R23 , BYTE4 ( 0x2 )
                 	__GETD1N 0x2
000e10 940e 1ffb 	CALL __SWAPD12
000e12 940e 1ed0 	CALL __SUBD12
000e14 940e 1bc0 	CALL SUBOPT_0x15
000e16 940e 2017 	CALL __CPD21
000e18 f028      	BRLO _0x1E
000e19 940e 1bc5 	CALL SUBOPT_0x16
000e1b 8119      	LDD  R17,Y+1
000e1c 8108      	LDD  R16,Y+0
000e1d c23f      	RJMP _0x20A0009
                 ;	return (DWORD)clst * fs->csize + fs->database;
                 _0x1E:
000e1e 01f8      	MOVW R30,R16
000e1f 81e1      	LDD  R30,Z+1
000e20 e0f0      	LDI  R31,0
000e21 940e 1bc0 	CALL SUBOPT_0x15
000e23 940e 1f30 	CALL __CWD1
000e25 940e 1f42 	CALL __MULD12U
000e27 937f      	PUSH R23
000e28 936f      	PUSH R22
000e29 93ff      	PUSH R31
000e2a 93ef      	PUSH R30
000e2b 01d8      	MOVW R26,R16
000e2c 9654      	ADIW R26,20
000e2d 940e 1fc8 	CALL __GETD1P
000e2f 91af      	POP  R26
000e30 91bf      	POP  R27
000e31 918f      	POP  R24
000e32 919f      	POP  R25
000e33 940e 1ecb 	CALL __ADDD12
000e35 8119      	LDD  R17,Y+1
000e36 8108      	LDD  R16,Y+0
000e37 c225      	RJMP _0x20A0009
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Directory handling - Rewind directory index                           */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;FRESULT dir_rewind (
                 ;	DIR *dj			/* Pointer to directory object */
                 ;)
                 ;{
                 _dir_rewind_G000:
                 ; .FSTART _dir_rewind_G000
                 ;	CLUST clst;
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	dj->index = 0;
000e38 93ba      	ST   -Y,R27
000e39 93aa      	ST   -Y,R26
000e3a 9724      	SBIW R28,4
000e3b 940e 1baf 	CALL SUBOPT_0x12
                 ;	*dj -> Y+6
                 ;	clst -> Y+2
                 ;	*fs -> R16,R17
000e3d 81ae      	LDD  R26,Y+6
000e3e 81bf      	LDD  R27,Y+6+1
000e3f e0e0      	LDI  R30,LOW(0)
000e40 e0f0      	LDI  R31,HIGH(0)
000e41 93ed      	ST   X+,R30
000e42 93fc      	ST   X,R31
                 ;	clst = dj->sclust;
000e43 81ae      	LDD  R26,Y+6
000e44 81bf      	LDD  R27,Y+6+1
000e45 9614      	ADIW R26,4
000e46 940e 1bca 	CALL SUBOPT_0x17
                 ;	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
000e48 940e 1bc0 	CALL SUBOPT_0x15
                +
000e4a 30a1     +CPI R26 , LOW ( 0x1 )
000e4b e0e0     +LDI R30 , HIGH ( 0x1 )
000e4c 07be     +CPC R27 , R30
000e4d e0e0     +LDI R30 , BYTE3 ( 0x1 )
000e4e 078e     +CPC R24 , R30
000e4f e0e0     +LDI R30 , BYTE4 ( 0x1 )
000e50 079e     +CPC R25 , R30
                 	__CPD2N 0x1
000e51 f049      	BREQ _0x20
000e52 01d8      	MOVW R26,R16
000e53 9618      	ADIW R26,8
000e54 940e 1fc8 	CALL __GETD1P
000e56 940e 1bc0 	CALL SUBOPT_0x15
000e58 940e 2017 	CALL __CPD21
000e5a f020      	BRLO _0x1F
                 _0x20:
                 ;		return FR_DISK_ERR;
000e5b e0e1      	LDI  R30,LOW(1)
000e5c 8119      	LDD  R17,Y+1
000e5d 8108      	LDD  R16,Y+0
000e5e c1c8      	RJMP _0x20A000A
                 ;#if _FS_FAT32
                 ;	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
                 _0x1F:
000e5f 940e 1bb6 	CALL SUBOPT_0x13
000e61 940e 2008 	CALL __CPD10
000e63 f421      	BRNE _0x23
000e64 01d8      	MOVW R26,R16
000e65 91ac      	LD   R26,X
000e66 30a3      	CPI  R26,LOW(0x3)
000e67 f009      	BREQ _0x24
                 _0x23:
000e68 c004      	RJMP _0x22
                 _0x24:
                 ;		clst = fs->dirbase;
000e69 01d8      	MOVW R26,R16
000e6a 9650      	ADIW R26,16
000e6b 940e 1bca 	CALL SUBOPT_0x17
                 ;#endif
                 ;	dj->clust = clst;						/* Current cluster */
                 _0x22:
000e6d 940e 1bb6 	CALL SUBOPT_0x13
                +
000e6f 81ae     +LDD R26 , Y + 6
000e70 81bf     +LDD R27 , Y + 6 + 1
000e71 9618     +ADIW R26 , 8
000e72 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 6,8
                 ;	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
000e74 940e 1bb6 	CALL SUBOPT_0x13
000e76 940e 2008 	CALL __CPD10
000e78 f021      	BREQ _0x25
000e79 940e 1bc0 	CALL SUBOPT_0x15
000e7b df7f      	RCALL _clust2sect_G000
000e7c c004      	RJMP _0x26
                 _0x25:
000e7d 01d8      	MOVW R26,R16
000e7e 9650      	ADIW R26,16
000e7f 940e 1fc8 	CALL __GETD1P
                 _0x26:
                +
000e81 81ae     +LDD R26 , Y + 6
000e82 81bf     +LDD R27 , Y + 6 + 1
000e83 961c     +ADIW R26 , 12
000e84 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 6,12
                 ;
                 ;	return FR_OK;	/* Seek succeeded */
000e86 e0e0      	LDI  R30,LOW(0)
000e87 8119      	LDD  R17,Y+1
000e88 8108      	LDD  R16,Y+0
000e89 c19d      	RJMP _0x20A000A
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Directory handling - Move directory index next                        */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;FRESULT dir_next (	        /* FR_OK:Succeeded, FR_NO_FILE:End of table */
                 ;	DIR *dj			/* Pointer to directory object */
                 ;)
                 ;{
                 _dir_next_G000:
                 ; .FSTART _dir_next_G000
                 ;	CLUST clst;
                 ;	WORD i;
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	i = dj->index + 1;
000e8a 93ba      	ST   -Y,R27
000e8b 93aa      	ST   -Y,R26
000e8c 9724      	SBIW R28,4
000e8d 940e 1bcd 	CALL SUBOPT_0x18
                 ;	*dj -> Y+8
                 ;	clst -> Y+4
                 ;	i -> R16,R17
                 ;	*fs -> R18,R19
000e8f 85a8      	LDD  R26,Y+8
000e90 85b9      	LDD  R27,Y+8+1
000e91 940e 1fc4 	CALL __GETW1P
000e93 9631      	ADIW R30,1
000e94 018f      	MOVW R16,R30
                 ;	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
000e95 2e00      	MOV  R0,R16
000e96 2a01      	OR   R0,R17
000e97 f031      	BREQ _0x29
000e98 961c      	ADIW R26,12
000e99 940e 1fc8 	CALL __GETD1P
000e9b 940e 2008 	CALL __CPD10
000e9d f411      	BRNE _0x28
                 _0x29:
                 ;		return FR_NO_FILE;
000e9e e0e3      	LDI  R30,LOW(3)
000e9f c05a      	RJMP _0x20A000B
                 ;
                 ;	if (!(i & (16-1))) {	/* Sector changed? */
                 _0x28:
000ea0 01f8      	MOVW R30,R16
000ea1 70ef      	ANDI R30,LOW(0xF)
000ea2 f009      	BREQ PC+2
000ea3 c051      	RJMP _0x2B
                 ;		dj->sect++;			/* Next sector */
000ea4 85a8      	LDD  R26,Y+8
000ea5 85b9      	LDD  R27,Y+8+1
000ea6 961c      	ADIW R26,12
000ea7 940e 1bd4 	CALL SUBOPT_0x19
                 ;
                 ;		if (dj->clust == 0) {	/* Static table */
000ea9 85a8      	LDD  R26,Y+8
000eaa 85b9      	LDD  R27,Y+8+1
000eab 9618      	ADIW R26,8
000eac 940e 1fc8 	CALL __GETD1P
000eae 940e 2008 	CALL __CPD10
000eb0 f451      	BRNE _0x2C
                 ;			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
000eb1 01d9      	MOVW R26,R18
000eb2 9614      	ADIW R26,4
000eb3 940e 1fc4 	CALL __GETW1P
000eb5 170e      	CP   R16,R30
000eb6 071f      	CPC  R17,R31
000eb7 f010      	BRLO _0x2D
                 ;				return FR_NO_FILE;
000eb8 e0e3      	LDI  R30,LOW(3)
000eb9 c040      	RJMP _0x20A000B
                 ;		}
                 _0x2D:
                 ;		else {					/* Dynamic table */
000eba c03a      	RJMP _0x2E
                 _0x2C:
                 ;			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
000ebb 01f8      	MOVW R30,R16
000ebc 940e 1f18 	CALL __LSRW4
000ebe 01df      	MOVW R26,R30
000ebf 01f9      	MOVW R30,R18
000ec0 81e1      	LDD  R30,Z+1
000ec1 e0f0      	LDI  R31,0
000ec2 9731      	SBIW R30,1
000ec3 23ea      	AND  R30,R26
000ec4 23fb      	AND  R31,R27
000ec5 9730      	SBIW R30,0
000ec6 f571      	BRNE _0x2F
                 ;				clst = get_fat(dj->clust);		/* Get next cluster */
000ec7 85e8      	LDD  R30,Y+8
000ec8 85f9      	LDD  R31,Y+8+1
                +
000ec9 85a0     +LDD R26 , Z + 8
000eca 85b1     +LDD R27 , Z + 8 + 1
000ecb 8582     +LDD R24 , Z + 8 + 2
000ecc 8593     +LDD R25 , Z + 8 + 3
                 	__GETD2Z 8
000ecd de57      	RCALL _get_fat_G000
                +
000ece 83ec     +STD Y + 4 , R30
000ecf 83fd     +STD Y + 4 + 1 , R31
000ed0 836e     +STD Y + 4 + 2 , R22
000ed1 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ;				if (clst <= 1) return FR_DISK_ERR;
000ed2 940e 1bdd 	CALL SUBOPT_0x1A
000ed4 940e 1b42 	CALL SUBOPT_0x3
000ed6 f410      	BRSH _0x30
000ed7 e0e1      	LDI  R30,LOW(1)
000ed8 c021      	RJMP _0x20A000B
                 ;				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
                 _0x30:
000ed9 01d9      	MOVW R26,R18
000eda 9618      	ADIW R26,8
000edb 940e 1fc8 	CALL __GETD1P
000edd 940e 1bdd 	CALL SUBOPT_0x1A
000edf 940e 2017 	CALL __CPD21
000ee1 f010      	BRLO _0x31
                 ;					return FR_NO_FILE;			/* Report EOT */
000ee2 e0e3      	LDI  R30,LOW(3)
000ee3 c016      	RJMP _0x20A000B
                 ;				dj->clust = clst;				/* Initialize data for new cluster */
                 _0x31:
                +
000ee4 81ec     +LDD R30 , Y + 4
000ee5 81fd     +LDD R31 , Y + 4 + 1
000ee6 816e     +LDD R22 , Y + 4 + 2
000ee7 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000ee8 85a8     +LDD R26 , Y + 8
000ee9 85b9     +LDD R27 , Y + 8 + 1
000eea 9618     +ADIW R26 , 8
000eeb 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 8,8
                 ;				dj->sect = clust2sect(clst);
000eed 940e 1bdd 	CALL SUBOPT_0x1A
000eef df0b      	RCALL _clust2sect_G000
                +
000ef0 85a8     +LDD R26 , Y + 8
000ef1 85b9     +LDD R27 , Y + 8 + 1
000ef2 961c     +ADIW R26 , 12
000ef3 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 8,12
                 ;			}
                 ;		}
                 _0x2F:
                 _0x2E:
                 ;	}
                 ;
                 ;	dj->index = i;
                 _0x2B:
000ef5 85a8      	LDD  R26,Y+8
000ef6 85b9      	LDD  R27,Y+8+1
000ef7 930d      	ST   X+,R16
000ef8 931c      	ST   X,R17
                 ;
                 ;	return FR_OK;
000ef9 e0e0      	LDI  R30,LOW(0)
                 _0x20A000B:
000efa 940e 2025 	CALL __LOADLOCR4
000efc 962a      	ADIW R28,10
000efd 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Directory handling - Find an object in the directory                  */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;FRESULT dir_find (
                 ;	DIR *dj			/* Pointer to the directory object linked to the file name */
                 ;)
                 ;{
                 _dir_find_G000:
                 ; .FSTART _dir_find_G000
                 ;	FRESULT res;
                 ;	BYTE c, *dir;
                 ;
                 ;
                 ;	res = dir_rewind(dj);			/* Rewind directory object */
000efe 940e 1be2 	CALL SUBOPT_0x1B
                 ;	*dj -> Y+4
                 ;	res -> R17
                 ;	c -> R16
                 ;	*dir -> R18,R19
000f00 81ac      	LDD  R26,Y+4
000f01 81bd      	LDD  R27,Y+4+1
000f02 df35      	RCALL _dir_rewind_G000
000f03 2f1e      	MOV  R17,R30
                 ;	if (res != FR_OK) return res;
000f04 3010      	CPI  R17,0
000f05 f019      	BREQ _0x32
000f06 940e 2025 	CALL __LOADLOCR4
000f08 c154      	RJMP _0x20A0009
                 ;
                 ;	dir = FatFs->buf;
                 _0x32:
000f09 940e 1be7 	CALL SUBOPT_0x1C
                 ;	do {
                 _0x34:
                 ;		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
                 ;			? FR_DISK_ERR : FR_OK;
000f0b 933a      	ST   -Y,R19
000f0c 932a      	ST   -Y,R18
000f0d 81ee      	LDD  R30,Y+6
000f0e 81ff      	LDD  R31,Y+6+1
000f0f 940e 1bef 	CALL SUBOPT_0x1D
000f11 940e 1ff6 	CALL __PUTPARD2
000f13 85aa      	LDD  R26,Y+10
000f14 85bb      	LDD  R27,Y+10+1
000f15 940e 1fc4 	CALL __GETW1P
000f17 70ef      	ANDI R30,LOW(0xF)
000f18 70f0      	ANDI R31,HIGH(0xF)
000f19 0fee      	LSL  R30
000f1a 940e 1f08 	CALL __LSLW4
000f1c 93fa      	ST   -Y,R31
000f1d 93ea      	ST   -Y,R30
000f1e e2a0      	LDI  R26,LOW(32)
000f1f 940e 1b67 	CALL SUBOPT_0x7
000f21 f011      	BREQ _0x36
000f22 e0e1      	LDI  R30,LOW(1)
000f23 c001      	RJMP _0x37
                 _0x36:
000f24 e0e0      	LDI  R30,LOW(0)
                 _0x37:
000f25 2f1e      	MOV  R17,R30
                 ;		if (res != FR_OK) break;
000f26 3010      	CPI  R17,0
000f27 f4f9      	BRNE _0x35
                 ;		c = dir[DIR_Name];	/* First character */
000f28 01d9      	MOVW R26,R18
000f29 910c      	LD   R16,X
                 ;		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000f2a 3000      	CPI  R16,0
000f2b f411      	BRNE _0x3A
000f2c e013      	LDI  R17,LOW(3)
000f2d c019      	RJMP _0x35
                 ;		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
                 _0x3A:
000f2e 01f9      	MOVW R30,R18
000f2f 85e3      	LDD  R30,Z+11
000f30 70e8      	ANDI R30,LOW(0x8)
000f31 f469      	BRNE _0x3C
000f32 933a      	ST   -Y,R19
000f33 932a      	ST   -Y,R18
000f34 81ee      	LDD  R30,Y+6
000f35 81ff      	LDD  R31,Y+6+1
000f36 81a2      	LDD  R26,Z+2
000f37 81b3      	LDD  R27,Z+3
000f38 93ba      	ST   -Y,R27
000f39 93aa      	ST   -Y,R26
000f3a e0ab      	LDI  R26,LOW(11)
000f3b e0b0      	LDI  R27,0
000f3c ddc2      	RCALL _mem_cmp_G000
000f3d 9730      	SBIW R30,0
000f3e f009      	BREQ _0x3D
                 _0x3C:
000f3f c001      	RJMP _0x3B
                 _0x3D:
                 ;			break;
000f40 c006      	RJMP _0x35
                 ;		res = dir_next(dj);							/* Next entry */
                 _0x3B:
000f41 81ac      	LDD  R26,Y+4
000f42 81bd      	LDD  R27,Y+4+1
000f43 df46      	RCALL _dir_next_G000
000f44 2f1e      	MOV  R17,R30
                 ;	} while (res == FR_OK);
000f45 3010      	CPI  R17,0
000f46 f221      	BREQ _0x34
                 _0x35:
                 ;
                 ;	return res;
000f47 2fe1      	MOV  R30,R17
000f48 940e 2025 	CALL __LOADLOCR4
000f4a c112      	RJMP _0x20A0009
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Read an object from the directory                                     */
                 ;/*-----------------------------------------------------------------------*/
                 ;#if _USE_DIR
                 ;static
                 ;FRESULT dir_read (
                 ;	DIR *dj			/* Pointer to the directory object to store read object name */
                 ;)
                 ;{
                 ;	FRESULT res;
                 ;	BYTE a, c, *dir;
                 ;
                 ;
                 ;	res = FR_NO_FILE;
                 ;	dir = FatFs->buf;
                 ;	while (dj->sect) {
                 ;		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
                 ;			? FR_DISK_ERR : FR_OK;
                 ;		if (res != FR_OK) break;
                 ;		c = dir[DIR_Name];
                 ;		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
                 ;		a = dir[DIR_Attr] & AM_MASK;
                 ;		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
                 ;			break;
                 ;		res = dir_next(dj);				/* Next entry */
                 ;		if (res != FR_OK) break;
                 ;	}
                 ;
                 ;	if (res != FR_OK) dj->sect = 0;
                 ;
                 ;	return res;
                 ;}
                 ;#endif
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Pick a segment and create the object name in directory form           */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;#ifdef _EXCVT
                 ;	static const BYTE cvt[] = _EXCVT;
                 ;#endif
                 ;
                 ;static
                 ;FRESULT create_name (
                 ;	DIR *dj,			/* Pointer to the directory object */
                 ;	const char **path	/* Pointer to pointer to the segment in the path string */
                 ;)
                 ;{
                 _create_name_G000:
                 ; .FSTART _create_name_G000
                 ;	BYTE c, d, ni, si, i, *sfn;
                 ;	const char *p;
                 ;
                 ;	/* Create file name in directory form */
                 ;	sfn = dj->fn;
000f4b 93ba      	ST   -Y,R27
000f4c 93aa      	ST   -Y,R26
000f4d 9724      	SBIW R28,4
000f4e 940e 201c 	CALL __SAVELOCR6
                 ;	*dj -> Y+12
                 ;	*path -> Y+10
                 ;	c -> R17
                 ;	d -> R16
                 ;	ni -> R19
                 ;	si -> R18
                 ;	i -> R21
                 ;	*sfn -> Y+8
                 ;	*p -> Y+6
000f50 85ac      	LDD  R26,Y+12
000f51 85bd      	LDD  R27,Y+12+1
000f52 9612      	ADIW R26,2
000f53 940e 1fc4 	CALL __GETW1P
000f55 87e8      	STD  Y+8,R30
000f56 87f9      	STD  Y+8+1,R31
                 ;	mem_set(sfn, ' ', 11);
000f57 93fa      	ST   -Y,R31
000f58 93ea      	ST   -Y,R30
000f59 e2e0      	LDI  R30,LOW(32)
000f5a e0f0      	LDI  R31,HIGH(32)
000f5b 93fa      	ST   -Y,R31
000f5c 93ea      	ST   -Y,R30
000f5d e0ab      	LDI  R26,LOW(11)
000f5e e0b0      	LDI  R27,0
000f5f dd86      	RCALL _mem_set_G000
                 ;	si = i = 0; ni = 8;
000f60 e0e0      	LDI  R30,LOW(0)
000f61 2f5e      	MOV  R21,R30
000f62 2f2e      	MOV  R18,R30
000f63 e038      	LDI  R19,LOW(8)
                 ;	p = *path;
000f64 85aa      	LDD  R26,Y+10
000f65 85bb      	LDD  R27,Y+10+1
000f66 940e 1fc4 	CALL __GETW1P
000f68 83ee      	STD  Y+6,R30
000f69 83ff      	STD  Y+6+1,R31
                 ;	for (;;) {
                 _0x3F:
                 ;		c = p[si++];
000f6a 940e 1bf4 	CALL SUBOPT_0x1E
000f6c 911c      	LD   R17,X
                 ;		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
000f6d 3211      	CPI  R17,33
000f6e f010      	BRLO _0x42
000f6f 321f      	CPI  R17,47
000f70 f409      	BRNE _0x41
                 _0x42:
000f71 c02c      	RJMP _0x40
                 ;		if (c == '.' || i >= ni) {
                 _0x41:
000f72 321e      	CPI  R17,46
000f73 f011      	BREQ _0x45
000f74 1753      	CP   R21,R19
000f75 f040      	BRLO _0x44
                 _0x45:
                 ;			if (ni != 8 || c != '.') break;
000f76 3038      	CPI  R19,8
000f77 f411      	BRNE _0x48
000f78 321e      	CPI  R17,46
000f79 f009      	BREQ _0x47
                 _0x48:
000f7a c023      	RJMP _0x40
                 ;			i = 8; ni = 11;
                 _0x47:
000f7b e058      	LDI  R21,LOW(8)
000f7c e03b      	LDI  R19,LOW(11)
                 ;			continue;
000f7d c01f      	RJMP _0x3E
                 ;		}
                 ;#ifdef _EXCVT
                 ;		if (c >= 0x80)					/* To upper extended char (SBCS) */
                 ;			c = cvt[c - 0x80];
                 ;#endif
                 ;		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
                 _0x44:
000f7e e0e0      	LDI  R30,LOW(0)
000f7f 30e0      	CPI  R30,0
000f80 f041      	BREQ _0x4B
000f81 2fe3      	MOV  R30,R19
000f82 e0f0      	LDI  R31,0
000f83 9731      	SBIW R30,1
000f84 2fa5      	MOV  R26,R21
000f85 e0b0      	LDI  R27,0
000f86 17ae      	CP   R26,R30
000f87 07bf      	CPC  R27,R31
000f88 f40c      	BRGE _0x4C
                 _0x4B:
000f89 c00a      	RJMP _0x4A
                 _0x4C:
                 ;			d = p[si++];					/* Get 2nd byte */
000f8a 940e 1bf4 	CALL SUBOPT_0x1E
000f8c 910c      	LD   R16,X
                 ;			sfn[i++] = c;
000f8d 940e 1bfc 	CALL SUBOPT_0x1F
000f8f 8310      	ST   Z,R17
                 ;			sfn[i++] = d;
000f90 940e 1bfc 	CALL SUBOPT_0x1F
000f92 8300      	ST   Z,R16
                 ;		} else {						/* Single byte code */
000f93 c009      	RJMP _0x4D
                 _0x4A:
                 ;			if (IsLower(c)) c -= 0x20;	/* toupper */
000f94 3611      	CPI  R17,97
000f95 f010      	BRLO _0x4F
000f96 371b      	CPI  R17,123
000f97 f008      	BRLO _0x50
                 _0x4F:
000f98 c001      	RJMP _0x4E
                 _0x50:
000f99 5210      	SUBI R17,LOW(32)
                 ;			sfn[i++] = c;
                 _0x4E:
000f9a 940e 1bfc 	CALL SUBOPT_0x1F
000f9c 8310      	ST   Z,R17
                 ;		}
                 _0x4D:
                 ;	}
                 _0x3E:
000f9d cfcc      	RJMP _0x3F
                 _0x40:
                 ;	*path = &p[si];						/* Rerurn pointer to the next segment */
000f9e 2fe2      	MOV  R30,R18
000f9f 81ae      	LDD  R26,Y+6
000fa0 81bf      	LDD  R27,Y+6+1
000fa1 e0f0      	LDI  R31,0
000fa2 0fea      	ADD  R30,R26
000fa3 1ffb      	ADC  R31,R27
000fa4 85aa      	LDD  R26,Y+10
000fa5 85bb      	LDD  R27,Y+10+1
000fa6 93ed      	ST   X+,R30
000fa7 93fc      	ST   X,R31
                 ;
                 ;	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
000fa8 3211      	CPI  R17,33
000fa9 f410      	BRSH _0x51
000faa e0e1      	LDI  R30,LOW(1)
000fab c001      	RJMP _0x52
                 _0x51:
000fac e0e0      	LDI  R30,LOW(0)
                 _0x52:
                +
000fad 85a8     +LDD R26 , Y + 8
000fae 85b9     +LDD R27 , Y + 8 + 1
000faf 961b     +ADIW R26 , 11
000fb0 93ec     +ST X , R30
                 	__PUTB1SNS 8,11
                 ;
                 ;	return FR_OK;
000fb1 e0e0      	LDI  R30,LOW(0)
000fb2 940e 2023 	CALL __LOADLOCR6
000fb4 962e      	ADIW R28,14
000fb5 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Get file information from directory entry                             */
                 ;/*-----------------------------------------------------------------------*/
                 ;#if _USE_DIR
                 ;static
                 ;void get_fileinfo (		/* No return code */
                 ;	DIR *dj,			/* Pointer to the directory object */
                 ;	FILINFO *fno	 	/* Pointer to store the file information */
                 ;)
                 ;{
                 ;	BYTE i, c, *dir;
                 ;	char *p;
                 ;
                 ;
                 ;	p = fno->fname;
                 ;	if (dj->sect) {
                 ;		dir = FatFs->buf;
                 ;		for (i = 0; i < 8; i++) {	/* Copy file name body */
                 ;			c = dir[i];
                 ;			if (c == ' ') break;
                 ;			if (c == 0x05) c = 0xE5;
                 ;			*p++ = c;
                 ;		}
                 ;		if (dir[8] != ' ') {		/* Copy file name extension */
                 ;			*p++ = '.';
                 ;			for (i = 8; i < 11; i++) {
                 ;				c = dir[i];
                 ;				if (c == ' ') break;
                 ;				*p++ = c;
                 ;			}
                 ;		}
                 ;		fno->fattrib = dir[DIR_Attr];				/* Attribute */
                 ;		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
                 ;		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
                 ;		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
                 ;	}
                 ;	*p = 0;
                 ;}
                 ;#endif /* _USE_DIR */
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Follow a file path                                                    */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
                 ;	DIR *dj,			/* Directory object to return last directory and found object */
                 ;	const char *path	/* Full-path string to find a file or directory */
                 ;)
                 ;{
                 _follow_path_G000:
                 ; .FSTART _follow_path_G000
                 ;	FRESULT res;
                 ;	BYTE *dir;
                 ;
                 ;
                 ;	while (*path == ' ') path++;		/* Skip leading spaces */
000fb6 940e 1be2 	CALL SUBOPT_0x1B
                 ;	*dj -> Y+6
                 ;	*path -> Y+4
                 ;	res -> R17
                 ;	*dir -> R18,R19
                 _0x54:
000fb8 81ac      	LDD  R26,Y+4
000fb9 81bd      	LDD  R27,Y+4+1
000fba 91ac      	LD   R26,X
000fbb 32a0      	CPI  R26,LOW(0x20)
000fbc f431      	BRNE _0x56
000fbd 81ec      	LDD  R30,Y+4
000fbe 81fd      	LDD  R31,Y+4+1
000fbf 9631      	ADIW R30,1
000fc0 83ec      	STD  Y+4,R30
000fc1 83fd      	STD  Y+4+1,R31
000fc2 cff5      	RJMP _0x54
                 _0x56:
000fc3 81ac      	LDD  R26,Y+4
000fc4 81bd      	LDD  R27,Y+4+1
000fc5 91ac      	LD   R26,X
000fc6 32af      	CPI  R26,LOW(0x2F)
000fc7 f429      	BRNE _0x57
000fc8 81ec      	LDD  R30,Y+4
000fc9 81fd      	LDD  R31,Y+4+1
000fca 9631      	ADIW R30,1
000fcb 83ec      	STD  Y+4,R30
000fcc 83fd      	STD  Y+4+1,R31
                 ;	dj->sclust = 0;						/* Set start directory (always root dir) */
                 _0x57:
000fcd 81ae      	LDD  R26,Y+6
000fce 81bf      	LDD  R27,Y+6+1
000fcf 9614      	ADIW R26,4
000fd0 940e 1c04 	CALL SUBOPT_0x20
                 ;
                 ;	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
000fd2 81ac      	LDD  R26,Y+4
000fd3 81bd      	LDD  R27,Y+4+1
000fd4 91ac      	LD   R26,X
000fd5 32a1      	CPI  R26,LOW(0x21)
000fd6 f458      	BRSH _0x58
                 ;		res = dir_rewind(dj);
000fd7 81ae      	LDD  R26,Y+6
000fd8 81bf      	LDD  R27,Y+6+1
000fd9 de5e      	RCALL _dir_rewind_G000
000fda 2f1e      	MOV  R17,R30
                 ;		FatFs->buf[0] = 0;
000fdb 940e 1b38 	CALL SUBOPT_0x1
000fdd 81a6      	LDD  R26,Z+6
000fde 81b7      	LDD  R27,Z+7
000fdf e0e0      	LDI  R30,LOW(0)
000fe0 93ec      	ST   X,R30
                 ;
                 ;	} else {							/* Follow path */
000fe1 c042      	RJMP _0x59
                 _0x58:
                 ;		for (;;) {
                 _0x5B:
                 ;			res = create_name(dj, &path);	/* Get a segment */
000fe2 81ee      	LDD  R30,Y+6
000fe3 81ff      	LDD  R31,Y+6+1
000fe4 93fa      	ST   -Y,R31
000fe5 93ea      	ST   -Y,R30
000fe6 01de      	MOVW R26,R28
000fe7 9616      	ADIW R26,6
000fe8 df62      	RCALL _create_name_G000
000fe9 2f1e      	MOV  R17,R30
                 ;			if (res != FR_OK) break;
000fea 3010      	CPI  R17,0
000feb f5c1      	BRNE _0x5C
                 ;			res = dir_find(dj);				/* Find it */
000fec 81ae      	LDD  R26,Y+6
000fed 81bf      	LDD  R27,Y+6+1
000fee df0f      	RCALL _dir_find_G000
000fef 2f1e      	MOV  R17,R30
                 ;			if (res != FR_OK) {				/* Could not find the object */
000ff0 3010      	CPI  R17,0
000ff1 f041      	BREQ _0x5E
                 ;				if (res == FR_NO_FILE && !*(dj->fn+11))
000ff2 3013      	CPI  R17,3
000ff3 f419      	BRNE _0x60
000ff4 940e 1c08 	CALL SUBOPT_0x21
000ff6 f009      	BREQ _0x61
                 _0x60:
000ff7 c001      	RJMP _0x5F
                 _0x61:
                 ;					res = FR_NO_PATH;
000ff8 e014      	LDI  R17,LOW(4)
                 ;				break;
                 _0x5F:
000ff9 c02a      	RJMP _0x5C
                 ;			}
                 ;			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
                 _0x5E:
000ffa 940e 1c08 	CALL SUBOPT_0x21
000ffc f539      	BRNE _0x5C
                 ;			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
000ffd 940e 1be7 	CALL SUBOPT_0x1C
                 ;			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
000fff 01f9      	MOVW R30,R18
001000 85e3      	LDD  R30,Z+11
001001 71e0      	ANDI R30,LOW(0x10)
001002 f411      	BRNE _0x63
                 ;				res = FR_NO_PATH; break;
001003 e014      	LDI  R17,LOW(4)
001004 c01f      	RJMP _0x5C
                 ;			}
                 ;			dj->sclust =
                 _0x63:
                 ;#if _FS_FAT32
                 ;				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
                 ;#endif
                 ;				LD_WORD(dir+DIR_FstClusLO);
001005 01f9      	MOVW R30,R18
001006 89b5      	LDD  R27,Z+21
001007 e0a0      	LDI  R26,LOW(0)
001008 89e4      	LDD  R30,Z+20
001009 940e 1c10 	CALL SUBOPT_0x22
00100b 940e 1f2b 	CALL __LSLD16
00100d 937f      	PUSH R23
00100e 936f      	PUSH R22
00100f 93ff      	PUSH R31
001010 93ef      	PUSH R30
001011 01f9      	MOVW R30,R18
001012 8db3      	LDD  R27,Z+27
001013 e0a0      	LDI  R26,LOW(0)
001014 8de2      	LDD  R30,Z+26
001015 e0f0      	LDI  R31,0
001016 2bea      	OR   R30,R26
001017 2bfb      	OR   R31,R27
001018 91af      	POP  R26
001019 91bf      	POP  R27
00101a 918f      	POP  R24
00101b 919f      	POP  R25
00101c 940e 1ba4 	CALL SUBOPT_0x10
                +
00101e 81ae     +LDD R26 , Y + 6
00101f 81bf     +LDD R27 , Y + 6 + 1
001020 9614     +ADIW R26 , 4
001021 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 6,4
                 ;		}
001023 cfbe      	RJMP _0x5B
                 _0x5C:
                 ;	}
                 _0x59:
                 ;
                 ;	return res;
001024 2fe1      	MOV  R30,R17
001025 940e 2025 	CALL __LOADLOCR4
                 _0x20A000A:
001027 9628      	ADIW R28,8
001028 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Check a sector if it is an FAT boot record                            */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
                 ;	BYTE *buf,	/* Working buffer */
                 ;	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
                 ;)
                 ;{
                 _check_fs_G000:
                 ; .FSTART _check_fs_G000
                 ;	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
001029 940e 1ff6 	CALL __PUTPARD2
                 ;	*buf -> Y+4
                 ;	sect -> Y+0
00102b 940e 1c16 	CALL SUBOPT_0x23
00102d efee      	LDI  R30,LOW(510)
00102e e0f1      	LDI  R31,HIGH(510)
00102f 940e 1b8e 	CALL SUBOPT_0xD
001031 f011      	BREQ _0x64
                 ;		return 3;
001032 e0e3      	LDI  R30,LOW(3)
001033 c029      	RJMP _0x20A0009
                 ;	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
                 _0x64:
001034 940e 1c1e 	CALL SUBOPT_0x24
001036 35e5      	CPI  R30,LOW(0xAA55)
001037 eaaa      	LDI  R26,HIGH(0xAA55)
001038 07fa      	CPC  R31,R26
001039 f011      	BREQ _0x65
                 ;		return 2;
00103a e0e2      	LDI  R30,LOW(2)
00103b c021      	RJMP _0x20A0009
                 ;
                 ;	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
                 _0x65:
00103c 940e 1c16 	CALL SUBOPT_0x23
00103e e3e6      	LDI  R30,LOW(54)
00103f e0f0      	LDI  R31,HIGH(54)
001040 940e 1b8e 	CALL SUBOPT_0xD
001042 f431      	BRNE _0x67
001043 940e 1c1e 	CALL SUBOPT_0x24
001045 34e6      	CPI  R30,LOW(0x4146)
001046 e4a1      	LDI  R26,HIGH(0x4146)
001047 07fa      	CPC  R31,R26
001048 f009      	BREQ _0x68
                 _0x67:
001049 c002      	RJMP _0x66
                 _0x68:
                 ;		return 0;
00104a e0e0      	LDI  R30,LOW(0)
00104b c011      	RJMP _0x20A0009
                 ;#if _FS_FAT32
                 ;	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
                 _0x66:
00104c 940e 1c16 	CALL SUBOPT_0x23
00104e e5e2      	LDI  R30,LOW(82)
00104f e0f0      	LDI  R31,HIGH(82)
001050 940e 1b8e 	CALL SUBOPT_0xD
001052 f431      	BRNE _0x6A
001053 940e 1c1e 	CALL SUBOPT_0x24
001055 34e6      	CPI  R30,LOW(0x4146)
001056 e4a1      	LDI  R26,HIGH(0x4146)
001057 07fa      	CPC  R31,R26
001058 f009      	BREQ _0x6B
                 _0x6A:
001059 c002      	RJMP _0x69
                 _0x6B:
                 ;		return 0;
00105a e0e0      	LDI  R30,LOW(0)
00105b c001      	RJMP _0x20A0009
                 ;#endif
                 ;	return 1;
                 _0x69:
00105c e0e1      	LDI  R30,LOW(1)
                 _0x20A0009:
00105d 9626      	ADIW R28,6
00105e 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*--------------------------------------------------------------------------
                 ;
                 ;   Public Functions
                 ;
                 ;--------------------------------------------------------------------------*/
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Mount/Unmount a Locical Drive                                         */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;FRESULT pf_mount (
                 ;	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
                 ;)
                 ;{
                 _pf_mount:
                 ; .FSTART _pf_mount
                 ;	BYTE fmt, buf[36];
                 ;	DWORD bsect, fsize, tsect, mclst;
                 ;
                 ;
                 ;	FatFs = 0;
00105f 93ba      	ST   -Y,R27
001060 93aa      	ST   -Y,R26
001061 97e4      	SBIW R28,52
001062 931a      	ST   -Y,R17
                 ;	*fs -> Y+53
                 ;	fmt -> R17
                 ;	buf -> Y+17
                 ;	bsect -> Y+13
                 ;	fsize -> Y+9
                 ;	tsect -> Y+5
                 ;	mclst -> Y+1
001063 e0e0      	LDI  R30,LOW(0)
001064 93e0 0488 	STS  _FatFs_G000,R30
001066 93e0 0489 	STS  _FatFs_G000+1,R30
                 ;	if (!fs) return FR_OK;				/* Unregister fs object */
001068 a9ed      	LDD  R30,Y+53
001069 a9fe      	LDD  R31,Y+53+1
00106a 9730      	SBIW R30,0
00106b f409      	BRNE _0x6C
00106c c16c      	RJMP _0x20A0008
                 ;
                 ;	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
                 _0x6C:
00106d d43b      	RCALL _disk_initialize
00106e 70e1      	ANDI R30,LOW(0x1)
00106f f011      	BREQ _0x6D
                 ;		return FR_NOT_READY;
001070 e0e2      	LDI  R30,LOW(2)
001071 c168      	RJMP _0x20A0007
                 ;
                 ;	/* Search FAT partition on the drive */
                 ;	bsect = 0;
                 _0x6D:
001072 e0e0      	LDI  R30,LOW(0)
                +
001073 87ed     +STD Y + 13 , R30
001074 87ee     +STD Y + 13 + 1 , R30
001075 87ef     +STD Y + 13 + 2 , R30
001076 8be8     +STD Y + 13 + 3 , R30
                 	__CLRD1S 13
                 ;	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
001077 940e 1c2b 	CALL SUBOPT_0x25
001079 940e 1c30 	CALL SUBOPT_0x26
                 ;	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
00107b 3011      	CPI  R17,1
00107c f571      	BRNE _0x6E
                 ;		/* Check a partition listed in top of the partition table */
                 ;		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
00107d 940e 1c2b 	CALL SUBOPT_0x25
00107f 940e 1c38 	CALL SUBOPT_0x27
001081 ebee      	LDI  R30,LOW(446)
001082 e0f1      	LDI  R31,HIGH(446)
001083 93fa      	ST   -Y,R31
001084 93ea      	ST   -Y,R30
001085 e1a0      	LDI  R26,LOW(16)
001086 940e 1b67 	CALL SUBOPT_0x7
001088 f011      	BREQ _0x6F
                 ;			fmt = 3;
001089 e013      	LDI  R17,LOW(3)
                 ;		} else {
00108a c020      	RJMP _0x70
                 _0x6F:
                 ;			if (buf[4]) {					/* Is the partition existing? */
00108b 89ed      	LDD  R30,Y+21
00108c 30e0      	CPI  R30,0
00108d f0e9      	BREQ _0x71
                 ;				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
00108e 01fe      	MOVW R30,R28
00108f 967c      	ADIW R30,28
001090 81e0      	LD   R30,Z
001091 940e 1b91 	CALL SUBOPT_0xE
001093 01fe      	MOVW R30,R28
001094 967b      	ADIW R30,27
001095 81e0      	LD   R30,Z
001096 940e 1b9c 	CALL SUBOPT_0xF
001098 01df      	MOVW R26,R30
001099 01cb      	MOVW R24,R22
00109a 01fe      	MOVW R30,R28
00109b 967a      	ADIW R30,26
00109c 940e 1c3f 	CALL SUBOPT_0x28
00109e 01df      	MOVW R26,R30
00109f 01cb      	MOVW R24,R22
0010a0 8de9      	LDD  R30,Y+25
0010a1 940e 1ba9 	CALL SUBOPT_0x11
                +
0010a3 87ed     +STD Y + 13 , R30
0010a4 87fe     +STD Y + 13 + 1 , R31
0010a5 876f     +STD Y + 13 + 2 , R22
0010a6 8b78     +STD Y + 13 + 3 , R23
                 	__PUTD1S 13
                 ;				fmt = check_fs(buf, bsect);	/* Check the partition */
0010a7 940e 1c2b 	CALL SUBOPT_0x25
0010a9 940e 1c30 	CALL SUBOPT_0x26
                 ;			}
                 ;		}
                 _0x71:
                 _0x70:
                 ;	}
                 ;	if (fmt == 3) return FR_DISK_ERR;
                 _0x6E:
0010ab 3013      	CPI  R17,3
0010ac f411      	BRNE _0x72
0010ad e0e1      	LDI  R30,LOW(1)
0010ae c12b      	RJMP _0x20A0007
                 ;	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
                 _0x72:
0010af 3010      	CPI  R17,0
0010b0 f011      	BREQ _0x73
0010b1 e0e7      	LDI  R30,LOW(7)
0010b2 c127      	RJMP _0x20A0007
                 ;
                 ;	/* Initialize the file system object */
                 ;	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
                 _0x73:
0010b3 940e 1c2b 	CALL SUBOPT_0x25
0010b5 940e 1c38 	CALL SUBOPT_0x27
0010b7 e0ed      	LDI  R30,LOW(13)
0010b8 e0f0      	LDI  R31,HIGH(13)
0010b9 93fa      	ST   -Y,R31
0010ba 93ea      	ST   -Y,R30
0010bb e2a4      	LDI  R26,LOW(36)
0010bc 940e 1b67 	CALL SUBOPT_0x7
0010be f011      	BREQ _0x74
0010bf e0e1      	LDI  R30,LOW(1)
0010c0 c119      	RJMP _0x20A0007
                 ;
                 ;	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
                 _0x74:
0010c1 01fe      	MOVW R30,R28
0010c2 96b7      	ADIW R30,39
0010c3 940e 1c42 	CALL SUBOPT_0x29
0010c5 01fe      	MOVW R30,R28
0010c6 96b7      	ADIW R30,39
0010c7 973d      	SBIW R30,13
0010c8 81e0      	LD   R30,Z
0010c9 940e 1c10 	CALL SUBOPT_0x22
0010cb 940e 1c47 	CALL SUBOPT_0x2A
                 ;	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
0010cd 940e 1c4c 	CALL SUBOPT_0x2B
0010cf 940e 2008 	CALL __CPD10
0010d1 f4e9      	BRNE _0x75
0010d2 01fe      	MOVW R30,R28
0010d3 96f5      	ADIW R30,53
0010d4 973a      	SBIW R30,10
0010d5 81e0      	LD   R30,Z
0010d6 940e 1b91 	CALL SUBOPT_0xE
0010d8 01fe      	MOVW R30,R28
0010d9 96f5      	ADIW R30,53
0010da 973b      	SBIW R30,11
0010db 81e0      	LD   R30,Z
0010dc 940e 1b9c 	CALL SUBOPT_0xF
0010de 01df      	MOVW R26,R30
0010df 01cb      	MOVW R24,R22
0010e0 01fe      	MOVW R30,R28
0010e1 96f5      	ADIW R30,53
0010e2 973c      	SBIW R30,12
0010e3 940e 1c3f 	CALL SUBOPT_0x28
0010e5 01df      	MOVW R26,R30
0010e6 01cb      	MOVW R24,R22
0010e7 01fe      	MOVW R30,R28
0010e8 96f5      	ADIW R30,53
0010e9 973d      	SBIW R30,13
0010ea 81e0      	LD   R30,Z
0010eb 940e 1ba9 	CALL SUBOPT_0x11
0010ed 940e 1c47 	CALL SUBOPT_0x2A
                 ;
                 ;	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
                 _0x75:
0010ef 89ec      	LDD  R30,Y+20
0010f0 e0f0      	LDI  R31,0
0010f1 940e 1c51 	CALL SUBOPT_0x2C
0010f3 940e 1f30 	CALL __CWD1
0010f5 940e 1f42 	CALL __MULD12U
0010f7 940e 1c47 	CALL SUBOPT_0x2A
                 ;	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
0010f9 01fe      	MOVW R30,R28
0010fa 967f      	ADIW R30,31
0010fb 940e 1c42 	CALL SUBOPT_0x29
0010fd 940e 1c56 	CALL SUBOPT_0x2D
                +
0010ff 85ad     +LDD R26 , Y + 13
001100 85be     +LDD R27 , Y + 13 + 1
001101 858f     +LDD R24 , Y + 13 + 2
001102 8998     +LDD R25 , Y + 13 + 3
                 	__GETD2S 13
001103 940e 1b75 	CALL SUBOPT_0x9
                +
001105 a9ad     +LDD R26 , Y + 53
001106 a9be     +LDD R27 , Y + 53 + 1
001107 961c     +ADIW R26 , 12
001108 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 53,12
                 ;	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
00110a 89e9      	LDD  R30,Y+17
                +
00110b a9ad     +LDD R26 , Y + 53
00110c a9be     +LDD R27 , Y + 53 + 1
00110d 9611     +ADIW R26 , 1
00110e 93ec     +ST X , R30
                 	__PUTB1SNS 53,1
                 ;	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
00110f 01fe      	MOVW R30,R28
001110 96b2      	ADIW R30,34
001111 940e 1c42 	CALL SUBOPT_0x29
001113 01fe      	MOVW R30,R28
001114 96b2      	ADIW R30,34
001115 973d      	SBIW R30,13
001116 81e0      	LD   R30,Z
001117 e0f0      	LDI  R31,0
001118 2bea      	OR   R30,R26
001119 2bfb      	OR   R31,R27
                +
00111a a9ad     +LDD R26 , Y + 53
00111b a9be     +LDD R27 , Y + 53 + 1
00111c 9614     +ADIW R26 , 4
00111d 93ed     +ST X + , R30
00111e 93fc     +ST X , R31
                 	__PUTW1SNS 53,4
                 ;	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
00111f 01fe      	MOVW R30,R28
001120 96b4      	ADIW R30,36
001121 940e 1c42 	CALL SUBOPT_0x29
001123 01fe      	MOVW R30,R28
001124 96b4      	ADIW R30,36
001125 973d      	SBIW R30,13
001126 81e0      	LD   R30,Z
001127 940e 1c10 	CALL SUBOPT_0x22
                +
001129 83ed     +STD Y + 5 , R30
00112a 83fe     +STD Y + 5 + 1 , R31
00112b 836f     +STD Y + 5 + 2 , R22
00112c 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                 ;	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
00112d 940e 2008 	CALL __CPD10
00112f f4d9      	BRNE _0x76
001130 01fe      	MOVW R30,R28
001131 96f1      	ADIW R30,49
001132 973a      	SBIW R30,10
001133 81e0      	LD   R30,Z
001134 940e 1b91 	CALL SUBOPT_0xE
001136 01fe      	MOVW R30,R28
001137 96f1      	ADIW R30,49
001138 973b      	SBIW R30,11
001139 81e0      	LD   R30,Z
00113a 940e 1b9c 	CALL SUBOPT_0xF
00113c 940e 1c5e 	CALL SUBOPT_0x2E
00113e 973c      	SBIW R30,12
00113f 940e 1c3f 	CALL SUBOPT_0x28
001141 940e 1c5e 	CALL SUBOPT_0x2E
001143 973d      	SBIW R30,13
001144 81e0      	LD   R30,Z
001145 940e 1ba9 	CALL SUBOPT_0x11
                +
001147 83ed     +STD Y + 5 , R30
001148 83fe     +STD Y + 5 + 1 , R31
001149 836f     +STD Y + 5 + 2 , R22
00114a 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                 ;	mclst = (tsect						/* Last cluster# + 1 */
                 _0x76:
                 ;		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
                 ;		) / fs->csize + 2;
00114b 01fe      	MOVW R30,R28
00114c 967f      	ADIW R30,31
00114d 940e 1c42 	CALL SUBOPT_0x29
00114f 940e 1c56 	CALL SUBOPT_0x2D
                +
001151 81ad     +LDD R26 , Y + 5
001152 81be     +LDD R27 , Y + 5 + 1
001153 818f     +LDD R24 , Y + 5 + 2
001154 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
001155 2766      	CLR  R22
001156 2777      	CLR  R23
001157 940e 1ffb 	CALL __SWAPD12
001159 940e 1ed0 	CALL __SUBD12
00115b 940e 1c51 	CALL SUBOPT_0x2C
00115d 940e 1ed0 	CALL __SUBD12
00115f 937f      	PUSH R23
001160 936f      	PUSH R22
001161 93ff      	PUSH R31
001162 93ef      	PUSH R30
001163 940e 1c63 	CALL SUBOPT_0x2F
001165 91af      	POP  R26
001166 91bf      	POP  R27
001167 918f      	POP  R24
001168 919f      	POP  R25
001169 2766      	CLR  R22
00116a 2777      	CLR  R23
00116b 940e 1ed5 	CALL __SUBD21
00116d a9ed      	LDD  R30,Y+53
00116e a9fe      	LDD  R31,Y+53+1
00116f 940e 1c6b 	CALL SUBOPT_0x30
001171 940e 1f7f 	CALL __DIVD21U
                +
001173 5fee     +SUBI R30 , LOW ( - 2 )
001174 4fff     +SBCI R31 , HIGH ( - 2 )
001175 4f6f     +SBCI R22 , BYTE3 ( - 2 )
001176 4f7f     +SBCI R23 , BYTE4 ( - 2 )
                 	__ADDD1N 2
                +
001177 83e9     +STD Y + 1 , R30
001178 83fa     +STD Y + 1 + 1 , R31
001179 836b     +STD Y + 1 + 2 , R22
00117a 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ;	fs->max_clust = (CLUST)mclst;
                +
00117b a9ad     +LDD R26 , Y + 53
00117c a9be     +LDD R27 , Y + 53 + 1
00117d 9618     +ADIW R26 , 8
00117e 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 53,8
                 ;
                 ;	fmt = FS_FAT12;							/* Determine the FAT sub type */
001180 e011      	LDI  R17,LOW(1)
                 ;	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
                +
001181 81a9     +LDD R26 , Y + 1
001182 81ba     +LDD R27 , Y + 1 + 1
001183 818b     +LDD R24 , Y + 1 + 2
001184 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
001185 3fa7     +CPI R26 , LOW ( 0xFF7 )
001186 e0ef     +LDI R30 , HIGH ( 0xFF7 )
001187 07be     +CPC R27 , R30
001188 e0e0     +LDI R30 , BYTE3 ( 0xFF7 )
001189 078e     +CPC R24 , R30
00118a e0e0     +LDI R30 , BYTE4 ( 0xFF7 )
00118b 079e     +CPC R25 , R30
                 	__CPD2N 0xFF7
00118c f008      	BRLO _0x77
00118d e012      	LDI  R17,LOW(2)
                 ;	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
                 _0x77:
                +
00118e 81a9     +LDD R26 , Y + 1
00118f 81ba     +LDD R27 , Y + 1 + 1
001190 818b     +LDD R24 , Y + 1 + 2
001191 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                +
001192 3fa7     +CPI R26 , LOW ( 0xFFF7 )
001193 efef     +LDI R30 , HIGH ( 0xFFF7 )
001194 07be     +CPC R27 , R30
001195 e0e0     +LDI R30 , BYTE3 ( 0xFFF7 )
001196 078e     +CPC R24 , R30
001197 e0e0     +LDI R30 , BYTE4 ( 0xFFF7 )
001198 079e     +CPC R25 , R30
                 	__CPD2N 0xFFF7
001199 f008      	BRLO _0x78
                 ;#if _FS_FAT32
                 ;		fmt = FS_FAT32;
00119a e013      	LDI  R17,LOW(3)
                 ;#else
                 ;		return FR_NO_FILESYSTEM;
                 ;#endif
                 ;
                 ;	fs->fs_type = fmt;		/* FAT sub-type */
                 _0x78:
00119b a9ad      	LDD  R26,Y+53
00119c a9be      	LDD  R27,Y+53+1
00119d 931c      	ST   X,R17
                 ;#if _FS_FAT32
                 ;	if (fmt == FS_FAT32)
00119e 3013      	CPI  R17,3
00119f f4a1      	BRNE _0x79
                 ;		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
0011a0 01fe      	MOVW R30,R28
0011a1 96f3      	ADIW R30,51
0011a2 81e0      	LD   R30,Z
0011a3 940e 1b91 	CALL SUBOPT_0xE
0011a5 01fe      	MOVW R30,R28
0011a6 96f2      	ADIW R30,50
0011a7 81e0      	LD   R30,Z
0011a8 940e 1b9c 	CALL SUBOPT_0xF
0011aa 940e 1c5e 	CALL SUBOPT_0x2E
0011ac 940e 1c3f 	CALL SUBOPT_0x28
0011ae 01df      	MOVW R26,R30
0011af 01cb      	MOVW R24,R22
0011b0 a9e8      	LDD  R30,Y+48
0011b1 940e 1ba9 	CALL SUBOPT_0x11
0011b3 c002      	RJMP _0x2E7
                 ;	else
                 _0x79:
                 ;#endif
                 ;		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
0011b4 940e 1c70 	CALL SUBOPT_0x31
                 _0x2E7:
                +
0011b6 a9ad     +LDD R26 , Y + 53
0011b7 a9be     +LDD R27 , Y + 53 + 1
0011b8 9650     +ADIW R26 , 16
0011b9 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 53,16
                 ;	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
0011bb 940e 1c70 	CALL SUBOPT_0x31
0011bd 937f      	PUSH R23
0011be 936f      	PUSH R22
0011bf 93ff      	PUSH R31
0011c0 93ef      	PUSH R30
0011c1 940e 1c63 	CALL SUBOPT_0x2F
0011c3 91af      	POP  R26
0011c4 91bf      	POP  R27
0011c5 918f      	POP  R24
0011c6 919f      	POP  R25
0011c7 940e 1b75 	CALL SUBOPT_0x9
                +
0011c9 a9ad     +LDD R26 , Y + 53
0011ca a9be     +LDD R27 , Y + 53 + 1
0011cb 9654     +ADIW R26 , 20
0011cc 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 53,20
                 ;
                 ;	fs->flag = 0;
0011ce a9ad      	LDD  R26,Y+53
0011cf a9be      	LDD  R27,Y+53+1
0011d0 9612      	ADIW R26,2
0011d1 e0e0      	LDI  R30,LOW(0)
0011d2 93ec      	ST   X,R30
                 ;	FatFs = fs;
0011d3 a9ed      	LDD  R30,Y+53
0011d4 a9fe      	LDD  R31,Y+53+1
0011d5 93e0 0488 	STS  _FatFs_G000,R30
0011d7 93f0 0489 	STS  _FatFs_G000+1,R31
                 ;
                 ;	return FR_OK;
                 _0x20A0008:
0011d9 e0e0      	LDI  R30,LOW(0)
                 _0x20A0007:
0011da 8118      	LDD  R17,Y+0
0011db 96e7      	ADIW R28,55
0011dc 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Open or Create a File                                                 */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;FRESULT pf_open (
                 ;	const char *path	/* Pointer to the file name */
                 ;)
                 ;{
                 _pf_open:
                 ; .FSTART _pf_open
                 ;	FRESULT res;
                 ;	DIR dj;
                 ;	BYTE sp[12]={0}, dir[32]={0};
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	if (!fs)						/* Check file system */
0011dd 93ba      	ST   -Y,R27
0011de 93aa      	ST   -Y,R26
0011df 97ec      	SBIW R28,60
0011e0 e28c      	LDI  R24,44
0011e1 e0a0      	LDI  R26,LOW(0)
0011e2 e0b0      	LDI  R27,HIGH(0)
0011e3 e7e4      	LDI  R30,LOW(_0x7B*2)
0011e4 e1f8      	LDI  R31,HIGH(_0x7B*2)
0011e5 940e 202a 	CALL __INITLOCB
0011e7 940e 1bcd 	CALL SUBOPT_0x18
                 ;	*path -> Y+64
                 ;	res -> R17
                 ;	dj -> Y+48
                 ;	sp -> Y+36
                 ;	dir -> Y+4
                 ;	*fs -> R18,R19
0011e9 2e02      	MOV  R0,R18
0011ea 2a03      	OR   R0,R19
0011eb f411      	BRNE _0x7C
                 ;		return FR_NOT_ENABLED;
0011ec e0e6      	LDI  R30,LOW(6)
0011ed c068      	RJMP _0x20A0006
                 ;
                 ;	fs->flag = 0;
                 _0x7C:
0011ee 01d9      	MOVW R26,R18
0011ef 9612      	ADIW R26,2
0011f0 e0e0      	LDI  R30,LOW(0)
0011f1 93ec      	ST   X,R30
                 ;	fs->buf = dir;
0011f2 01fe      	MOVW R30,R28
0011f3 9634      	ADIW R30,4
                +
0011f4 01d9     +MOVW R26 , R18
0011f5 9616     +ADIW R26 , 6
0011f6 93ed     +ST X + , R30
0011f7 93fc     +ST X , R31
                 	__PUTW1RNS 18,6
                 ;	dj.fn = sp;
0011f8 01fe      	MOVW R30,R28
0011f9 96b4      	ADIW R30,36
0011fa abea      	STD  Y+50,R30
0011fb abfb      	STD  Y+50+1,R31
                 ;	res = follow_path(&dj, path);	/* Follow the file path */
0011fc 01fe      	MOVW R30,R28
0011fd 96f0      	ADIW R30,48
0011fe 93fa      	ST   -Y,R31
0011ff 93ea      	ST   -Y,R30
                +
001200 01de     +MOVW R26 , R28
001201 5bae     +SUBI R26 , LOW ( - 66 )
001202 4fbf     +SBCI R27 , HIGH ( - 66 )
001203 900d     +LD R0 , X +
001204 91bc     +LD R27 , X
001205 2da0     +MOV R26 , R0
                 	__GETW2SX 66
001206 ddaf      	RCALL _follow_path_G000
001207 2f1e      	MOV  R17,R30
                 ;	if (res != FR_OK) return res;	/* Follow failed */
001208 3010      	CPI  R17,0
001209 f009      	BREQ _0x7D
00120a c04b      	RJMP _0x20A0006
                 ;	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
                 _0x7D:
00120b 81ec      	LDD  R30,Y+4
00120c 30e0      	CPI  R30,0
00120d f019      	BREQ _0x7F
00120e 85ef      	LDD  R30,Y+15
00120f 71e0      	ANDI R30,LOW(0x10)
001210 f011      	BREQ _0x7E
                 _0x7F:
                 ;		return FR_NO_FILE;
001211 e0e3      	LDI  R30,LOW(3)
001212 c043      	RJMP _0x20A0006
                 ;
                 ;	fs->org_clust =						/* File start cluster */
                 _0x7E:
                 ;#if _FS_FAT32
                 ;		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
                 ;#endif
                 ;		LD_WORD(dir+DIR_FstClusLO);
001213 01fe      	MOVW R30,R28
001214 9679      	ADIW R30,25
001215 81f0      	LD   R31,Z
001216 e0e0      	LDI  R30,LOW(0)
001217 01df      	MOVW R26,R30
001218 8de8      	LDD  R30,Y+24
001219 940e 1c10 	CALL SUBOPT_0x22
00121b 940e 1f2b 	CALL __LSLD16
00121d 937f      	PUSH R23
00121e 936f      	PUSH R22
00121f 93ff      	PUSH R31
001220 93ef      	PUSH R30
001221 01fe      	MOVW R30,R28
001222 967f      	ADIW R30,31
001223 81f0      	LD   R31,Z
001224 e0e0      	LDI  R30,LOW(0)
001225 01df      	MOVW R26,R30
001226 8dee      	LDD  R30,Y+30
001227 e0f0      	LDI  R31,0
001228 2bea      	OR   R30,R26
001229 2bfb      	OR   R31,R27
00122a 91af      	POP  R26
00122b 91bf      	POP  R27
00122c 918f      	POP  R24
00122d 919f      	POP  R25
00122e 940e 1ba4 	CALL SUBOPT_0x10
                +
001230 01d9     +MOVW R26 , R18
001231 9690     +ADIW R26 , 32
001232 940e 1fd3+CALL __PUTDP1
                 	__PUTD1RNS 18,32
                 ;	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
001234 01fe      	MOVW R30,R28
001235 96b3      	ADIW R30,35
001236 81e0      	LD   R30,Z
001237 940e 1b91 	CALL SUBOPT_0xE
001239 01fe      	MOVW R30,R28
00123a 96b2      	ADIW R30,34
00123b 81e0      	LD   R30,Z
00123c 940e 1b9c 	CALL SUBOPT_0xF
00123e 01df      	MOVW R26,R30
00123f 01cb      	MOVW R24,R22
001240 01fe      	MOVW R30,R28
001241 96b1      	ADIW R30,33
001242 940e 1c3f 	CALL SUBOPT_0x28
001244 01df      	MOVW R26,R30
001245 01cb      	MOVW R24,R22
001246 a1e8      	LDD  R30,Y+32
001247 940e 1ba9 	CALL SUBOPT_0x11
                +
001249 01d9     +MOVW R26 , R18
00124a 965c     +ADIW R26 , 28
00124b 940e 1fd3+CALL __PUTDP1
                 	__PUTD1RNS 18,28
                 ;	fs->fptr = 0;						/* File pointer */
00124d 01d9      	MOVW R26,R18
00124e 9658      	ADIW R26,24
00124f 940e 1c04 	CALL SUBOPT_0x20
                 ;	fs->flag = FA_OPENED;
001251 01d9      	MOVW R26,R18
001252 9612      	ADIW R26,2
001253 e0e1      	LDI  R30,LOW(1)
001254 93ec      	ST   X,R30
                 ;
                 ;	return FR_OK;
001255 e0e0      	LDI  R30,LOW(0)
                 _0x20A0006:
001256 940e 2025 	CALL __LOADLOCR4
001258 96ef      	ADIW R28,63
001259 9623      	ADIW R28,3
00125a 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Read File                                                             */
                 ;/*-----------------------------------------------------------------------*/
                 ;#if _USE_READ
                 ;
                 ;FRESULT pf_read (
                 ;	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
                 ;	WORD btr,		/* Number of bytes to read */
                 ;	WORD* br		/* Pointer to number of bytes read */
                 ;)
                 ;{
                 _pf_read:
                 ; .FSTART _pf_read
                 ;	DRESULT dr;
                 ;	CLUST clst;
                 ;	DWORD sect, remain;
                 ;	BYTE *rbuff = buff;
                 ;	WORD rcnt;
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	*br = 0;
00125b 93ba      	ST   -Y,R27
00125c 93aa      	ST   -Y,R26
00125d 972e      	SBIW R28,14
00125e 940e 201c 	CALL __SAVELOCR6
                 ;	*buff -> Y+24
                 ;	btr -> Y+22
                 ;	*br -> Y+20
                 ;	dr -> R17
                 ;	clst -> Y+16
                 ;	sect -> Y+12
                 ;	remain -> Y+8
                 ;	*rbuff -> R18,R19
                 ;	rcnt -> R20,R21
                 ;	*fs -> Y+6
                +
001260 8d28     +LDD R18 , Y + 24
001261 8d39     +LDD R19 , Y + 24 + 1
                 	__GETWRS 18,19,24
001262 940e 1b38 	CALL SUBOPT_0x1
001264 83ee      	STD  Y+6,R30
001265 83ff      	STD  Y+6+1,R31
001266 89ac      	LDD  R26,Y+20
001267 89bd      	LDD  R27,Y+20+1
001268 e0e0      	LDI  R30,LOW(0)
001269 e0f0      	LDI  R31,HIGH(0)
00126a 93ed      	ST   X+,R30
00126b 93fc      	ST   X,R31
                 ;	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
00126c 81ee      	LDD  R30,Y+6
00126d 81ff      	LDD  R31,Y+6+1
00126e 9730      	SBIW R30,0
00126f f411      	BRNE _0x81
001270 e0e6      	LDI  R30,LOW(6)
001271 c0dc      	RJMP _0x20A0005
                 ;	if (!(fs->flag & FA_OPENED))		/* Check if opened */
                 _0x81:
001272 81ee      	LDD  R30,Y+6
001273 81ff      	LDD  R31,Y+6+1
001274 81a2      	LDD  R26,Z+2
001275 70a1      	ANDI R26,LOW(0x1)
001276 f411      	BRNE _0x82
                 ;		return FR_NOT_OPENED;
001277 e0e5      	LDI  R30,LOW(5)
001278 c0d5      	RJMP _0x20A0005
                 ;
                 ;	remain = fs->fsize - fs->fptr;
                 _0x82:
001279 81ee      	LDD  R30,Y+6
00127a 81ff      	LDD  R31,Y+6+1
                +
00127b 8da4     +LDD R26 , Z + 28
00127c 8db5     +LDD R27 , Z + 28 + 1
00127d 8d86     +LDD R24 , Z + 28 + 2
00127e 8d97     +LDD R25 , Z + 28 + 3
                 	__GETD2Z 28
00127f 939f      	PUSH R25
001280 938f      	PUSH R24
001281 93bf      	PUSH R27
001282 93af      	PUSH R26
001283 940e 1c77 	CALL SUBOPT_0x32
001285 91ef      	POP  R30
001286 91ff      	POP  R31
001287 916f      	POP  R22
001288 917f      	POP  R23
001289 940e 1ed0 	CALL __SUBD12
                +
00128b 87e8     +STD Y + 8 , R30
00128c 87f9     +STD Y + 8 + 1 , R31
00128d 876a     +STD Y + 8 + 2 , R22
00128e 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ;	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
00128f 89ae      	LDD  R26,Y+22
001290 89bf      	LDD  R27,Y+22+1
001291 2788      	CLR  R24
001292 2799      	CLR  R25
001293 940e 2012 	CALL __CPD12
001295 f420      	BRSH _0x83
001296 85e8      	LDD  R30,Y+8
001297 85f9      	LDD  R31,Y+8+1
001298 8bee      	STD  Y+22,R30
001299 8bff      	STD  Y+22+1,R31
                 ;
                 ;	while (btr)	{									/* Repeat until all data transferred */
                 _0x83:
                 _0x84:
00129a 89ee      	LDD  R30,Y+22
00129b 89ff      	LDD  R31,Y+22+1
00129c 9730      	SBIW R30,0
00129d f409      	BRNE PC+2
00129e c0a7      	RJMP _0x86
                 ;		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
00129f 940e 1c77 	CALL SUBOPT_0x32
0012a1 01fd      	MOVW R30,R26
0012a2 01bc      	MOVW R22,R24
0012a3 70f1      	ANDI R31,HIGH(0x1FF)
0012a4 9730      	SBIW R30,0
0012a5 f009      	BREQ PC+2
0012a6 c051      	RJMP _0x87
                 ;			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
0012a7 940e 1c77 	CALL SUBOPT_0x32
0012a9 940e 1c7e 	CALL SUBOPT_0x33
0012ab 01df      	MOVW R26,R30
0012ac 01cb      	MOVW R24,R22
0012ad 81ee      	LDD  R30,Y+6
0012ae 81ff      	LDD  R31,Y+6+1
0012af 940e 1c6b 	CALL SUBOPT_0x30
0012b1 940e 1fb2 	CALL __MODD21U
0012b3 940e 2008 	CALL __CPD10
0012b5 f541      	BRNE _0x88
                 ;				clst = (fs->fptr == 0) ?			/* On the top of the file? */
                 ;					fs->org_clust : get_fat(fs->curr_clust);
0012b6 940e 1c77 	CALL SUBOPT_0x32
0012b8 940e 200c 	CALL __CPD02
0012ba f431      	BRNE _0x89
0012bb 81ae      	LDD  R26,Y+6
0012bc 81bf      	LDD  R27,Y+6+1
0012bd 9690      	ADIW R26,32
0012be 940e 1fc8 	CALL __GETD1P
0012c0 c003      	RJMP _0x8A
                 _0x89:
0012c1 940e 1c85 	CALL SUBOPT_0x34
0012c3 da61      	RCALL _get_fat_G000
                 _0x8A:
                +
0012c4 8be8     +STD Y + 16 , R30
0012c5 8bf9     +STD Y + 16 + 1 , R31
0012c6 8b6a     +STD Y + 16 + 2 , R22
0012c7 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
                 ;				if (clst <= 1) goto fr_abort;
                +
0012c8 89a8     +LDD R26 , Y + 16
0012c9 89b9     +LDD R27 , Y + 16 + 1
0012ca 898a     +LDD R24 , Y + 16 + 2
0012cb 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
0012cc 940e 1b42 	CALL SUBOPT_0x3
0012ce f408      	BRSH _0x8C
0012cf c078      	RJMP _0x8D
                 ;				fs->curr_clust = clst;				/* Update current cluster */
                 _0x8C:
                +
0012d0 89e8     +LDD R30 , Y + 16
0012d1 89f9     +LDD R31 , Y + 16 + 1
0012d2 896a     +LDD R22 , Y + 16 + 2
0012d3 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0012d4 81ae     +LDD R26 , Y + 6
0012d5 81bf     +LDD R27 , Y + 6 + 1
0012d6 9694     +ADIW R26 , 36
0012d7 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 6,36
                 ;				fs->csect = 0;						/* Reset sector offset in the cluster */
0012d9 81ae      	LDD  R26,Y+6
0012da 81bf      	LDD  R27,Y+6+1
0012db 9613      	ADIW R26,3
0012dc e0e0      	LDI  R30,LOW(0)
0012dd 93ec      	ST   X,R30
                 ;			}
                 ;			sect = clust2sect(fs->curr_clust);		/* Get current sector */
                 _0x88:
0012de 940e 1c85 	CALL SUBOPT_0x34
0012e0 db1a      	RCALL _clust2sect_G000
                +
0012e1 87ec     +STD Y + 12 , R30
0012e2 87fd     +STD Y + 12 + 1 , R31
0012e3 876e     +STD Y + 12 + 2 , R22
0012e4 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ;			if (!sect) goto fr_abort;
0012e5 940e 2008 	CALL __CPD10
0012e7 f409      	BRNE _0x8E
0012e8 c05f      	RJMP _0x8D
                 ;			fs->dsect = sect + fs->csect++;
                 _0x8E:
0012e9 81ae      	LDD  R26,Y+6
0012ea 81bf      	LDD  R27,Y+6+1
0012eb 940e 1c8c 	CALL SUBOPT_0x35
0012ed 940e 1b3d 	CALL SUBOPT_0x2
0012ef 940e 1f30 	CALL __CWD1
0012f1 940e 1ecb 	CALL __ADDD12
                +
0012f3 81ae     +LDD R26 , Y + 6
0012f4 81bf     +LDD R27 , Y + 6 + 1
0012f5 9698     +ADIW R26 , 40
0012f6 940e 1fd3+CALL __PUTDP1
                 	__PUTD1SNS 6,40
                 ;		}
                 ;		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
                 _0x87:
0012f8 81ee      	LDD  R30,Y+6
0012f9 81ff      	LDD  R31,Y+6+1
0012fa 8da0      	LDD  R26,Z+24
0012fb 8db1      	LDD  R27,Z+25
0012fc 01fd      	MOVW R30,R26
0012fd 70f1      	ANDI R31,HIGH(0x1FF)
0012fe e0a0      	LDI  R26,LOW(512)
0012ff e0b2      	LDI  R27,HIGH(512)
001300 1bae      	SUB  R26,R30
001301 0bbf      	SBC  R27,R31
001302 01ad      	MOVW R20,R26
                 ;		if (rcnt > btr) rcnt = btr;
001303 89ee      	LDD  R30,Y+22
001304 89ff      	LDD  R31,Y+22+1
001305 17e4      	CP   R30,R20
001306 07f5      	CPC  R31,R21
001307 f410      	BRSH _0x8F
                +
001308 894e     +LDD R20 , Y + 22
001309 895f     +LDD R21 , Y + 22 + 1
                 	__GETWRS 20,21,22
                 ;		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
                 _0x8F:
00130a 8de8      	LDD  R30,Y+24
00130b 8df9      	LDD  R31,Y+24+1
00130c 9730      	SBIW R30,0
00130d f419      	BRNE _0x90
00130e e0e0      	LDI  R30,LOW(0)
00130f e0f0      	LDI  R31,HIGH(0)
001310 c001      	RJMP _0x91
                 _0x90:
001311 01f9      	MOVW R30,R18
                 _0x91:
001312 93fa      	ST   -Y,R31
001313 93ea      	ST   -Y,R30
001314 85e8      	LDD  R30,Y+8
001315 85f9      	LDD  R31,Y+8+1
                +
001316 a5a0     +LDD R26 , Z + 40
001317 a5b1     +LDD R27 , Z + 40 + 1
001318 a582     +LDD R24 , Z + 40 + 2
001319 a593     +LDD R25 , Z + 40 + 3
                 	__GETD2Z 40
00131a 940e 1ff6 	CALL __PUTPARD2
00131c 85ac      	LDD  R26,Y+12
00131d 85bd      	LDD  R27,Y+12+1
00131e 9658      	ADIW R26,24
00131f 940e 1fc4 	CALL __GETW1P
001321 70f1      	ANDI R31,HIGH(0x1FF)
001322 93fa      	ST   -Y,R31
001323 93ea      	ST   -Y,R30
001324 01da      	MOVW R26,R20
001325 d214      	RCALL _disk_readp
001326 2f1e      	MOV  R17,R30
                 ;		if (dr) goto fr_abort;
001327 3010      	CPI  R17,0
001328 f4f9      	BRNE _0x8D
                 ;		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
001329 81ee      	LDD  R30,Y+6
00132a 81ff      	LDD  R31,Y+6+1
00132b 940e 1c93 	CALL SUBOPT_0x36
00132d 01df      	MOVW R26,R30
00132e 01cb      	MOVW R24,R22
00132f 01fa      	MOVW R30,R20
001330 940e 1b75 	CALL SUBOPT_0x9
001332 01d0      	MOVW R26,R0
001333 940e 1fd3 	CALL __PUTDP1
                +
001335 0f24     +ADD R18 , R20
001336 1f35     +ADC R19 , R21
                 	__ADDWRR 18,19,20,21
                 ;		btr -= rcnt; *br += rcnt;
001337 89ee      	LDD  R30,Y+22
001338 89ff      	LDD  R31,Y+22+1
001339 1be4      	SUB  R30,R20
00133a 0bf5      	SBC  R31,R21
00133b 8bee      	STD  Y+22,R30
00133c 8bff      	STD  Y+22+1,R31
00133d 89ac      	LDD  R26,Y+20
00133e 89bd      	LDD  R27,Y+20+1
00133f 91ed      	LD   R30,X+
001340 91fd      	LD   R31,X+
001341 0fe4      	ADD  R30,R20
001342 1ff5      	ADC  R31,R21
001343 93fe      	ST   -X,R31
001344 93ee      	ST   -X,R30
                 ;	}
001345 cf54      	RJMP _0x84
                 _0x86:
                 ;
                 ;	return FR_OK;
001346 e0e0      	LDI  R30,LOW(0)
001347 c006      	RJMP _0x20A0005
                 ;
                 ;fr_abort:
                 _0x8D:
                 ;	fs->flag = 0;
001348 81ae      	LDD  R26,Y+6
001349 81bf      	LDD  R27,Y+6+1
00134a 9612      	ADIW R26,2
00134b e0e0      	LDI  R30,LOW(0)
00134c 93ec      	ST   X,R30
                 ;	return FR_DISK_ERR;
00134d e0e1      	LDI  R30,LOW(1)
                 _0x20A0005:
00134e 940e 2023 	CALL __LOADLOCR6
001350 966a      	ADIW R28,26
001351 9508      	RET
                 ;}
                 ; .FEND
                 ;#endif
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Write File                                                            */
                 ;/*-----------------------------------------------------------------------*/
                 ;#if _USE_WRITE
                 ;
                 ;FRESULT pf_write (
                 ;	const void* buff,	/* Pointer to the data to be written */
                 ;	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
                 ;	WORD* bw			/* Pointer to number of bytes written */
                 ;)
                 ;{
                 ;	CLUST clst;
                 ;	DWORD sect, remain;
                 ;	const BYTE *p = buff;
                 ;	WORD wcnt;
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	*bw = 0;
                 ;	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
                 ;	if (!(fs->flag & FA_OPENED))		/* Check if opened */
                 ;		return FR_NOT_OPENED;
                 ;
                 ;	if (!btw) {		/* Finalize request */
                 ;		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
                 ;		fs->flag &= ~FA__WIP;
                 ;		return FR_OK;
                 ;	} else {		/* Write data request */
                 ;		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
                 ;			fs->fptr &= 0xFFFFFE00;
                 ;	}
                 ;	remain = fs->fsize - fs->fptr;
                 ;	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
                 ;
                 ;	while (btw)	{									/* Repeat until all data transferred */
                 ;		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
                 ;			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
                 ;				clst = (fs->fptr == 0) ?			/* On the top of the file? */
                 ;					fs->org_clust : get_fat(fs->curr_clust);
                 ;				if (clst <= 1) goto fw_abort;
                 ;				fs->curr_clust = clst;				/* Update current cluster */
                 ;				fs->csect = 0;						/* Reset sector offset in the cluster */
                 ;			}
                 ;			sect = clust2sect(fs->curr_clust);		/* Get current sector */
                 ;			if (!sect) goto fw_abort;
                 ;			fs->dsect = sect + fs->csect++;
                 ;			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
                 ;			fs->flag |= FA__WIP;
                 ;		}
                 ;		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
                 ;		if (wcnt > btw) wcnt = btw;
                 ;		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
                 ;		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
                 ;		btw -= wcnt; *bw += wcnt;
                 ;		if (((WORD)fs->fptr % 512) == 0) {
                 ;			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
                 ;			fs->flag &= ~FA__WIP;
                 ;		}
                 ;	}
                 ;
                 ;	return FR_OK;
                 ;
                 ;fw_abort:
                 ;	fs->flag = 0;
                 ;	return FR_DISK_ERR;
                 ;}
                 ;#endif
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Seek File R/W Pointer                                                 */
                 ;/*-----------------------------------------------------------------------*/
                 ;#if _USE_LSEEK
                 ;
                 ;FRESULT pf_lseek (
                 ;	DWORD ofs		/* File pointer from top of file */
                 ;)
                 ;{
                 _pf_lseek:
                 ; .FSTART _pf_lseek
                 ;	CLUST clst;
                 ;	DWORD bcs, sect, ifptr;
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
001352 940e 1ff6 	CALL __PUTPARD2
001354 9760      	SBIW R28,16
001355 940e 1baf 	CALL SUBOPT_0x12
                 ;	ofs -> Y+18
                 ;	clst -> Y+14
                 ;	bcs -> Y+10
                 ;	sect -> Y+6
                 ;	ifptr -> Y+2
                 ;	*fs -> R16,R17
001357 2e00      	MOV  R0,R16
001358 2a01      	OR   R0,R17
001359 f411      	BRNE _0x94
00135a e0e6      	LDI  R30,LOW(6)
00135b c0e4      	RJMP _0x20A0004
                 ;	if (!(fs->flag & FA_OPENED))		/* Check if opened */
                 _0x94:
00135c 01f8      	MOVW R30,R16
00135d 81a2      	LDD  R26,Z+2
00135e 70a1      	ANDI R26,LOW(0x1)
00135f f411      	BRNE _0x95
                 ;			return FR_NOT_OPENED;
001360 e0e5      	LDI  R30,LOW(5)
001361 c0de      	RJMP _0x20A0004
                 ;
                 ;	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
                 _0x95:
001362 01d8      	MOVW R26,R16
001363 965c      	ADIW R26,28
001364 940e 1c99 	CALL SUBOPT_0x37
001366 940e 2012 	CALL __CPD12
001368 f440      	BRSH _0x96
001369 01d8      	MOVW R26,R16
00136a 965c      	ADIW R26,28
00136b 940e 1fc8 	CALL __GETD1P
                +
00136d 8bea     +STD Y + 18 , R30
00136e 8bfb     +STD Y + 18 + 1 , R31
00136f 8b6c     +STD Y + 18 + 2 , R22
001370 8b7d     +STD Y + 18 + 3 , R23
                 	__PUTD1S 18
                 ;	ifptr = fs->fptr;
                 _0x96:
001371 01d8      	MOVW R26,R16
001372 9658      	ADIW R26,24
001373 940e 1bca 	CALL SUBOPT_0x17
                 ;	fs->fptr = 0;
001375 01d8      	MOVW R26,R16
001376 9658      	ADIW R26,24
001377 940e 1c04 	CALL SUBOPT_0x20
                 ;	if (ofs > 0) {
001379 940e 1ca0 	CALL SUBOPT_0x38
00137b 940e 200c 	CALL __CPD02
00137d f008      	BRLO PC+2
00137e c0ba      	RJMP _0x97
                 ;		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
00137f 01f8      	MOVW R30,R16
001380 940e 1c6b 	CALL SUBOPT_0x30
001382 940e 1ca5 	CALL SUBOPT_0x39
001384 940e 1f42 	CALL __MULD12U
                +
001386 87ea     +STD Y + 10 , R30
001387 87fb     +STD Y + 10 + 1 , R31
001388 876c     +STD Y + 10 + 2 , R22
001389 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                 ;		if (ifptr > 0 &&
                 ;			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
00138a 940e 1bc0 	CALL SUBOPT_0x15
00138c 940e 200c 	CALL __CPD02
00138e f498      	BRSH _0x99
00138f 940e 1caa 	CALL SUBOPT_0x3A
001391 940e 1caf 	CALL SUBOPT_0x3B
001393 937f      	PUSH R23
001394 936f      	PUSH R22
001395 93ff      	PUSH R31
001396 93ef      	PUSH R30
001397 940e 1bb6 	CALL SUBOPT_0x13
001399 940e 1caf 	CALL SUBOPT_0x3B
00139b 91af      	POP  R26
00139c 91bf      	POP  R27
00139d 918f      	POP  R24
00139e 919f      	POP  R25
00139f 940e 2017 	CALL __CPD21
0013a1 f408      	BRSH _0x9A
                 _0x99:
0013a2 c027      	RJMP _0x98
                 _0x9A:
                 ;			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
0013a3 940e 1bb6 	CALL SUBOPT_0x13
                +
0013a5 50e1     +SUBI R30 , LOW ( 1 )
0013a6 40f0     +SBCI R31 , HIGH ( 1 )
0013a7 4060     +SBCI R22 , BYTE3 ( 1 )
0013a8 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
0013a9 01df      	MOVW R26,R30
0013aa 01cb      	MOVW R24,R22
                +
0013ab 85ea     +LDD R30 , Y + 10
0013ac 85fb     +LDD R31 , Y + 10 + 1
0013ad 856c     +LDD R22 , Y + 10 + 2
0013ae 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
                +
0013af 50e1     +SUBI R30 , LOW ( 1 )
0013b0 40f0     +SBCI R31 , HIGH ( 1 )
0013b1 4060     +SBCI R22 , BYTE3 ( 1 )
0013b2 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
0013b3 940e 1f35 	CALL __COMD1
0013b5 940e 1eda 	CALL __ANDD12
                +
0013b7 01d8     +MOVW R26 , R16
0013b8 9658     +ADIW R26 , 24
0013b9 940e 1fd3+CALL __PUTDP1
                 	__PUTD1RNS 16,24
                 ;			ofs -= fs->fptr;
0013bb 01d8      	MOVW R26,R16
0013bc 9658      	ADIW R26,24
0013bd 940e 1c99 	CALL SUBOPT_0x37
0013bf 940e 1ed5 	CALL __SUBD21
                +
0013c1 8baa     +STD Y + 18 , R26
0013c2 8bbb     +STD Y + 18 + 1 , R27
0013c3 8b8c     +STD Y + 18 + 2 , R24
0013c4 8b9d     +STD Y + 18 + 3 , R25
                 	__PUTD2S 18
                 ;			clst = fs->curr_clust;
0013c5 01d8      	MOVW R26,R16
0013c6 9694      	ADIW R26,36
0013c7 940e 1cbc 	CALL SUBOPT_0x3C
                 ;		} else {							/* When seek to back cluster, */
0013c9 c006      	RJMP _0x9B
                 _0x98:
                 ;			clst = fs->org_clust;			/* start from the first cluster */
0013ca 01d8      	MOVW R26,R16
0013cb 9690      	ADIW R26,32
0013cc 940e 1cbc 	CALL SUBOPT_0x3C
                 ;			fs->curr_clust = clst;
0013ce 940e 1cc3 	CALL SUBOPT_0x3D
                 ;		}
                 _0x9B:
                 ;		while (ofs > bcs) {				/* Cluster following loop */
                 _0x9C:
                +
0013d0 85ea     +LDD R30 , Y + 10
0013d1 85fb     +LDD R31 , Y + 10 + 1
0013d2 856c     +LDD R22 , Y + 10 + 2
0013d3 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0013d4 940e 1ca0 	CALL SUBOPT_0x38
0013d6 940e 2012 	CALL __CPD12
0013d8 f588      	BRSH _0x9E
                 ;			clst = get_fat(clst);		/* Follow cluster chain */
0013d9 940e 1b82 	CALL SUBOPT_0xB
0013db d949      	RCALL _get_fat_G000
                +
0013dc 87ee     +STD Y + 14 , R30
0013dd 87ff     +STD Y + 14 + 1 , R31
0013de 8b68     +STD Y + 14 + 2 , R22
0013df 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
                 ;			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
0013e0 940e 1b82 	CALL SUBOPT_0xB
0013e2 940e 1b42 	CALL SUBOPT_0x3
0013e4 f048      	BRLO _0xA0
0013e5 01d8      	MOVW R26,R16
0013e6 9618      	ADIW R26,8
0013e7 940e 1fc8 	CALL __GETD1P
0013e9 940e 1b82 	CALL SUBOPT_0xB
0013eb 940e 2017 	CALL __CPD21
0013ed f008      	BRLO _0x9F
                 _0xA0:
0013ee c04c      	RJMP _0xA2
                 ;			fs->curr_clust = clst;
                 _0x9F:
0013ef 940e 1cc3 	CALL SUBOPT_0x3D
                 ;			fs->fptr += bcs;
0013f1 01f8      	MOVW R30,R16
0013f2 940e 1c93 	CALL SUBOPT_0x36
                +
0013f4 85aa     +LDD R26 , Y + 10
0013f5 85bb     +LDD R27 , Y + 10 + 1
0013f6 858c     +LDD R24 , Y + 10 + 2
0013f7 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
0013f8 940e 1ecb 	CALL __ADDD12
0013fa 01d0      	MOVW R26,R0
0013fb 940e 1fd3 	CALL __PUTDP1
                 ;			ofs -= bcs;
                +
0013fd 85aa     +LDD R26 , Y + 10
0013fe 85bb     +LDD R27 , Y + 10 + 1
0013ff 858c     +LDD R24 , Y + 10 + 2
001400 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
001401 940e 1caa 	CALL SUBOPT_0x3A
001403 940e 1ed0 	CALL __SUBD12
                +
001405 8bea     +STD Y + 18 , R30
001406 8bfb     +STD Y + 18 + 1 , R31
001407 8b6c     +STD Y + 18 + 2 , R22
001408 8b7d     +STD Y + 18 + 3 , R23
                 	__PUTD1S 18
                 ;		}
001409 cfc6      	RJMP _0x9C
                 _0x9E:
                 ;		fs->fptr += ofs;
00140a 01f8      	MOVW R30,R16
00140b 940e 1c93 	CALL SUBOPT_0x36
00140d 940e 1ca0 	CALL SUBOPT_0x38
00140f 940e 1ecb 	CALL __ADDD12
001411 01d0      	MOVW R26,R0
001412 940e 1fd3 	CALL __PUTDP1
                 ;		sect = clust2sect(clst);		/* Current sector */
001414 940e 1b82 	CALL SUBOPT_0xB
001416 d9e4      	RCALL _clust2sect_G000
                +
001417 83ee     +STD Y + 6 , R30
001418 83ff     +STD Y + 6 + 1 , R31
001419 8768     +STD Y + 6 + 2 , R22
00141a 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ;		if (!sect) goto fe_abort;
00141b 940e 2008 	CALL __CPD10
00141d f0e9      	BREQ _0xA2
                 ;		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
00141e 940e 1ca0 	CALL SUBOPT_0x38
001420 940e 1c7e 	CALL SUBOPT_0x33
                +
001422 01d8     +MOVW R26 , R16
001423 9613     +ADIW R26 , 3
001424 93ec     +ST X , R30
                 	__PUTB1RNS 16,3
                 ;		if (ofs % 512)
001425 940e 1caa 	CALL SUBOPT_0x3A
001427 70f1      	ANDI R31,HIGH(0x1FF)
001428 9730      	SBIW R30,0
001429 f079      	BREQ _0xA4
                 ;			fs->dsect = sect + fs->csect++;
00142a 01d8      	MOVW R26,R16
00142b 940e 1c8c 	CALL SUBOPT_0x35
                +
00142d 81ae     +LDD R26 , Y + 6
00142e 81bf     +LDD R27 , Y + 6 + 1
00142f 8588     +LDD R24 , Y + 6 + 2
001430 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
001431 940e 1f30 	CALL __CWD1
001433 940e 1ecb 	CALL __ADDD12
                +
001435 01d8     +MOVW R26 , R16
001436 9698     +ADIW R26 , 40
001437 940e 1fd3+CALL __PUTDP1
                 	__PUTD1RNS 16,40
                 ;	}
                 _0xA4:
                 ;
                 ;	return FR_OK;
                 _0x97:
001439 e0e0      	LDI  R30,LOW(0)
00143a c005      	RJMP _0x20A0004
                 ;
                 ;fe_abort:
                 _0xA2:
                 ;	fs->flag = 0;
00143b 01d8      	MOVW R26,R16
00143c 9612      	ADIW R26,2
00143d e0e0      	LDI  R30,LOW(0)
00143e 93ec      	ST   X,R30
                 ;	return FR_DISK_ERR;
00143f e0e1      	LDI  R30,LOW(1)
                 _0x20A0004:
001440 8119      	LDD  R17,Y+1
001441 8108      	LDD  R16,Y+0
001442 9666      	ADIW R28,22
001443 9508      	RET
                 ;}
                 ; .FEND
                 ;#endif
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Create a Directroy Object                                             */
                 ;/*-----------------------------------------------------------------------*/
                 ;#if _USE_DIR
                 ;
                 ;FRESULT pf_opendir (
                 ;	DIR *dj,			/* Pointer to directory object to create */
                 ;	const char *path	/* Pointer to the directory path */
                 ;)
                 ;{
                 ;	FRESULT res;
                 ;	BYTE sp[12], dir[32];
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	if (!fs) {				/* Check file system */
                 ;		res = FR_NOT_ENABLED;
                 ;	} else {
                 ;		fs->buf = dir;
                 ;		dj->fn = sp;
                 ;		res = follow_path(dj, path);			/* Follow the path to the directory */
                 ;		if (res == FR_OK) {						/* Follow completed */
                 ;			if (dir[0]) {						/* It is not the root dir */
                 ;				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
                 ;					dj->sclust =
                 ;#if _FS_FAT32
                 ;					((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
                 ;#endif
                 ;					LD_WORD(dir+DIR_FstClusLO);
                 ;				} else {						/* The object is not a directory */
                 ;					res = FR_NO_PATH;
                 ;				}
                 ;			}
                 ;			if (res == FR_OK)
                 ;				res = dir_rewind(dj);			/* Rewind dir */
                 ;		}
                 ;		if (res == FR_NO_FILE) res = FR_NO_PATH;
                 ;	}
                 ;
                 ;	return res;
                 ;}
                 ;
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Read Directory Entry in Sequense                                      */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;FRESULT pf_readdir (
                 ;	DIR *dj,			/* Pointer to the open directory object */
                 ;	FILINFO *fno		/* Pointer to file information to return */
                 ;)
                 ;{
                 ;	FRESULT res;
                 ;	BYTE sp[12], dir[32];
                 ;	FATFS *fs = FatFs;
                 ;
                 ;
                 ;	if (!fs) {				/* Check file system */
                 ;		res = FR_NOT_ENABLED;
                 ;	} else {
                 ;		fs->buf = dir;
                 ;		dj->fn = sp;
                 ;		if (!fno) {
                 ;			res = dir_rewind(dj);
                 ;		} else {
                 ;			res = dir_read(dj);
                 ;			if (res == FR_NO_FILE) {
                 ;				dj->sect = 0;
                 ;				res = FR_OK;
                 ;			}
                 ;			if (res == FR_OK) {				/* A valid entry is found */
                 ;				get_fileinfo(dj, fno);		/* Get the object information */
                 ;				res = dir_next(dj);			/* Increment index for next */
                 ;				if (res == FR_NO_FILE) {
                 ;					dj->sect = 0;
                 ;					res = FR_OK;
                 ;				}
                 ;			}
                 ;		}
                 ;	}
                 ;
                 ;	return res;
                 ;}
                 ;
                 ;#endif /* _USE_DIR */
                 ;
                 ;#include <ff.h>
                 ;#include <mmc.c>
                 ;
                 ;
                 ;#include "diskio.h"
                 ;
                 ;#define SCK_DDR                 DDRB
                 ;#define SCK_PRT                 PORTB
                 ;#define SCK_BIT                 7
                 ;
                 ;#define MOSI_DDR                DDRB
                 ;#define MOSI_PRT                PORTB
                 ;#define MOSI_BIT                5
                 ;
                 ;#define MISO_DDR                DDRB
                 ;#define MISO_PRT                PORTB
                 ;#define MISO_BIT                6
                 ;
                 ;#define SD_CS_DDR               DDRB
                 ;#define SD_CS_PRT               PORTB
                 ;#define SD_CS_BIT               4
                 ;
                 ;
                 ;// Port Controls  (Platform dependent)
                 ;#define _BV(pin)                                (1<<(pin))
                 ;#define set(port,pin)                           port |= _BV(pin)
                 ;#define reset(port,pin)                         port &= ~_BV(pin)
                 ;#define SELECT()                                reset(SD_CS_PRT,SD_CS_BIT)   /* MMC CS = L */
                 ;#define DESELECT()                              set  (SD_CS_PRT,SD_CS_BIT)   /* MMC CS = H */
                 ;#define bit_is_set(port,pin)                    (port & _BV(pin))
                 ;#define loop_until_bit_is_set( port, pin)       while (!bit_is_set(port,pin))
                 ;
                 ;/* Alternative macro to receive data fast */
                 ;#define rcv_spi_m(dst)                          SPDR=0xFF; loop_until_bit_is_set(SPSR,SPIF); *(dst)=SPDR
                 ;#define xmit_spi(dat)                           SPDR=(dat); loop_until_bit_is_set(SPSR,SPIF)
                 ;
                 ;/* Definitions for MMC/SDC command */
                 ;#define CMD0            (0x40+0)         /* GO_IDLE_STATE */
                 ;#define CMD1            (0x40+1)         /* SEND_OP_COND (MMC) */
                 ;#define ACMD41          (0xC0+41)        /* SEND_OP_COND (SDC) */
                 ;#define CMD8            (0x40+8)         /* SEND_IF_COND */
                 ;#define CMD16           (0x40+16)        /* SET_BLOCKLEN */
                 ;#define CMD17           (0x40+17)        /* READ_SINGLE_BLOCK */
                 ;#define CMD24           (0x40+24)        /* WRITE_BLOCK */
                 ;#define CMD55           (0x40+55)        /* APP_CMD */
                 ;#define CMD58           (0x40+58)        /* READ_OCR */
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* SPI interace                                                          */
                 ;/*-----------------------------------------------------------------------*/
                 ;void init_spi (void)
                 ; 0000 0012         {
                 _init_spi:
                 ; .FSTART _init_spi
                 ;        set(SD_CS_PRT,SD_CS_BIT);
001444 9ac4      	SBI  0x18,4
                 ;        reset(SCK_PRT,SCK_BIT);
001445 98c7      	CBI  0x18,7
                 ;        set(MOSI_PRT,MOSI_BIT);
001446 9ac5      	SBI  0x18,5
                 ;        reset(MISO_PRT,MISO_BIT);
001447 98c6      	CBI  0x18,6
                 ;
                 ;        set(SD_CS_DDR,SD_CS_BIT);
001448 9abc      	SBI  0x17,4
                 ;        set(SCK_DDR,SCK_BIT);
001449 9abf      	SBI  0x17,7
                 ;        set(MOSI_DDR,MOSI_BIT);
00144a 9abd      	SBI  0x17,5
                 ;        reset(MISO_DDR,MISO_BIT);
00144b 98be      	CBI  0x17,6
                 ;
                 ;        set(SPCR,SPE);
00144c 9a6e      	SBI  0xD,6
                 ;        set(SPCR,MSTR);
00144d 9a6c      	SBI  0xD,4
                 ;        set(SPSR,SPI2X);
00144e 9a70      	SBI  0xE,0
                 ;        }
00144f 9508      	RET
                 ; .FEND
                 ;
                 ;BYTE rcv_spi (void)
                 ;        {
                 _rcv_spi:
                 ; .FSTART _rcv_spi
                 ;        SPDR = 0xFF;
001450 efef      	LDI  R30,LOW(255)
001451 b9ef      	OUT  0xF,R30
                 ;        loop_until_bit_is_set(SPSR, SPIF);
                 _0xA5:
001452 9b77      	SBIS 0xE,7
001453 cffe      	RJMP _0xA5
                 ;        return SPDR;
001454 b1ef      	IN   R30,0xF
001455 9508      	RET
                 ;        }
                 ; .FEND
                 ;
                 ;/*--------------------------------------------------------------------------
                 ;
                 ;   Module Private Functions
                 ;
                 ;---------------------------------------------------------------------------*/
                 ;
                 ;static
                 ;BYTE CardType;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Deselect the card and release SPI bus                                 */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;void release_spi (void)
                 ;        {
                 _release_spi_G000:
                 ; .FSTART _release_spi_G000
                 ;        DESELECT();
001456 9ac4      	SBI  0x18,4
                 ;        rcv_spi();
001457 dff8      	RCALL _rcv_spi
                 ;        }
001458 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Send a command packet to MMC                                          */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;static
                 ;BYTE send_cmd
                 ;        (
                 ;        BYTE cmd,                /* Command byte */
                 ;        DWORD arg                /* Argument */
                 ;        )
                 ;        {
                 _send_cmd_G000:
                 ; .FSTART _send_cmd_G000
                 ;        BYTE n, res;
                 ;        if (cmd & 0x80)         /* ACMD<n> is the command sequense of CMD55-CMD<n> */
001459 940e 1ff6 	CALL __PUTPARD2
00145b 931a      	ST   -Y,R17
00145c 930a      	ST   -Y,R16
                 ;	cmd -> Y+6
                 ;	arg -> Y+2
                 ;	n -> R17
                 ;	res -> R16
00145d 81ee      	LDD  R30,Y+6
00145e 78e0      	ANDI R30,LOW(0x80)
00145f f069      	BREQ _0xA8
                 ;                {
                 ;                cmd &= 0x7F;
001460 81ee      	LDD  R30,Y+6
001461 77ef      	ANDI R30,0x7F
001462 83ee      	STD  Y+6,R30
                 ;                res = send_cmd(CMD55, 0);
001463 e7e7      	LDI  R30,LOW(119)
001464 940e 1ccc 	CALL SUBOPT_0x3E
001466 2f0e      	MOV  R16,R30
                 ;                if (res > 1) return res;
001467 3002      	CPI  R16,2
001468 f020      	BRLO _0xA9
001469 8119      	LDD  R17,Y+1
00146a 8108      	LDD  R16,Y+0
00146b 9627      	ADIW R28,7
00146c 9508      	RET
                 ;                }
                 _0xA9:
                 ;
                 ;        /* Select the card */
                 ;        DESELECT();
                 _0xA8:
00146d 9ac4      	SBI  0x18,4
                 ;        rcv_spi();
00146e dfe1      	RCALL _rcv_spi
                 ;        SELECT();
00146f 98c4      	CBI  0x18,4
                 ;        rcv_spi();
001470 dfdf      	RCALL _rcv_spi
                 ;
                 ;        /* Send a command packet */
                 ;        xmit_spi(cmd);                          /* Start + Command index */
001471 81ee      	LDD  R30,Y+6
001472 b9ef      	OUT  0xF,R30
                 _0xAA:
001473 9b77      	SBIS 0xE,7
001474 cffe      	RJMP _0xAA
                 ;        xmit_spi((BYTE)(arg >> 24));            /* Argument[31..24] */
001475 940e 1bc0 	CALL SUBOPT_0x15
001477 e1e8      	LDI  R30,LOW(24)
001478 940e 1efc 	CALL __LSRD12
00147a b9ef      	OUT  0xF,R30
                 _0xAD:
00147b 9b77      	SBIS 0xE,7
00147c cffe      	RJMP _0xAD
                 ;        xmit_spi((BYTE)(arg >> 16));            /* Argument[23..16] */
00147d 940e 1bb6 	CALL SUBOPT_0x13
00147f 940e 1f26 	CALL __LSRD16
001481 b9ef      	OUT  0xF,R30
                 _0xB0:
001482 9b77      	SBIS 0xE,7
001483 cffe      	RJMP _0xB0
                 ;        xmit_spi((BYTE)(arg >> 8));             /* Argument[15..8] */
001484 940e 1bc0 	CALL SUBOPT_0x15
001486 e0e8      	LDI  R30,LOW(8)
001487 940e 1efc 	CALL __LSRD12
001489 b9ef      	OUT  0xF,R30
                 _0xB3:
00148a 9b77      	SBIS 0xE,7
00148b cffe      	RJMP _0xB3
                 ;        xmit_spi((BYTE)arg);                    /* Argument[7..0] */
00148c 81ea      	LDD  R30,Y+2
00148d b9ef      	OUT  0xF,R30
                 _0xB6:
00148e 9b77      	SBIS 0xE,7
00148f cffe      	RJMP _0xB6
                 ;        n = 0x01;                               /* Dummy CRC + Stop */
001490 e011      	LDI  R17,LOW(1)
                 ;        if (cmd == CMD0) n = 0x95;              /* Valid CRC for CMD0(0) */
001491 81ae      	LDD  R26,Y+6
001492 34a0      	CPI  R26,LOW(0x40)
001493 f409      	BRNE _0xB9
001494 e915      	LDI  R17,LOW(149)
                 ;        if (cmd == CMD8) n = 0x87;              /* Valid CRC for CMD8(0x1AA) */
                 _0xB9:
001495 81ae      	LDD  R26,Y+6
001496 34a8      	CPI  R26,LOW(0x48)
001497 f409      	BRNE _0xBA
001498 e817      	LDI  R17,LOW(135)
                 ;        xmit_spi(n);
                 _0xBA:
001499 b91f      	OUT  0xF,R17
                 _0xBB:
00149a 9b77      	SBIS 0xE,7
00149b cffe      	RJMP _0xBB
                 ;
                 ;        /* Receive a command response */
                 ;        n = 10;                                 /* Wait for a valid response in timeout of 10 attempts */
00149c e01a      	LDI  R17,LOW(10)
                 ;        do
                 _0xBF:
                 ;                {
                 ;                res = rcv_spi();
00149d dfb2      	RCALL _rcv_spi
00149e 2f0e      	MOV  R16,R30
                 ;                } while ((res & 0x80) && --n);
00149f ff07      	SBRS R16,7
0014a0 c002      	RJMP _0xC1
0014a1 5011      	SUBI R17,LOW(1)
0014a2 f409      	BRNE _0xC2
                 _0xC1:
0014a3 c001      	RJMP _0xC0
                 _0xC2:
0014a4 cff8      	RJMP _0xBF
                 _0xC0:
                 ;
                 ;        return res;                        /* Return with the response value */
0014a5 2fe0      	MOV  R30,R16
0014a6 8119      	LDD  R17,Y+1
0014a7 8108      	LDD  R16,Y+0
0014a8 c446      	RJMP _0x20A0002
                 ;        }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*--------------------------------------------------------------------------
                 ;
                 ;   Public Functions
                 ;
                 ;---------------------------------------------------------------------------*/
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Initialize Disk Drive                                                 */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;DSTATUS disk_initialize (void)
                 ;        {
                 _disk_initialize:
                 ; .FSTART _disk_initialize
                 ;        BYTE n, cmd, ty, ocr[4];
                 ;        WORD tmr;
                 ;
                 ;        init_spi();                              /* Initialize USI */
0014a9 9724      	SBIW R28,4
0014aa 940e 201c 	CALL __SAVELOCR6
                 ;	n -> R17
                 ;	cmd -> R16
                 ;	ty -> R19
                 ;	ocr -> Y+6
                 ;	tmr -> R20,R21
0014ac df97      	RCALL _init_spi
                 ;
                 ;        for (n = 100; n; n--) rcv_spi();        /* Dummy clocks */
0014ad e614      	LDI  R17,LOW(100)
                 _0xC4:
0014ae 3010      	CPI  R17,0
0014af f019      	BREQ _0xC5
0014b0 df9f      	RCALL _rcv_spi
0014b1 5011      	SUBI R17,1
0014b2 cffb      	RJMP _0xC4
                 _0xC5:
0014b3 e030      	LDI  R19,LOW(0)
                 ;        if (send_cmd(CMD0, 0) == 1) {                        /* Enter Idle state */
0014b4 e4e0      	LDI  R30,LOW(64)
0014b5 940e 1ccc 	CALL SUBOPT_0x3E
0014b7 30e1      	CPI  R30,LOW(0x1)
0014b8 f009      	BREQ PC+2
0014b9 c074      	RJMP _0xC6
                 ;                if (send_cmd(CMD8, 0x1AA) == 1) {        /* SDHC */
0014ba e4e8      	LDI  R30,LOW(72)
0014bb 93ea      	ST   -Y,R30
                +
0014bc eaaa     +LDI R26 , LOW ( 0x1AA )
0014bd e0b1     +LDI R27 , HIGH ( 0x1AA )
0014be e080     +LDI R24 , BYTE3 ( 0x1AA )
0014bf e090     +LDI R25 , BYTE4 ( 0x1AA )
                 	__GETD2N 0x1AA
0014c0 df98      	RCALL _send_cmd_G000
0014c1 30e1      	CPI  R30,LOW(0x1)
0014c2 f009      	BREQ PC+2
0014c3 c044      	RJMP _0xC7
                 ;                        for (n = 0; n < 4; n++) ocr[n] = rcv_spi();                /* Get trailing return value of R7 re ...
0014c4 e010      	LDI  R17,LOW(0)
                 _0xC9:
0014c5 3014      	CPI  R17,4
0014c6 f450      	BRSH _0xCA
0014c7 940e 1cd3 	CALL SUBOPT_0x3F
0014c9 93ff      	PUSH R31
0014ca 93ef      	PUSH R30
0014cb df84      	RCALL _rcv_spi
0014cc 91af      	POP  R26
0014cd 91bf      	POP  R27
0014ce 93ec      	ST   X,R30
0014cf 5f1f      	SUBI R17,-1
0014d0 cff4      	RJMP _0xC9
                 _0xCA:
0014d1 85a8      	LDD  R26,Y+8
0014d2 30a1      	CPI  R26,LOW(0x1)
0014d3 f419      	BRNE _0xCC
0014d4 85a9      	LDD  R26,Y+9
0014d5 3aaa      	CPI  R26,LOW(0xAA)
0014d6 f009      	BREQ _0xCD
                 _0xCC:
0014d7 c02f      	RJMP _0xCB
                 _0xCD:
                 ;                                for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;        /* Wait for leavin ...
                +
0014d8 ea48     +LDI R20 , LOW ( 25000 )
0014d9 e651     +LDI R21 , HIGH ( 25000 )
                 	__GETWRN 20,21,25000
                 _0xCF:
0014da 2e04      	MOV  R0,R20
0014db 2a05      	OR   R0,R21
0014dc f049      	BREQ _0xD1
0014dd eee9      	LDI  R30,LOW(233)
0014de 93ea      	ST   -Y,R30
                +
0014df e0a0     +LDI R26 , LOW ( 0x40000000 )
0014e0 e0b0     +LDI R27 , HIGH ( 0x40000000 )
0014e1 e080     +LDI R24 , BYTE3 ( 0x40000000 )
0014e2 e490     +LDI R25 , BYTE4 ( 0x40000000 )
                 	__GETD2N 0x40000000
0014e3 df75      	RCALL _send_cmd_G000
0014e4 30e0      	CPI  R30,0
0014e5 f409      	BRNE _0xD2
                 _0xD1:
0014e6 c003      	RJMP _0xD0
                 _0xD2:
                +
0014e7 5041     +SUBI R20 , LOW ( 1 )
0014e8 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
0014e9 cff0      	RJMP _0xCF
                 _0xD0:
                 ;                                if (tmr && send_cmd(CMD58, 0) == 0) {                /* Check CCS bit in the OCR */
0014ea 2e04      	MOV  R0,R20
0014eb 2a05      	OR   R0,R21
0014ec f029      	BREQ _0xD4
0014ed e7ea      	LDI  R30,LOW(122)
0014ee 940e 1ccc 	CALL SUBOPT_0x3E
0014f0 30e0      	CPI  R30,0
0014f1 f009      	BREQ _0xD5
                 _0xD4:
0014f2 c014      	RJMP _0xD3
                 _0xD5:
                 ;                                        for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
0014f3 e010      	LDI  R17,LOW(0)
                 _0xD7:
0014f4 3014      	CPI  R17,4
0014f5 f450      	BRSH _0xD8
0014f6 940e 1cd3 	CALL SUBOPT_0x3F
0014f8 93ff      	PUSH R31
0014f9 93ef      	PUSH R30
0014fa df55      	RCALL _rcv_spi
0014fb 91af      	POP  R26
0014fc 91bf      	POP  R27
0014fd 93ec      	ST   X,R30
0014fe 5f1f      	SUBI R17,-1
0014ff cff4      	RJMP _0xD7
                 _0xD8:
001500 81ee      	LDD  R30,Y+6
001501 74e0      	ANDI R30,LOW(0x40)
001502 f011      	BREQ _0xD9
001503 e0ec      	LDI  R30,LOW(12)
001504 c001      	RJMP _0xDA
                 _0xD9:
001505 e0e4      	LDI  R30,LOW(4)
                 _0xDA:
001506 2f3e      	MOV  R19,R30
                 ;                                }
                 ;                        }
                 _0xD3:
                 ;                } else {                                                        /* SDSC or MMC */
                 _0xCB:
001507 c026      	RJMP _0xDC
                 _0xC7:
                 ;                        if (send_cmd(ACMD41, 0) <= 1)         {
001508 eee9      	LDI  R30,LOW(233)
001509 940e 1ccc 	CALL SUBOPT_0x3E
00150b 30e2      	CPI  R30,LOW(0x2)
00150c f418      	BRSH _0xDD
                 ;                                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
00150d e032      	LDI  R19,LOW(2)
00150e ee09      	LDI  R16,LOW(233)
                 ;                        } else {
00150f c002      	RJMP _0xDE
                 _0xDD:
                 ;                                ty = CT_MMC; cmd = CMD1;        /* MMCv3 */
001510 e031      	LDI  R19,LOW(1)
001511 e401      	LDI  R16,LOW(65)
                 ;                        }
                 _0xDE:
                 ;                        for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;        /* Wait for leaving idle state */
                +
001512 ea48     +LDI R20 , LOW ( 25000 )
001513 e651     +LDI R21 , HIGH ( 25000 )
                 	__GETWRN 20,21,25000
                 _0xE0:
001514 2e04      	MOV  R0,R20
001515 2a05      	OR   R0,R21
001516 f041      	BREQ _0xE2
001517 930a      	ST   -Y,R16
                +
001518 e0a0     +LDI R26 , LOW ( 0x0 )
001519 e0b0     +LDI R27 , HIGH ( 0x0 )
00151a e080     +LDI R24 , BYTE3 ( 0x0 )
00151b e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
00151c df3c      	RCALL _send_cmd_G000
00151d 30e0      	CPI  R30,0
00151e f409      	BRNE _0xE3
                 _0xE2:
00151f c003      	RJMP _0xE1
                 _0xE3:
                +
001520 5041     +SUBI R20 , LOW ( 1 )
001521 4050     +SBCI R21 , HIGH ( 1 )
                 	__SUBWRN 20,21,1
001522 cff1      	RJMP _0xE0
                 _0xE1:
                 ;                        if (!tmr || send_cmd(CMD16, 512) != 0)                        /* Set R/W block length to 512 */
001523 2e04      	MOV  R0,R20
001524 2a05      	OR   R0,R21
001525 f039      	BREQ _0xE5
001526 e5e0      	LDI  R30,LOW(80)
001527 93ea      	ST   -Y,R30
001528 940e 1ca5 	CALL SUBOPT_0x39
00152a df2e      	RCALL _send_cmd_G000
00152b 30e0      	CPI  R30,0
00152c f009      	BREQ _0xE4
                 _0xE5:
                 ;                                ty = 0;
00152d e030      	LDI  R19,LOW(0)
                 ;                }
                 _0xE4:
                 _0xDC:
                 ;        }
                 ;        CardType = ty;
                 _0xC6:
00152e 9330 048a 	STS  _CardType_G000,R19
                 ;        release_spi();
001530 df25      	RCALL _release_spi_G000
                 ;        return ty ? 0 : STA_NOINIT;
001531 3030      	CPI  R19,0
001532 f011      	BREQ _0xE7
001533 e0e0      	LDI  R30,LOW(0)
001534 c001      	RJMP _0xE8
                 _0xE7:
001535 e0e1      	LDI  R30,LOW(1)
                 _0xE8:
001536 940e 2023 	CALL __LOADLOCR6
001538 962a      	ADIW R28,10
001539 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Read partial sector                                                   */
                 ;/*-----------------------------------------------------------------------*/
                 ;
                 ;DRESULT disk_readp
                 ;        (
                 ;        BYTE *buff,                /* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
                 ;        DWORD lba,                /* Sector number (LBA) */
                 ;        WORD ofs,                /* Byte offset to read from (0..511) */
                 ;        WORD cnt                /* Number of bytes to read (ofs + cnt mus be <= 512) */
                 ;        )
                 ;        {
                 _disk_readp:
                 ; .FSTART _disk_readp
                 ;        DRESULT res;
                 ;        BYTE rc;
                 ;        WORD bc;
                 ;
                 ;        if (!(CardType & CT_BLOCK)) lba *= 512;                /* Convert to byte address if needed */
00153a 940e 1be2 	CALL SUBOPT_0x1B
                 ;	*buff -> Y+12
                 ;	lba -> Y+8
                 ;	ofs -> Y+6
                 ;	cnt -> Y+4
                 ;	res -> R17
                 ;	rc -> R16
                 ;	bc -> R18,R19
00153c 91e0 048a 	LDS  R30,_CardType_G000
00153e 70e8      	ANDI R30,LOW(0x8)
00153f f461      	BRNE _0xEA
                +
001540 85e8     +LDD R30 , Y + 8
001541 85f9     +LDD R31 , Y + 8 + 1
001542 856a     +LDD R22 , Y + 8 + 2
001543 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
001544 940e 1ca5 	CALL SUBOPT_0x39
001546 940e 1f42 	CALL __MULD12U
                +
001548 87e8     +STD Y + 8 , R30
001549 87f9     +STD Y + 8 + 1 , R31
00154a 876a     +STD Y + 8 + 2 , R22
00154b 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ;        res = RES_ERROR;
                 _0xEA:
00154c e011      	LDI  R17,LOW(1)
                 ;        if (send_cmd(CMD17, lba) == 0)                 /* READ_SINGLE_BLOCK */
00154d e5e1      	LDI  R30,LOW(81)
00154e 93ea      	ST   -Y,R30
00154f 940e 1c51 	CALL SUBOPT_0x2C
001551 df07      	RCALL _send_cmd_G000
001552 30e0      	CPI  R30,0
001553 f009      	BREQ PC+2
001554 c040      	RJMP _0xEB
                 ;                {
                 ;                bc = 30000;
                +
001555 e320     +LDI R18 , LOW ( 30000 )
001556 e735     +LDI R19 , HIGH ( 30000 )
                 	__GETWRN 18,19,30000
                 ;                do                                                         /* Wait for data packet in timeout of 100ms * ...
                 _0xED:
                 ;                        {
                 ;                        rc = rcv_spi();
001557 def8      	RCALL _rcv_spi
001558 2f0e      	MOV  R16,R30
                 ;                        } while (rc == 0xFF && --bc);
001559 3f0f      	CPI  R16,255
00155a f419      	BRNE _0xEF
                +
00155b 5021     +SUBI R18 , LOW ( 1 )
00155c 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
00155d f409      	BRNE _0xF0
                 _0xEF:
00155e c001      	RJMP _0xEE
                 _0xF0:
00155f cff7      	RJMP _0xED
                 _0xEE:
                 ;                if (rc == 0xFE)                                 /* A data packet arrived */
001560 3f0e      	CPI  R16,254
001561 f599      	BRNE _0xF1
                 ;                        {
                 ;                        bc = 514 - ofs - cnt;
001562 81ae      	LDD  R26,Y+6
001563 81bf      	LDD  R27,Y+6+1
001564 e0e2      	LDI  R30,LOW(514)
001565 e0f2      	LDI  R31,HIGH(514)
001566 1bea      	SUB  R30,R26
001567 0bfb      	SBC  R31,R27
001568 01df      	MOVW R26,R30
001569 81ec      	LDD  R30,Y+4
00156a 81fd      	LDD  R31,Y+4+1
00156b 1bae      	SUB  R26,R30
00156c 0bbf      	SBC  R27,R31
00156d 019d      	MOVW R18,R26
                 ;                        /* Skip leading bytes */
                 ;                        if (ofs)
00156e 81ee      	LDD  R30,Y+6
00156f 81ff      	LDD  R31,Y+6+1
001570 9730      	SBIW R30,0
001571 f039      	BREQ _0xF2
                 ;                                {
                 ;                                do rcv_spi(); while (--ofs);
                 _0xF4:
001572 dedd      	RCALL _rcv_spi
001573 81ee      	LDD  R30,Y+6
001574 81ff      	LDD  R31,Y+6+1
001575 9731      	SBIW R30,1
001576 83ee      	STD  Y+6,R30
001577 83ff      	STD  Y+6+1,R31
001578 f7c9      	BRNE _0xF4
                 ;                                }
                 ;
                 ;                        /* Receive a part of the sector */
                 ;                        if (buff)         /* Store data to the memory */
                 _0xF2:
001579 85ec      	LDD  R30,Y+12
00157a 85fd      	LDD  R31,Y+12+1
00157b 9730      	SBIW R30,0
00157c f091      	BREQ _0xF6
                 ;                                {
                 ;                                do
                 _0xF8:
                 ;                                        *buff++ = rcv_spi();
00157d 85ec      	LDD  R30,Y+12
00157e 85fd      	LDD  R31,Y+12+1
00157f 9631      	ADIW R30,1
001580 87ec      	STD  Y+12,R30
001581 87fd      	STD  Y+12+1,R31
001582 9731      	SBIW R30,1
001583 93ff      	PUSH R31
001584 93ef      	PUSH R30
001585 deca      	RCALL _rcv_spi
001586 91af      	POP  R26
001587 91bf      	POP  R27
001588 93ec      	ST   X,R30
                 ;                                while (--cnt);
001589 81ec      	LDD  R30,Y+4
00158a 81fd      	LDD  R31,Y+4+1
00158b 9731      	SBIW R30,1
00158c 83ec      	STD  Y+4,R30
00158d 83fd      	STD  Y+4+1,R31
00158e f771      	BRNE _0xF8
                 ;                                }
                 ;                        do rcv_spi(); while (--bc);
                 _0xF6:
                 _0xFB:
00158f dec0      	RCALL _rcv_spi
001590 01f9      	MOVW R30,R18
001591 9731      	SBIW R30,1
001592 019f      	MOVW R18,R30
001593 f7d9      	BRNE _0xFB
                 ;                        res = RES_OK;
001594 e010      	LDI  R17,LOW(0)
                 ;                        }
                 ;                }
                 _0xF1:
                 ;        release_spi();
                 _0xEB:
001595 dec0      	RCALL _release_spi_G000
                 ;        return res;
001596 2fe1      	MOV  R30,R17
001597 940e 2025 	CALL __LOADLOCR4
001599 962e      	ADIW R28,14
00159a 9508      	RET
                 ;        }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;/*-----------------------------------------------------------------------*/
                 ;/* Write partial sector                                                  */
                 ;/*-----------------------------------------------------------------------*/
                 ;DRESULT disk_writep
                 ;        (
                 ;        const BYTE *buff,        /* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
                 ;        DWORD sa                        /* Number of bytes to send, Sector number (LBA) or zero */
                 ;        )
                 ;        {
                 ;        DRESULT res;
                 ;        WORD bc;
                 ;        static WORD wc;
                 ;        res = RES_ERROR;
                 ;	*buff -> Y+8
                 ;	sa -> Y+4
                 ;	res -> R17
                 ;	bc -> R18,R19
                 ;
                 ;        if (buff)                 /* Send data bytes */
                 ;                {
                 ;                bc = (WORD)sa;
                 ;                while (bc && wc)                 /* Send data bytes to the card */
                 ;                        {
                 ;                        xmit_spi(*buff++);
                 ;                        wc--; bc--;
                 ;                        }
                 ;                res = RES_OK;
                 ;                }
                 ;        else
                 ;                {
                 ;                if (sa)         /* Initiate sector write process */
                 ;                        {
                 ;                        if (!(CardType & CT_BLOCK)) sa *= 512;        /* Convert to byte address if needed */
                 ;                        if (send_cmd(CMD24, sa) == 0)                         /* WRITE_SINGLE_BLOCK */
                 ;                                {
                 ;                                xmit_spi(0xFF); xmit_spi(0xFE);                /* Data block header */
                 ;                                wc = 512;                                                        /* Set byte counter */
                 ;                                res = RES_OK;
                 ;                                }
                 ;                        }
                 ;                else         /* Finalize sector write process */
                 ;                        {
                 ;                        bc = wc + 2;
                 ;                        while (bc--) xmit_spi(0);        /* Fill left bytes and CRC with zeros */
                 ;                        if ((rcv_spi() & 0x1F) == 0x05)         /* Receive data resp and wait for end of write process i ...
                 ;                                {
                 ;                                for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;        /* Wait ready */
                 ;                                if (bc) res = RES_OK;
                 ;                                }
                 ;                        release_spi();
                 ;                        }
                 ;                }
                 ;        return res;
                 ;        }
                 ;
                 ;#define xtal 16000000
                 ;
                 ;//================================ LCD CONFIGURATIONS =======================================
                 ; #define   PORTRAIT                /* It used in the "tftlcd_functions.h" library
                 ;                                                             ,you can change it to LANSCAPE*/
                 ;
                 ; //Define pins to connect to the display
                 ; #define LCD_CONTROLPORT_DDR  DDRD
                 ; #define LCD_CONTROLPORT_PORT PORTD
                 ; #define LCD_CONTROLPORT_PIN  PIND
                 ;
                 ; #define LCD_RST_DDR  DDRD
                 ; #define LCD_RST_PORT PORTD
                 ; #define LCD_RST_PIN  4
                 ;
                 ; #define LCD_RS_DDR  DDRD
                 ; #define LCD_RS_PORT PORTD
                 ; #define LCD_RS_PIN  2
                 ;
                 ; #define LCD_CS_DDR  DDRD
                 ; #define LCD_CS_PORT PORTD
                 ; #define LCD_CS_PIN  3
                 ;
                 ; #define LCD_RD_DDR  DDRD
                 ; #define LCD_RD_PORT PORTD
                 ; #define LCD_RD_PIN  0
                 ;
                 ; #define LCD_WR_DDR  DDRD
                 ; #define LCD_WR_PORT PORTD
                 ; #define LCD_WR_PIN  1
                 ;
                 ; #define LCD_DATAPORT_MSB_DDR   DDRA
                 ; #define LCD_DATAPORT_MSB_PORT  PORTA
                 ; #define LCD_DATAPORT_MSB_PIN   PINA
                 ;
                 ; #define LCD_DATAPORT_LSB_DDR   DDRC
                 ; #define LCD_DATAPORT_LSB_PORT  PORTC
                 ; #define LCD_DATAPORT_LSB_PIN   PINC
                 ;
                 ; #include "tftlcd_functions.h"    // The main header to run ili9325 display
                 _lcd_write_index_register:
                 ; .FSTART _lcd_write_index_register
00159b 93aa      	ST   -Y,R26
                 ;	ins -> Y+0
00159c 9893      	CBI  0x12,3
00159d 9892      	CBI  0x12,2
00159e e0e0      	LDI  R30,LOW(0)
00159f 940e 1cda 	CALL SUBOPT_0x40
0015a1 9621      	ADIW R28,1
0015a2 9508      	RET
                 ; .FEND
                 _lcd_write_wdr:
                 ; .FSTART _lcd_write_wdr
0015a3 93ba      	ST   -Y,R27
0015a4 93aa      	ST   -Y,R26
                 ;	data -> Y+0
0015a5 9893      	CBI  0x12,3
0015a6 9a92      	SBI  0x12,2
0015a7 81e8      	LD   R30,Y
0015a8 81f9      	LDD  R31,Y+1
0015a9 940e 1f21 	CALL __ASRW8
0015ab 940e 1cda 	CALL SUBOPT_0x40
0015ad 9622      	ADIW R28,2
0015ae 9508      	RET
                 ; .FEND
                 _lcd_read_rdr:
                 ; .FSTART _lcd_read_rdr
0015af 940e 201c 	CALL __SAVELOCR6
                 ;	data_lsb -> R16,R17
                 ;	data_msb -> R18,R19
                 ;	rdr_data -> R20,R21
0015b1 e0e0      	LDI  R30,LOW(0)
0015b2 bbeb      	OUT  0x1B,R30
0015b3 bbe5      	OUT  0x15,R30
0015b4 bbea      	OUT  0x1A,R30
0015b5 bbe4      	OUT  0x14,R30
0015b6 9890      	CBI  0x12,0
0015b7 9a91      	SBI  0x12,1
0015b8 9893      	CBI  0x12,3
0015b9 b303      	IN   R16,19
0015ba 2711      	CLR  R17
0015bb b329      	IN   R18,25
0015bc 2733      	CLR  R19
0015bd 2ff2      	MOV  R31,R18
0015be e0e0      	LDI  R30,LOW(0)
0015bf 2be0      	OR   R30,R16
0015c0 2bf1      	OR   R31,R17
0015c1 01af      	MOVW R20,R30
0015c2 9a93      	SBI  0x12,3
0015c3 9a90      	SBI  0x12,0
0015c4 9a91      	SBI  0x12,1
0015c5 efef      	LDI  R30,LOW(255)
0015c6 bbea      	OUT  0x1A,R30
0015c7 bbe4      	OUT  0x14,R30
0015c8 01fa      	MOVW R30,R20
0015c9 940e 2023 	CALL __LOADLOCR6
0015cb c121      	RJMP _0x20A0003
                 ; .FEND
                 _lcd_clear_screen:
                 ; .FSTART _lcd_clear_screen
0015cc 940e 1ce1 	CALL SUBOPT_0x41
                 ;	counter -> Y+0
                 _0x13F:
0015ce 940e 1d13 	CALL SUBOPT_0x42
0015d0 f430      	BRSH _0x140
0015d1 efaf      	LDI  R26,LOW(65535)
0015d2 efbf      	LDI  R27,HIGH(65535)
0015d3 dfcf      	RCALL _lcd_write_wdr
0015d4 940e 1d1d 	CALL SUBOPT_0x43
0015d6 cff7      	RJMP _0x13F
                 _0x140:
0015d7 c342      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_background_color:
                 ; .FSTART _lcd_background_color
0015d8 93ba      	ST   -Y,R27
0015d9 93aa      	ST   -Y,R26
0015da 940e 1ce1 	CALL SUBOPT_0x41
                 ;	color -> Y+4
                 ;	counter -> Y+0
                 _0x142:
0015dc 940e 1d13 	CALL SUBOPT_0x42
0015de f428      	BRSH _0x143
0015df 940e 1d26 	CALL SUBOPT_0x44
0015e1 940e 1d1d 	CALL SUBOPT_0x43
0015e3 cff8      	RJMP _0x142
                 _0x143:
0015e4 c108      	RJMP _0x20A0003
                 ; .FEND
                 ;	index -> Y+2
                 ;	argument -> Y+0
                 ;	color -> Y+2
                 ;	counter -> R16,R17
                 ;	x0 -> Y+26
                 ;	y0 -> Y+24
                 ;	N -> Y+22
                 ;	gray -> Y+20
                 ;	*img -> Y+18
                 ;	counter -> R16,R17
                 ;	X_S -> R18,R19
                 ;	Y_S -> R20,R21
                 ;	col -> Y+16
                 ;	H -> Y+14
                 ;	V -> Y+12
                 ;	DX -> Y+10
                 ;	DY -> Y+8
                 ;	raw_counter -> Y+6
                 ;	X0 -> Y+10
                 ;	Y0 -> Y+8
                 ;	DX -> Y+6
                 ;	DY -> Y+4
                 ;	S_X -> Y+2
                 ;	S_Y -> Y+0
                 ;	color -> Y+0
                 ;	ef -> Y+0
                 ;	character -> Y+6
                 ;	counter_x -> R16,R17
                 ;	counter_y -> R18,R19
                 ;	letter_length -> R21
                 ;	flag_p -> R20
                 ;	character -> Y+12
                 ;	size -> Y+10
                 ;	counter_x -> R16,R17
                 ;	counter_y -> R18,R19
                 ;	i -> R20,R21
                 ;	j -> Y+8
                 ;	letter_length -> Y+7
                 ;	flag_p -> Y+6
                 ;	x -> Y+2
                 ;	y -> Y+0
                 ;	color -> Y+0
                 ;	*string -> Y+47
                 ;	size -> Y+45
                 ;	letter -> R17
                 ;	nt_letter -> R16
                 ;	pr_letter -> R19
                 ;	CN -> R18
                 ;	CP -> R21
                 ;	pr_CN -> R20
                 ;	nt_CP -> Y+44
                 ;	place -> Y+43
                 ;	flag1 -> Y+42
                 ;	letter_counter -> Y+41
                 ;	letter_count -> Y+40
                 ;	length -> Y+39
                 ;	enter -> Y+38
                 ;	text_buffer -> Y+6
                 ;	*uni_str -> Y+8
                 ;	*ascii_str -> Y+6
                 ;	counter -> R16,R17
                 ;	Uch -> R18,R19
                 ;	chl -> R21
                 ;	chh -> R20
                 _lcd_init:
                 ; .FSTART _lcd_init
0015e5 e1ef      	LDI  R30,LOW(31)
0015e6 bbe2      	OUT  0x12,R30
0015e7 bbe1      	OUT  0x11,R30
0015e8 efef      	LDI  R30,LOW(255)
0015e9 bbea      	OUT  0x1A,R30
0015ea bbe4      	OUT  0x14,R30
0015eb 9894      	CBI  0x12,4
0015ec e0a1      	LDI  R26,LOW(1)
0015ed e0b0      	LDI  R27,0
0015ee 940e 1ec1 	CALL _delay_ms
0015f0 9a94      	SBI  0x12,4
0015f1 eea3      	LDI  R26,LOW(227)
0015f2 dfa8      	RCALL _lcd_write_index_register
0015f3 e0a8      	LDI  R26,LOW(12296)
0015f4 e3b0      	LDI  R27,HIGH(12296)
0015f5 dfad      	RCALL _lcd_write_wdr
0015f6 eea7      	LDI  R26,LOW(231)
0015f7 dfa3      	RCALL _lcd_write_index_register
0015f8 e1a2      	LDI  R26,LOW(18)
0015f9 e0b0      	LDI  R27,0
0015fa dfa8      	RCALL _lcd_write_wdr
0015fb eeaf      	LDI  R26,LOW(239)
0015fc df9e      	RCALL _lcd_write_index_register
0015fd e3a1      	LDI  R26,LOW(4657)
0015fe e1b2      	LDI  R27,HIGH(4657)
0015ff dfa3      	RCALL _lcd_write_wdr
001600 e0a0      	LDI  R26,LOW(0)
001601 940e 1d2a 	CALL SUBOPT_0x45
001603 940e 1d30 	CALL SUBOPT_0x46
001605 e0a1      	LDI  R26,LOW(1)
001606 df94      	RCALL _lcd_write_index_register
001607 e0a0      	LDI  R26,LOW(256)
001608 e0b1      	LDI  R27,HIGH(256)
001609 df99      	RCALL _lcd_write_wdr
00160a e0a2      	LDI  R26,LOW(2)
00160b 940e 1d34 	CALL SUBOPT_0x47
00160d e0a3      	LDI  R26,LOW(3)
00160e df8c      	RCALL _lcd_write_index_register
00160f e3a0      	LDI  R26,LOW(48)
001610 e0b0      	LDI  R27,0
001611 df91      	RCALL _lcd_write_wdr
001612 e0a4      	LDI  R26,LOW(4)
001613 940e 1d3a 	CALL SUBOPT_0x48
001615 e0a8      	LDI  R26,LOW(8)
001616 df84      	RCALL _lcd_write_index_register
001617 e0a2      	LDI  R26,LOW(514)
001618 e0b2      	LDI  R27,HIGH(514)
001619 df89      	RCALL _lcd_write_wdr
00161a e0a9      	LDI  R26,LOW(9)
00161b 940e 1d3a 	CALL SUBOPT_0x48
00161d e0aa      	LDI  R26,LOW(10)
00161e 940e 1d3a 	CALL SUBOPT_0x48
001620 e0ac      	LDI  R26,LOW(12)
001621 940e 1d3a 	CALL SUBOPT_0x48
001623 e0ad      	LDI  R26,LOW(13)
001624 940e 1d3a 	CALL SUBOPT_0x48
001626 e0af      	LDI  R26,LOW(15)
001627 940e 1d3a 	CALL SUBOPT_0x48
001629 e1a0      	LDI  R26,LOW(16)
00162a 940e 1d3a 	CALL SUBOPT_0x48
00162c 940e 1d40 	CALL SUBOPT_0x49
00162e e1a2      	LDI  R26,LOW(18)
00162f 940e 1d3a 	CALL SUBOPT_0x48
001631 e1a3      	LDI  R26,LOW(19)
001632 940e 1d3a 	CALL SUBOPT_0x48
001634 eca8      	LDI  R26,LOW(200)
001635 e0b0      	LDI  R27,0
001636 940e 1ec1 	CALL _delay_ms
001638 e1a0      	LDI  R26,LOW(16)
001639 df61      	RCALL _lcd_write_index_register
00163a e9a0      	LDI  R26,LOW(5776)
00163b e1b6      	LDI  R27,HIGH(5776)
00163c df66      	RCALL _lcd_write_wdr
00163d 940e 1d40 	CALL SUBOPT_0x49
00163f 940e 1d30 	CALL SUBOPT_0x46
001641 e1a2      	LDI  R26,LOW(18)
001642 df58      	RCALL _lcd_write_index_register
001643 e1aa      	LDI  R26,LOW(26)
001644 e0b0      	LDI  R27,0
001645 df5d      	RCALL _lcd_write_wdr
001646 940e 1d30 	CALL SUBOPT_0x46
001648 e1a3      	LDI  R26,LOW(19)
001649 df51      	RCALL _lcd_write_index_register
00164a e0a0      	LDI  R26,LOW(6144)
00164b e1b8      	LDI  R27,HIGH(6144)
00164c df56      	RCALL _lcd_write_wdr
00164d e2a9      	LDI  R26,LOW(41)
00164e df4c      	RCALL _lcd_write_index_register
00164f e2aa      	LDI  R26,LOW(42)
001650 e0b0      	LDI  R27,0
001651 df51      	RCALL _lcd_write_wdr
001652 940e 1d30 	CALL SUBOPT_0x46
001654 e2a0      	LDI  R26,LOW(32)
001655 940e 1d3a 	CALL SUBOPT_0x48
001657 e2a1      	LDI  R26,LOW(33)
001658 940e 1d3a 	CALL SUBOPT_0x48
00165a e3a0      	LDI  R26,LOW(48)
00165b 940e 1d3a 	CALL SUBOPT_0x48
00165d e3a1      	LDI  R26,LOW(49)
00165e 940e 1d3a 	CALL SUBOPT_0x48
001660 e3a2      	LDI  R26,LOW(50)
001661 940e 1d3a 	CALL SUBOPT_0x48
001663 e3a5      	LDI  R26,LOW(53)
001664 940e 1d3a 	CALL SUBOPT_0x48
001666 e3a6      	LDI  R26,LOW(54)
001667 940e 1d3a 	CALL SUBOPT_0x48
001669 e3a7      	LDI  R26,LOW(55)
00166a df30      	RCALL _lcd_write_index_register
00166b e0a6      	LDI  R26,LOW(1030)
00166c e0b4      	LDI  R27,HIGH(1030)
00166d df35      	RCALL _lcd_write_wdr
00166e e3a8      	LDI  R26,LOW(56)
00166f df2b      	RCALL _lcd_write_index_register
001670 e0a6      	LDI  R26,LOW(6)
001671 e0b0      	LDI  R27,0
001672 df30      	RCALL _lcd_write_wdr
001673 e3a9      	LDI  R26,LOW(57)
001674 df26      	RCALL _lcd_write_index_register
001675 e0a4      	LDI  R26,LOW(1028)
001676 e0b4      	LDI  R27,HIGH(1028)
001677 df2b      	RCALL _lcd_write_wdr
001678 e3ac      	LDI  R26,LOW(60)
001679 940e 1d34 	CALL SUBOPT_0x47
00167b e3ad      	LDI  R26,LOW(61)
00167c df1e      	RCALL _lcd_write_index_register
00167d e0a8      	LDI  R26,LOW(2568)
00167e e0ba      	LDI  R27,HIGH(2568)
00167f df23      	RCALL _lcd_write_wdr
001680 e5a0      	LDI  R26,LOW(80)
001681 940e 1d3a 	CALL SUBOPT_0x48
001683 940e 1d47 	CALL SUBOPT_0x4A
001685 e5a2      	LDI  R26,LOW(82)
001686 940e 1d3a 	CALL SUBOPT_0x48
001688 940e 1d4e 	CALL SUBOPT_0x4B
00168a e6a0      	LDI  R26,LOW(96)
00168b df0f      	RCALL _lcd_write_index_register
00168c e0a0      	LDI  R26,LOW(42752)
00168d eab7      	LDI  R27,HIGH(42752)
00168e df14      	RCALL _lcd_write_wdr
00168f e6a1      	LDI  R26,LOW(97)
001690 940e 1d2a 	CALL SUBOPT_0x45
001692 e6aa      	LDI  R26,LOW(106)
001693 940e 1d3a 	CALL SUBOPT_0x48
001695 e8a0      	LDI  R26,LOW(128)
001696 940e 1d3a 	CALL SUBOPT_0x48
001698 e8a1      	LDI  R26,LOW(129)
001699 940e 1d3a 	CALL SUBOPT_0x48
00169b e8a2      	LDI  R26,LOW(130)
00169c 940e 1d3a 	CALL SUBOPT_0x48
00169e e8a3      	LDI  R26,LOW(131)
00169f 940e 1d3a 	CALL SUBOPT_0x48
0016a1 e8a4      	LDI  R26,LOW(132)
0016a2 940e 1d3a 	CALL SUBOPT_0x48
0016a4 e8a5      	LDI  R26,LOW(133)
0016a5 940e 1d3a 	CALL SUBOPT_0x48
0016a7 e9a0      	LDI  R26,LOW(144)
0016a8 def2      	RCALL _lcd_write_index_register
0016a9 e1a0      	LDI  R26,LOW(16)
0016aa e0b0      	LDI  R27,0
0016ab def7      	RCALL _lcd_write_wdr
0016ac e9a2      	LDI  R26,LOW(146)
0016ad 940e 1d3a 	CALL SUBOPT_0x48
0016af e9a3      	LDI  R26,LOW(147)
0016b0 deea      	RCALL _lcd_write_index_register
0016b1 e0a3      	LDI  R26,LOW(3)
0016b2 e0b0      	LDI  R27,0
0016b3 deef      	RCALL _lcd_write_wdr
0016b4 e9a5      	LDI  R26,LOW(149)
0016b5 dee5      	RCALL _lcd_write_index_register
0016b6 e1a0      	LDI  R26,LOW(272)
0016b7 e0b1      	LDI  R27,HIGH(272)
0016b8 deea      	RCALL _lcd_write_wdr
0016b9 e9a7      	LDI  R26,LOW(151)
0016ba 940e 1d3a 	CALL SUBOPT_0x48
0016bc e9a8      	LDI  R26,LOW(152)
0016bd 940e 1d3a 	CALL SUBOPT_0x48
0016bf e0a7      	LDI  R26,LOW(7)
0016c0 deda      	RCALL _lcd_write_index_register
0016c1 e3a3      	LDI  R26,LOW(307)
0016c2 e0b1      	LDI  R27,HIGH(307)
0016c3 dedf      	RCALL _lcd_write_wdr
0016c4 e2ab      	LDI  R26,LOW(43)
0016c5 ded5      	RCALL _lcd_write_index_register
0016c6 e0ad      	LDI  R26,LOW(13)
0016c7 e0b0      	LDI  R27,0
0016c8 deda      	RCALL _lcd_write_wdr
0016c9 df02      	RCALL _lcd_clear_screen
0016ca 9508      	RET
                 ; .FEND
                 _lcd_write_pixel:
                 ; .FSTART _lcd_write_pixel
0016cb 93ba      	ST   -Y,R27
0016cc 93aa      	ST   -Y,R26
                 ;	x -> Y+4
                 ;	y -> Y+2
                 ;	color -> Y+0
0016cd e2a0      	LDI  R26,LOW(32)
0016ce 940e 1d55 	CALL SUBOPT_0x4C
0016d0 940e 1d58 	CALL SUBOPT_0x4D
0016d2 e5a1      	LDI  R26,LOW(81)
0016d3 940e 1d55 	CALL SUBOPT_0x4C
0016d5 940e 1d61 	CALL SUBOPT_0x4E
0016d7 81a8      	LD   R26,Y
0016d8 81b9      	LDD  R27,Y+1
0016d9 dec9      	RCALL _lcd_write_wdr
0016da c012      	RJMP _0x20A0003
                 ; .FEND
                 _lcd_read_pixel:
                 ; .FSTART _lcd_read_pixel
0016db 93ba      	ST   -Y,R27
0016dc 93aa      	ST   -Y,R26
0016dd 931a      	ST   -Y,R17
0016de 930a      	ST   -Y,R16
                 ;	x -> Y+4
                 ;	y -> Y+2
                 ;	pixel -> R16,R17
0016df e2a0      	LDI  R26,LOW(32)
0016e0 940e 1d55 	CALL SUBOPT_0x4C
0016e2 940e 1d58 	CALL SUBOPT_0x4D
0016e4 e5a1      	LDI  R26,LOW(81)
0016e5 940e 1d55 	CALL SUBOPT_0x4C
0016e7 940e 1d61 	CALL SUBOPT_0x4E
0016e9 dec5      	RCALL _lcd_read_rdr
0016ea 018f      	MOVW R16,R30
0016eb 8119      	LDD  R17,Y+1
0016ec 8108      	LDD  R16,Y+0
                 _0x20A0003:
0016ed 9626      	ADIW R28,6
0016ee 9508      	RET
                 ; .FEND
                 _lcd_draw_line:
                 ; .FSTART _lcd_draw_line
0016ef 93ba      	ST   -Y,R27
0016f0 93aa      	ST   -Y,R26
0016f1 9722      	SBIW R28,2
0016f2 940e 201c 	CALL __SAVELOCR6
                 ;	x0 -> Y+16
                 ;	y0 -> Y+14
                 ;	x1 -> Y+12
                 ;	y1 -> Y+10
                 ;	color -> Y+8
                 ;	dy -> R16,R17
                 ;	dx -> R18,R19
                 ;	stepx -> R20,R21
                 ;	stepy -> Y+6
0016f4 85ae      	LDD  R26,Y+14
0016f5 85bf      	LDD  R27,Y+14+1
0016f6 85ea      	LDD  R30,Y+10
0016f7 85fb      	LDD  R31,Y+10+1
0016f8 1bea      	SUB  R30,R26
0016f9 0bfb      	SBC  R31,R27
0016fa 018f      	MOVW R16,R30
0016fb 89a8      	LDD  R26,Y+16
0016fc 89b9      	LDD  R27,Y+16+1
0016fd 85ec      	LDD  R30,Y+12
0016fe 85fd      	LDD  R31,Y+12+1
0016ff 1bea      	SUB  R30,R26
001700 0bfb      	SBC  R31,R27
001701 019f      	MOVW R18,R30
001702 2311      	TST  R17
001703 f43a      	BRPL _0x227
001704 01f8      	MOVW R30,R16
001705 940e 1ee4 	CALL __ANEGW1
001707 018f      	MOVW R16,R30
001708 efef      	LDI  R30,LOW(65535)
001709 efff      	LDI  R31,HIGH(65535)
00170a c002      	RJMP _0x2EE
                 _0x227:
00170b e0e1      	LDI  R30,LOW(1)
00170c e0f0      	LDI  R31,HIGH(1)
                 _0x2EE:
00170d 83ee      	STD  Y+6,R30
00170e 83ff      	STD  Y+6+1,R31
00170f 2333      	TST  R19
001710 f43a      	BRPL _0x229
001711 01f9      	MOVW R30,R18
001712 940e 1ee4 	CALL __ANEGW1
001714 019f      	MOVW R18,R30
                +
001715 ef4f     +LDI R20 , LOW ( - 1 )
001716 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
001717 c002      	RJMP _0x22A
                 _0x229:
                +
001718 e041     +LDI R20 , LOW ( 1 )
001719 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 _0x22A:
00171a 0f00      	LSL  R16
00171b 1f11      	ROL  R17
00171c 0f22      	LSL  R18
00171d 1f33      	ROL  R19
00171e 89e8      	LDD  R30,Y+16
00171f 89f9      	LDD  R31,Y+16+1
001720 93fa      	ST   -Y,R31
001721 93ea      	ST   -Y,R30
001722 89e8      	LDD  R30,Y+16
001723 89f9      	LDD  R31,Y+16+1
001724 93fa      	ST   -Y,R31
001725 93ea      	ST   -Y,R30
001726 85ac      	LDD  R26,Y+12
001727 85bd      	LDD  R27,Y+12+1
001728 dfa2      	RCALL _lcd_write_pixel
                +
001729 1702     +CP R16 , R18
00172a 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
00172b f51c      	BRGE _0x22B
00172c 9722      	SBIW R28,2
                 ;	x0 -> Y+18
                 ;	y0 -> Y+16
                 ;	x1 -> Y+14
                 ;	y1 -> Y+12
                 ;	color -> Y+10
                 ;	stepy -> Y+8
                 ;	fraction -> Y+0
00172d 01f9      	MOVW R30,R18
00172e 95f5      	ASR  R31
00172f 95e7      	ROR  R30
001730 01df      	MOVW R26,R30
001731 01f8      	MOVW R30,R16
001732 1bea      	SUB  R30,R26
001733 0bfb      	SBC  R31,R27
001734 83e8      	ST   Y,R30
001735 83f9      	STD  Y+1,R31
                 _0x22C:
001736 85ee      	LDD  R30,Y+14
001737 85ff      	LDD  R31,Y+14+1
001738 89aa      	LDD  R26,Y+18
001739 89bb      	LDD  R27,Y+18+1
00173a 17ea      	CP   R30,R26
00173b 07fb      	CPC  R31,R27
00173c f089      	BREQ _0x22E
00173d 81a9      	LDD  R26,Y+1
00173e 23aa      	TST  R26
00173f f042      	BRMI _0x22F
001740 940e 1d72 	CALL SUBOPT_0x4F
001742 81e8      	LD   R30,Y
001743 81f9      	LDD  R31,Y+1
001744 1be2      	SUB  R30,R18
001745 0bf3      	SBC  R31,R19
001746 83e8      	ST   Y,R30
001747 83f9      	STD  Y+1,R31
                 _0x22F:
001748 940e 1d7b 	CALL SUBOPT_0x50
00174a 01f8      	MOVW R30,R16
00174b 940e 1d83 	CALL SUBOPT_0x51
00174d cfe8      	RJMP _0x22C
                 _0x22E:
00174e c022      	RJMP _0x2EF
                 _0x22B:
00174f 9722      	SBIW R28,2
                 ;	x0 -> Y+18
                 ;	y0 -> Y+16
                 ;	x1 -> Y+14
                 ;	y1 -> Y+12
                 ;	color -> Y+10
                 ;	stepy -> Y+8
                 ;	fraction -> Y+0
001750 01f8      	MOVW R30,R16
001751 95f5      	ASR  R31
001752 95e7      	ROR  R30
001753 01df      	MOVW R26,R30
001754 01f9      	MOVW R30,R18
001755 1bea      	SUB  R30,R26
001756 0bfb      	SBC  R31,R27
001757 83e8      	ST   Y,R30
001758 83f9      	STD  Y+1,R31
                 _0x231:
001759 85ec      	LDD  R30,Y+12
00175a 85fd      	LDD  R31,Y+12+1
00175b 89a8      	LDD  R26,Y+16
00175c 89b9      	LDD  R27,Y+16+1
00175d 17ea      	CP   R30,R26
00175e 07fb      	CPC  R31,R27
00175f f089      	BREQ _0x233
001760 81a9      	LDD  R26,Y+1
001761 23aa      	TST  R26
001762 f042      	BRMI _0x234
001763 940e 1d7b 	CALL SUBOPT_0x50
001765 81e8      	LD   R30,Y
001766 81f9      	LDD  R31,Y+1
001767 1be0      	SUB  R30,R16
001768 0bf1      	SBC  R31,R17
001769 83e8      	ST   Y,R30
00176a 83f9      	STD  Y+1,R31
                 _0x234:
00176b 940e 1d72 	CALL SUBOPT_0x4F
00176d 01f9      	MOVW R30,R18
00176e 940e 1d83 	CALL SUBOPT_0x51
001770 cfe8      	RJMP _0x231
                 _0x233:
                 _0x2EF:
001771 9622      	ADIW R28,2
001772 940e 2023 	CALL __LOADLOCR6
001774 9662      	ADIW R28,18
001775 9508      	RET
                 ; .FEND
                 _lcd_draw_rectangle:
                 ; .FSTART _lcd_draw_rectangle
001776 93ba      	ST   -Y,R27
001777 93aa      	ST   -Y,R26
                 ;	x0 -> Y+9
                 ;	y0 -> Y+7
                 ;	x1 -> Y+5
                 ;	y1 -> Y+3
                 ;	fill -> Y+2
                 ;	color -> Y+0
001778 81ea      	LDD  R30,Y+2
001779 30e0      	CPI  R30,0
00177a f1e1      	BREQ _0x235
00177b 9723      	SBIW R28,3
                 ;	x0 -> Y+12
                 ;	y0 -> Y+10
                 ;	x1 -> Y+8
                 ;	y1 -> Y+6
                 ;	fill -> Y+5
                 ;	color -> Y+3
                 ;	counter_x -> Y+1
                 ;	counter_y -> Y+0
00177c e2a0      	LDI  R26,LOW(32)
00177d 940e 1d95 	CALL SUBOPT_0x52
00177f e2a1      	LDI  R26,LOW(33)
001780 940e 1d9b 	CALL SUBOPT_0x53
001782 e5a0      	LDI  R26,LOW(80)
001783 940e 1d95 	CALL SUBOPT_0x52
001785 e5a1      	LDI  R26,LOW(81)
001786 de14      	RCALL _lcd_write_index_register
001787 85a8      	LDD  R26,Y+8
001788 85b9      	LDD  R27,Y+8+1
001789 de19      	RCALL _lcd_write_wdr
00178a e5a2      	LDI  R26,LOW(82)
00178b 940e 1d9b 	CALL SUBOPT_0x53
00178d e5a3      	LDI  R26,LOW(83)
00178e de0c      	RCALL _lcd_write_index_register
00178f 81ae      	LDD  R26,Y+6
001790 81bf      	LDD  R27,Y+6+1
001791 de11      	RCALL _lcd_write_wdr
001792 e2a2      	LDI  R26,LOW(34)
001793 de07      	RCALL _lcd_write_index_register
001794 85ea      	LDD  R30,Y+10
001795 83e8      	ST   Y,R30
                 _0x237:
001796 81ee      	LDD  R30,Y+6
001797 81ff      	LDD  R31,Y+6+1
001798 81a8      	LD   R26,Y
001799 e0b0      	LDI  R27,0
00179a 17ea      	CP   R30,R26
00179b 07fb      	CPC  R31,R27
00179c f0c4      	BRLT _0x238
00179d 85ec      	LDD  R30,Y+12
00179e 85fd      	LDD  R31,Y+12+1
00179f 83e9      	STD  Y+1,R30
0017a0 83fa      	STD  Y+1+1,R31
                 _0x23A:
0017a1 85e8      	LDD  R30,Y+8
0017a2 85f9      	LDD  R31,Y+8+1
0017a3 81a9      	LDD  R26,Y+1
0017a4 81ba      	LDD  R27,Y+1+1
0017a5 17ea      	CP   R30,R26
0017a6 07fb      	CPC  R31,R27
0017a7 f048      	BRLO _0x23B
0017a8 81ab      	LDD  R26,Y+3
0017a9 81bc      	LDD  R27,Y+3+1
0017aa ddf8      	RCALL _lcd_write_wdr
0017ab 81e9      	LDD  R30,Y+1
0017ac 81fa      	LDD  R31,Y+1+1
0017ad 9631      	ADIW R30,1
0017ae 83e9      	STD  Y+1,R30
0017af 83fa      	STD  Y+1+1,R31
0017b0 cff0      	RJMP _0x23A
                 _0x23B:
0017b1 81e8      	LD   R30,Y
0017b2 5fef      	SUBI R30,-LOW(1)
0017b3 83e8      	ST   Y,R30
0017b4 cfe1      	RJMP _0x237
                 _0x238:
0017b5 9623      	ADIW R28,3
0017b6 c022      	RJMP _0x23C
                 _0x235:
0017b7 940e 1da1 	CALL SUBOPT_0x54
0017b9 940e 1da1 	CALL SUBOPT_0x54
0017bb 940e 1da1 	CALL SUBOPT_0x54
0017bd 940e 1da6 	CALL SUBOPT_0x55
0017bf 940e 1dab 	CALL SUBOPT_0x56
0017c1 940e 1da1 	CALL SUBOPT_0x54
0017c3 940e 1da1 	CALL SUBOPT_0x54
0017c5 940e 1da1 	CALL SUBOPT_0x54
0017c7 940e 1dab 	CALL SUBOPT_0x56
0017c9 940e 1db4 	CALL SUBOPT_0x57
0017cb 940e 1da1 	CALL SUBOPT_0x54
0017cd 85a8      	LDD  R26,Y+8
0017ce 85b9      	LDD  R27,Y+8+1
0017cf df1f      	RCALL _lcd_draw_line
0017d0 940e 1da1 	CALL SUBOPT_0x54
0017d2 940e 1db4 	CALL SUBOPT_0x57
0017d4 940e 1da6 	CALL SUBOPT_0x55
0017d6 85a8      	LDD  R26,Y+8
0017d7 85b9      	LDD  R27,Y+8+1
0017d8 df16      	RCALL _lcd_draw_line
                 _0x23C:
0017d9 962b      	ADIW R28,11
0017da 9508      	RET
                 ; .FEND
                 _lcd_draw_circle:
                 ; .FSTART _lcd_draw_circle
0017db 940e 1b33 	CALL SUBOPT_0x0
                 ;	x0 -> Y+13
                 ;	y0 -> Y+11
                 ;	radius -> Y+9
                 ;	fill -> Y+8
                 ;	color -> Y+6
                 ;	x_offset -> R16,R17
                 ;	y_offset -> R18,R19
                 ;	error -> R20,R21
                +
0017dd e000     +LDI R16 , LOW ( 0 )
0017de e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0017df 8529     +LDD R18 , Y + 9
0017e0 853a     +LDD R19 , Y + 9 + 1
                 	__GETWRS 18,19,9
0017e1 85a9      	LDD  R26,Y+9
0017e2 85ba      	LDD  R27,Y+9+1
0017e3 e0e1      	LDI  R30,LOW(1)
0017e4 e0f0      	LDI  R31,HIGH(1)
0017e5 1bea      	SUB  R30,R26
0017e6 0bfb      	SBC  R31,R27
0017e7 01af      	MOVW R20,R30
                 _0x23E:
0017e8 85e8      	LDD  R30,Y+8
0017e9 30e0      	CPI  R30,0
0017ea f199      	BREQ _0x240
0017eb 940e 1db9 	CALL SUBOPT_0x58
0017ed 01f9      	MOVW R30,R18
0017ee 940e 1dc0 	CALL SUBOPT_0x59
0017f0 940e 1dc7 	CALL SUBOPT_0x5A
0017f2 940e 1dcf 	CALL SUBOPT_0x5B
0017f4 940e 1dd7 	CALL SUBOPT_0x5C
0017f6 940e 1db9 	CALL SUBOPT_0x58
0017f8 940e 1ddb 	CALL SUBOPT_0x5D
0017fa 940e 1dc7 	CALL SUBOPT_0x5A
0017fc 89e9      	LDD  R30,Y+17
0017fd 89fa      	LDD  R31,Y+17+1
0017fe 1be2      	SUB  R30,R18
0017ff 0bf3      	SBC  R31,R19
001800 93fa      	ST   -Y,R31
001801 93ea      	ST   -Y,R30
001802 940e 1dd7 	CALL SUBOPT_0x5C
001804 940e 1ddb 	CALL SUBOPT_0x5D
001806 01f8      	MOVW R30,R16
001807 940e 1dc0 	CALL SUBOPT_0x59
001809 940e 1dcf 	CALL SUBOPT_0x5B
00180b 940e 1dc7 	CALL SUBOPT_0x5A
00180d 940e 1dd7 	CALL SUBOPT_0x5C
00180f 940e 1ddb 	CALL SUBOPT_0x5D
001811 940e 1db9 	CALL SUBOPT_0x58
001813 940e 1dcf 	CALL SUBOPT_0x5B
001815 89e9      	LDD  R30,Y+17
001816 89fa      	LDD  R31,Y+17+1
001817 1be0      	SUB  R30,R16
001818 0bf1      	SBC  R31,R17
001819 93fa      	ST   -Y,R31
00181a 93ea      	ST   -Y,R30
00181b 940e 1dd7 	CALL SUBOPT_0x5C
00181d c030      	RJMP _0x241
                 _0x240:
00181e 940e 1de2 	CALL SUBOPT_0x5E
001820 940e 1de9 	CALL SUBOPT_0x5F
001822 940e 1df0 	CALL SUBOPT_0x60
001824 940e 1de9 	CALL SUBOPT_0x5F
001826 940e 1de2 	CALL SUBOPT_0x5E
001828 940e 1df0 	CALL SUBOPT_0x60
00182a 940e 1db9 	CALL SUBOPT_0x58
00182c 940e 1de9 	CALL SUBOPT_0x5F
00182e 940e 1df0 	CALL SUBOPT_0x60
001830 940e 1ddb 	CALL SUBOPT_0x5D
001832 940e 1de2 	CALL SUBOPT_0x5E
001834 940e 1df0 	CALL SUBOPT_0x60
001836 940e 1de9 	CALL SUBOPT_0x5F
001838 940e 1db9 	CALL SUBOPT_0x58
00183a 940e 1df0 	CALL SUBOPT_0x60
00183c 940e 1de2 	CALL SUBOPT_0x5E
00183e 940e 1ddb 	CALL SUBOPT_0x5D
001840 940e 1df0 	CALL SUBOPT_0x60
001842 940e 1db9 	CALL SUBOPT_0x58
001844 940e 1ddb 	CALL SUBOPT_0x5D
001846 940e 1df0 	CALL SUBOPT_0x60
001848 940e 1ddb 	CALL SUBOPT_0x5D
00184a 940e 1db9 	CALL SUBOPT_0x58
00184c 940e 1df0 	CALL SUBOPT_0x60
                 _0x241:
00184e 2355      	TST  R21
00184f f43a      	BRPL _0x242
001850 01f8      	MOVW R30,R16
                +
001851 5f0f     +SUBI R16 , LOW ( - 1 )
001852 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
001853 0fee      	LSL  R30
001854 1fff      	ROL  R31
001855 9633      	ADIW R30,3
001856 c010      	RJMP _0x2F0
                 _0x242:
001857 931f      	PUSH R17
001858 930f      	PUSH R16
                +
001859 5f0f     +SUBI R16 , LOW ( - 1 )
00185a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00185b 01f9      	MOVW R30,R18
                +
00185c 5021     +SUBI R18 , LOW ( 1 )
00185d 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
00185e 91af      	POP  R26
00185f 91bf      	POP  R27
001860 940e 2001 	CALL __SWAPW12
001862 1bea      	SUB  R30,R26
001863 0bfb      	SBC  R31,R27
001864 0fee      	LSL  R30
001865 1fff      	ROL  R31
001866 9635      	ADIW R30,5
                 _0x2F0:
                +
001867 0f4e     +ADD R20 , R30
001868 1f5f     +ADC R21 , R31
                 	__ADDWRR 20,21,30,31
                +
001869 1720     +CP R18 , R16
00186a 0731     +CPC R19 , R17
                 	__CPWRR 18,19,16,17
00186b f00c      	BRLT _0x23F
00186c cf7b      	RJMP _0x23E
                 _0x23F:
00186d 940e 2023 	CALL __LOADLOCR6
00186f 962f      	ADIW R28,15
001870 9508      	RET
                 ; .FEND
                 ;	x -> Y+12
                 ;	y -> Y+10
                 ;	*pointer -> Y+8
                 ;	counter -> Y+4
                 ;	compare_value -> Y+0
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
001871 940e 1b33 	CALL SUBOPT_0x0
                 ;	character -> Y+11
                 ;	forground_color -> Y+9
                 ;	transparent_mode -> Y+8
                 ;	background_color -> Y+6
                 ;	width_counter -> R16,R17
                 ;	length_counter -> R18,R19
                 ;	character_segment_data -> R21
                +
001873 e020     +LDI R18 , LOW ( 0 )
001874 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x248:
                +
001875 3120     +CPI R18 , LOW ( 16 )
001876 e0e0     +LDI R30 , HIGH ( 16 )
001877 073e     +CPC R19 , R30
                 	__CPWRN 18,19,16
001878 f00c      	BRLT PC+2
001879 c045      	RJMP _0x249
00187a 85eb      	LDD  R30,Y+11
00187b e0f0      	LDI  R31,0
00187c 0fee      	LSL  R30
00187d 1fff      	ROL  R31
00187e 940e 1f08 	CALL __LSLW4
001880 5aec      	SUBI R30,LOW(-_font12x16*2)
001881 4fff      	SBCI R31,HIGH(-_font12x16*2)
001882 01df      	MOVW R26,R30
001883 01f9      	MOVW R30,R18
001884 0fee      	LSL  R30
001885 1fff      	ROL  R31
001886 0fea      	ADD  R30,R26
001887 1ffb      	ADC  R31,R27
001888 91e4      	LPM  R30,Z
001889 2f5e      	MOV  R21,R30
                +
00188a e000     +LDI R16 , LOW ( 0 )
00188b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x24B:
                +
00188c 3008     +CPI R16 , LOW ( 8 )
00188d e0e0     +LDI R30 , HIGH ( 8 )
00188e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00188f f564      	BRGE _0x24C
001890 2fe0      	MOV  R30,R16
001891 e8a0      	LDI  R26,LOW(128)
001892 940e 1ee8 	CALL __LSRB12
001894 23e5      	AND  R30,R21
001895 f029      	BREQ _0x24D
001896 940e 1df4 	CALL SUBOPT_0x61
001898 85ad      	LDD  R26,Y+13
001899 85be      	LDD  R27,Y+13+1
00189a c01d      	RJMP _0x2F1
                 _0x24D:
00189b 85e8      	LDD  R30,Y+8
00189c 30e0      	CPI  R30,0
00189d f429      	BRNE _0x24F
00189e 940e 1df4 	CALL SUBOPT_0x61
0018a0 85aa      	LDD  R26,Y+10
0018a1 85bb      	LDD  R27,Y+10+1
0018a2 c015      	RJMP _0x2F1
                 _0x24F:
0018a3 91a0 048f 	LDS  R26,_x_text
0018a5 e0e8      	LDI  R30,LOW(8)
0018a6 9fea      	MUL  R30,R26
0018a7 01f0      	MOVW R30,R0
0018a8 0fe0      	ADD  R30,R16
0018a9 1ff1      	ADC  R31,R17
0018aa 01bf      	MOVW R22,R30
0018ab 93fa      	ST   -Y,R31
0018ac 93ea      	ST   -Y,R30
0018ad 940e 1e07 	CALL SUBOPT_0x62
0018af 93fa      	ST   -Y,R31
0018b0 93ea      	ST   -Y,R30
0018b1 937a      	ST   -Y,R23
0018b2 936a      	ST   -Y,R22
0018b3 940e 1e07 	CALL SUBOPT_0x62
0018b5 01df      	MOVW R26,R30
0018b6 de24      	RCALL _lcd_read_pixel
0018b7 01df      	MOVW R26,R30
                 _0x2F1:
0018b8 de12      	RCALL _lcd_write_pixel
                +
0018b9 5f0f     +SUBI R16 , LOW ( - 1 )
0018ba 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0018bb cfd0      	RJMP _0x24B
                 _0x24C:
                +
0018bc 5f2f     +SUBI R18 , LOW ( - 1 )
0018bd 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0018be cfb6      	RJMP _0x248
                 _0x249:
0018bf 91a0 048f 	LDS  R26,_x_text
0018c1 5faf      	SUBI R26,-LOW(1)
0018c2 93a0 048f 	STS  _x_text,R26
0018c4 31ae      	CPI  R26,LOW(0x1E)
0018c5 f060      	BRLO _0x251
0018c6 e0e0      	LDI  R30,LOW(0)
0018c7 93e0 048f 	STS  _x_text,R30
0018c9 91a0 0490 	LDS  R26,_y_text
0018cb 5faf      	SUBI R26,-LOW(1)
0018cc 93a0 0490 	STS  _y_text,R26
0018ce 31a4      	CPI  R26,LOW(0x14)
0018cf f010      	BRLO _0x252
0018d0 93e0 0490 	STS  _y_text,R30
                 _0x252:
                 _0x251:
0018d2 940e 2023 	CALL __LOADLOCR6
0018d4 962c      	ADIW R28,12
0018d5 9508      	RET
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0018d6 93ba      	ST   -Y,R27
0018d7 93aa      	ST   -Y,R26
                 ;	*string -> Y+5
                 ;	forground_color -> Y+3
                 ;	background_color_activation -> Y+2
                 ;	background_color -> Y+0
                 _0x253:
0018d8 81ed      	LDD  R30,Y+5
0018d9 81fe      	LDD  R31,Y+5+1
0018da 91e4      	LPM  R30,Z
0018db 30e0      	CPI  R30,0
0018dc f091      	BREQ _0x255
0018dd 81ed      	LDD  R30,Y+5
0018de 81fe      	LDD  R31,Y+5+1
0018df 9631      	ADIW R30,1
0018e0 83ed      	STD  Y+5,R30
0018e1 83fe      	STD  Y+5+1,R31
0018e2 9731      	SBIW R30,1
0018e3 91e4      	LPM  R30,Z
0018e4 93ea      	ST   -Y,R30
0018e5 81ec      	LDD  R30,Y+4
0018e6 81fd      	LDD  R31,Y+4+1
0018e7 93fa      	ST   -Y,R31
0018e8 93ea      	ST   -Y,R30
0018e9 81ed      	LDD  R30,Y+5
0018ea 93ea      	ST   -Y,R30
0018eb 81ac      	LDD  R26,Y+4
0018ec 81bd      	LDD  R27,Y+4+1
0018ed df83      	RCALL _lcd_putchar
0018ee cfe9      	RJMP _0x253
                 _0x255:
                 _0x20A0002:
0018ef 9627      	ADIW R28,7
0018f0 9508      	RET
                 ; .FEND
                 ;	*string -> Y+5
                 ;	forground_color -> Y+3
                 ;	background_color_activation -> Y+2
                 ;	background_color -> Y+0
                 ;	x0 -> Y+30
                 ;	y0 -> Y+28
                 ;	d -> Y+26
                 ;	l -> Y+24
                 ;	alpha -> Y+22
                 ;	color -> Y+20
                 ;	alpha1 -> Y+16
                 ;	teta -> Y+12
                 ;	r -> Y+8
                 ;	x1 -> R16,R17
                 ;	x2 -> R18,R19
                 ;	y1 -> R20,R21
                 ;	y2 -> Y+6
                 ;	x0 -> Y+17
                 ;	y0 -> Y+15
                 ;	x1 -> Y+13
                 ;	y1 -> Y+11
                 ;	rad -> Y+9
                 ;	fill -> Y+8
                 ;	color -> Y+6
                 ;	a -> R16,R17
                 ;	b -> R18,R19
                 ;	P -> R20,R21
                 ;	x0 -> Y+21
                 ;	y0 -> Y+19
                 ;	a -> Y+17
                 ;	b -> Y+15
                 ;	fill -> Y+14
                 ;	color -> Y+12
                 ;	x11 -> R16,R17
                 ;	x12 -> R18,R19
                 ;	x21 -> R20,R21
                 ;	x22 -> Y+10
                 ;	y1 -> Y+8
                 ;	y2 -> Y+6
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0018f1 93ba      	ST   -Y,R27
0018f2 93aa      	ST   -Y,R26
                 ;	x -> Y+2
                 ;	y -> Y+0
0018f3 81aa      	LDD  R26,Y+2
0018f4 81bb      	LDD  R27,Y+2+1
0018f5 975e      	SBIW R26,30
0018f6 f424      	BRGE _0x273
0018f7 81a8      	LD   R26,Y
0018f8 81b9      	LDD  R27,Y+1
0018f9 9754      	SBIW R26,20
0018fa f0cc      	BRLT _0x272
                 _0x273:
0018fb 81aa      	LDD  R26,Y+2
0018fc 81bb      	LDD  R27,Y+2+1
0018fd efe0      	LDI  R30,LOW(240)
0018fe e0f0      	LDI  R31,HIGH(240)
0018ff 940e 1f7a 	CALL __DIVW21
001901 01df      	MOVW R26,R30
001902 e0e8      	LDI  R30,LOW(8)
001903 e0f0      	LDI  R31,HIGH(8)
001904 940e 1f7a 	CALL __DIVW21
001906 81a8      	LD   R26,Y
001907 81b9      	LDD  R27,Y+1
001908 0fea      	ADD  R30,R26
001909 1ffb      	ADC  R31,R27
00190a 83e8      	ST   Y,R30
00190b 83f9      	STD  Y+1,R31
00190c 81aa      	LDD  R26,Y+2
00190d 81bb      	LDD  R27,Y+2+1
00190e e1ee      	LDI  R30,LOW(30)
00190f e0f0      	LDI  R31,HIGH(30)
001910 940e 1fa4 	CALL __MODW21
001912 83ea      	STD  Y+2,R30
001913 83fb      	STD  Y+2+1,R31
                 _0x272:
001914 81ea      	LDD  R30,Y+2
001915 93e0 048f 	STS  _x_text,R30
001917 81e8      	LD   R30,Y
001918 93e0 0490 	STS  _y_text,R30
                 _0x20A0001:
00191a 9624      	ADIW R28,4
00191b 9508      	RET
                 ; .FEND
                 ;	x0 -> Y+19
                 ;	y0 -> Y+17
                 ;	x1 -> Y+15
                 ;	y1 -> Y+13
                 ;	font_color -> Y+11
                 ;	*string -> Y+9
                 ;	width_counter -> R16,R17
                 ;	length_counter -> R18,R19
                 ;	xx -> R20,R21
                 ;	character_segment_data -> Y+8
                 ;	character -> Y+7
                 ;	s -> Y+6
                 ;	a -> R16,R17
                 ;	R -> R18,R19
                 ;	G -> R20,R21
                 ;	B -> Y+8
                 ;	b -> Y+6
                 ;
                 ; //================================================================
                 ;
                 ; //declare your global variables here
                 ; #define BUFFER_SIZE 721               //every row is 240 RGB pixels and 240*3=720
                 ; unsigned char buffer[BUFFER_SIZE];    //The data of every row will be saved in this buffer
                 ; FATFS Fs;
                 ; WORD w_br;                            //used in pf_read function
                 ; FRESULT _result1;                     //used to check the result(explained in the papers)
                 ; FRESULT res;
                 ; WORD WriteIndex;
                 ; unsigned long int x=0,y=0;
                 ; unsigned char MYBUFFER[7]={0};
                 ; unsigned int ADDR=0;                  //Address of data we want to read in bmp file
                 ; unsigned int i1=0,i2=0,i3=0;               //Loop counters
                 ; unsigned char r,g,b;                  //Used for merging pixel colors in bmp to an int number
                 ; unsigned long int color=0,tcolor;
                 ; unsigned char count=0xffff,count1=0;
                 
                 	.DSEG
                 ;
                 ;
                 ;/***declaration of subfunctions***/
                 ;
                 ;  unsigned long int bmp_height(void){        //subfunction to get bmp picture height
                 ; 0000 0052 unsigned long int bmp_height(void){
                 
                 	.CSEG
                 ; 0000 0053     unsigned long int height;
                 ; 0000 0054     pf_lseek(0x16);                          /* The bmp file contains much informations except
                 ; 0000 0055                                                 pixels colors such as the volume and the height and
                 ; 0000 0056                                                 the width of the pic and in address 0x16 there are 4 bytes show
                 ; 0000 0057                                                 the height of the bmp pic */
                 ;	height -> Y+0
                 ; 0000 0058     pf_read(&buffer,4,&w_br);
                 ; 0000 0059     height=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];//calculations
                 ; 0000 005A     return height;
                 ; 0000 005B   }
                 ;
                 ;  unsigned long int bmp_width(void){         //subfunction to get bmp picture width
                 ; 0000 005D unsigned long int bmp_width(void){
                 ; 0000 005E     unsigned long int width=0;
                 ; 0000 005F     pf_lseek(0x12);                         /* The bmp file contains much informations except
                 ; 0000 0060                                                 pixels colors such as the volume and the height and
                 ; 0000 0061                                                 the width of the pic and in address 0x12 there are 4 bytes show
                 ; 0000 0062                                                 the width of the bmp pic */
                 ;	width -> Y+0
                 ; 0000 0063     pf_read(&buffer,4,&w_br);
                 ; 0000 0064     width=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0]; //calculations
                 ; 0000 0065     return width;
                 ; 0000 0066   }
                 ;
                 ; void showbmp(void){
                 ; 0000 0068 void showbmp(void){
                 _showbmp:
                 ; .FSTART _showbmp
                 ; 0000 0069 
                 ; 0000 006A         //First settings
                 ; 0000 006B      lcd_write_index_register(TS_INS_GRAM_ADX);
00191c e2a0      	LDI  R26,LOW(32)
00191d 940e 1d3a 	CALL SUBOPT_0x48
                 ; 0000 006C      lcd_write_wdr(0);
                 ; 0000 006D      lcd_write_index_register(TS_INS_START_ADX);
00191f e5a0      	LDI  R26,LOW(80)
001920 940e 1d3a 	CALL SUBOPT_0x48
                 ; 0000 006E      lcd_write_wdr(0);
                 ; 0000 006F      lcd_write_index_register(TS_INS_END_ADX);
001922 940e 1d47 	CALL SUBOPT_0x4A
                 ; 0000 0070      lcd_write_wdr(239);
                 ; 0000 0071 
                 ; 0000 0072      lcd_write_index_register(TS_INS_END_ADY);
001924 940e 1d4e 	CALL SUBOPT_0x4B
                 ; 0000 0073      lcd_write_wdr(319);
                 ; 0000 0074      lcd_write_index_register(TS_INS_START_ADY);
001926 e5a2      	LDI  R26,LOW(82)
001927 940e 1d3a 	CALL SUBOPT_0x48
                 ; 0000 0075      lcd_write_wdr(0);
                 ; 0000 0076      for(y=0;y<321;y++){        //main loop to put the image
001929 940e 1e0f 	CALL SUBOPT_0x63
                 _0x290:
00192b 91a0 0791 	LDS  R26,_y
00192d 91b0 0792 	LDS  R27,_y+1
00192f 9180 0793 	LDS  R24,_y+2
001931 9190 0794 	LDS  R25,_y+3
                +
001933 34a1     +CPI R26 , LOW ( 0x141 )
001934 e0e1     +LDI R30 , HIGH ( 0x141 )
001935 07be     +CPC R27 , R30
001936 e0e0     +LDI R30 , BYTE3 ( 0x141 )
001937 078e     +CPC R24 , R30
001938 e0e0     +LDI R30 , BYTE4 ( 0x141 )
001939 079e     +CPC R25 , R30
                 	__CPD2N 0x141
00193a f008      	BRLO PC+2
00193b c070      	RJMP _0x291
                 ; 0000 0077                                 //This is the fastest way to show the pic
                 ; 0000 0078       lcd_write_index_register(TS_INS_GRAM_ADY);
00193c e2a1      	LDI  R26,LOW(33)
00193d dc5d      	RCALL _lcd_write_index_register
                 ; 0000 0079       lcd_write_wdr(y);
00193e 91a0 0791 	LDS  R26,_y
001940 91b0 0792 	LDS  R27,_y+1
001942 dc60      	RCALL _lcd_write_wdr
                 ; 0000 007A       lcd_write_index_register(TS_INS_RW_GRAM);
001943 e2a2      	LDI  R26,LOW(34)
001944 dc56      	RCALL _lcd_write_index_register
                 ; 0000 007B       res=pf_read(&buffer,720,&w_br);
001945 940e 1e19 	CALL SUBOPT_0x64
001947 ede0      	LDI  R30,LOW(720)
001948 e0f2      	LDI  R31,HIGH(720)
001949 940e 1e1e 	CALL SUBOPT_0x65
00194b 93e0 0790 	STS  _res,R30
                 ; 0000 007C       CS_LOW;                        //It defined in the header ==> CS--> 0 volt
00194d 9893      	CBI  0x12,3
                 ; 0000 007D       RS_HIGH;                      //RS ---> 5 volt
00194e 9a92      	SBI  0x12,2
                 ; 0000 007E 
                 ; 0000 007F       for(i1=0;i1<720;i1+=3){           //convert 888 format to 565 .
00194f e0e0      	LDI  R30,LOW(0)
001950 93e0 0797 	STS  _i1,R30
001952 93e0 0798 	STS  _i1+1,R30
                 _0x297:
001954 91a0 0797 	LDS  R26,_i1
001956 91b0 0798 	LDS  R27,_i1+1
001958 3da0      	CPI  R26,LOW(0x2D0)
001959 e0e2      	LDI  R30,HIGH(0x2D0)
00195a 07be      	CPC  R27,R30
00195b f008      	BRLO PC+2
00195c c049      	RJMP _0x298
                 ; 0000 0080 
                 ; 0000 0081                 r=buffer[i1];
00195d 940e 1e24 	CALL SUBOPT_0x66
00195f 56ef      	SUBI R30,LOW(-_buffer)
001960 4ffb      	SBCI R31,HIGH(-_buffer)
001961 81e0      	LD   R30,Z
001962 93e0 0799 	STS  _r,R30
                 ; 0000 0082                 g=buffer[i1+1];
001964 940e 1e24 	CALL SUBOPT_0x66
                +
001966 56ee     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
001967 4ffb     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
001968 81e0      	LD   R30,Z
001969 93e0 079a 	STS  _g,R30
                 ; 0000 0083                 b=buffer[i1+2];
00196b 940e 1e24 	CALL SUBOPT_0x66
                +
00196d 56ed     +SUBI R30 , LOW ( - _buffer - ( 2 ) )
00196e 4ffb     +SBCI R31 , HIGH ( - _buffer - ( 2 ) )
                 	__ADDW1MN _buffer,2
00196f 81e0      	LD   R30,Z
001970 93e0 079b 	STS  _b,R30
                 ; 0000 0084                 color=r>>3;
001972 91e0 0799 	LDS  R30,_r
001974 e0f0      	LDI  R31,0
001975 940e 1f11 	CALL __ASRW3
001977 940e 1f30 	CALL __CWD1
001979 940e 1e29 	CALL SUBOPT_0x67
                 ; 0000 0085                 color<<=6;
00197b 940e 1e32 	CALL SUBOPT_0x68
00197d e0e6      	LDI  R30,LOW(6)
00197e 940e 1ef0 	CALL __LSLD12
001980 940e 1e29 	CALL SUBOPT_0x67
                 ; 0000 0086                 tcolor=g>>2;
001982 91e0 079a 	LDS  R30,_g
001984 e0f0      	LDI  R31,0
001985 940e 1f13 	CALL __ASRW2
001987 940e 1e3b 	CALL SUBOPT_0x69
                 ; 0000 0087                 color+=tcolor;
                 ; 0000 0088                 color<<=5;
001989 e0e5      	LDI  R30,LOW(5)
00198a 940e 1ef0 	CALL __LSLD12
00198c 940e 1e29 	CALL SUBOPT_0x67
                 ; 0000 0089                 tcolor=b>>3;
00198e 91e0 079b 	LDS  R30,_b
001990 e0f0      	LDI  R31,0
001991 940e 1f11 	CALL __ASRW3
001993 940e 1e3b 	CALL SUBOPT_0x69
                 ; 0000 008A                 color+=tcolor;
                 ; 0000 008B                 LCD_DATAPORT_MSB_PORT=(color>>8);
001995 e0e8      	LDI  R30,LOW(8)
001996 940e 1efc 	CALL __LSRD12
001998 bbeb      	OUT  0x1B,R30
                 ; 0000 008C                 LCD_DATAPORT_LSB_PORT=color;
001999 91e0 079c 	LDS  R30,_color
00199b bbe5      	OUT  0x15,R30
                 ; 0000 008D                 WR_LOW;
00199c 9891      	CBI  0x12,1
                 ; 0000 008E                 WR_HIGH;
00199d 9a91      	SBI  0x12,1
                 ; 0000 008F       }
00199e 940e 1e24 	CALL SUBOPT_0x66
0019a0 9633      	ADIW R30,3
0019a1 93e0 0797 	STS  _i1,R30
0019a3 93f0 0798 	STS  _i1+1,R31
0019a5 cfae      	RJMP _0x297
                 _0x298:
                 ; 0000 0090       CS_HIGH;
0019a6 9a93      	SBI  0x12,3
                 ; 0000 0091       }
0019a7 e9a1      	LDI  R26,LOW(_y)
0019a8 e0b7      	LDI  R27,HIGH(_y)
0019a9 940e 1bd4 	CALL SUBOPT_0x19
0019ab cf7f      	RJMP _0x290
                 _0x291:
                 ; 0000 0092      y=0;
0019ac 940e 1e0f 	CALL SUBOPT_0x63
                 ; 0000 0093  }
0019ae 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0098 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0099 //// SPI initialization to use SD card
                 ; 0000 009A //// SPI disabled
                 ; 0000 009B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0019af e0e0      	LDI  R30,LOW(0)
0019b0 b9ed      	OUT  0xD,R30
                 ; 0000 009C 
                 ; 0000 009D  lcd_init();                        // LCD initialization
0019b1 dc33      	RCALL _lcd_init
                 ; 0000 009E  lcd_background_color(0xff80);      /*  Set the color of background, you can use
                 ; 0000 009F                                         COLOURCO website to get the colour scheme*/
0019b2 e8a0      	LDI  R26,LOW(65408)
0019b3 efbf      	LDI  R27,HIGH(65408)
0019b4 dc23      	RCALL _lcd_background_color
                 ; 0000 00A0 
                 ; 0000 00A1  lcd_putsf("Designed by:",0x01ff,0,0xff80);    //Write on display(To see how it works refer to library)
                +
0019b5 eaee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0019b6 e1f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0019b7 940e 1e4a 	CALL SUBOPT_0x6A
0019b9 940e 1e4d 	CALL SUBOPT_0x6B
                 ; 0000 00A2  lcd_gotoxy(0,1);                              // Change the cursur position
0019bb 940e 1e53 	CALL SUBOPT_0x6C
0019bd e0a1      	LDI  R26,LOW(1)
0019be e0b0      	LDI  R27,0
0019bf df31      	RCALL _lcd_gotoxy
                 ; 0000 00A3  lcd_putsf("    Mohammad Dehghani   ",0x01ff,0,0xff80);
                +
0019c0 ebeb     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
0019c1 e1f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
0019c2 940e 1e4a 	CALL SUBOPT_0x6A
0019c4 940e 1e4d 	CALL SUBOPT_0x6B
                 ; 0000 00A4  delay_ms(3000);
0019c6 940e 1e58 	CALL SUBOPT_0x6D
                 ; 0000 00A5  lcd_gotoxy(0,3);
0019c8 940e 1e53 	CALL SUBOPT_0x6C
0019ca e0a3      	LDI  R26,LOW(3)
0019cb e0b0      	LDI  R27,0
0019cc df24      	RCALL _lcd_gotoxy
                 ; 0000 00A6  lcd_putsf("Read SD card",0x01ff,0,0xff80);
                +
0019cd ede4     +LDI R30 , LOW ( 2 * _0x0 + ( 38 ) )
0019ce e1f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 38 ) )
                 	__POINTW1FN _0x0,38
0019cf 940e 1e4a 	CALL SUBOPT_0x6A
0019d1 940e 1e4d 	CALL SUBOPT_0x6B
                 ; 0000 00A7  delay_ms(2000);
0019d3 eda0      	LDI  R26,LOW(2000)
0019d4 e0b7      	LDI  R27,HIGH(2000)
0019d5 940e 1ec1 	CALL _delay_ms
                 ; 0000 00A8  lcd_gotoxy(0,4);
0019d7 940e 1e53 	CALL SUBOPT_0x6C
0019d9 e0a4      	LDI  R26,LOW(4)
0019da e0b0      	LDI  R27,0
0019db df15      	RCALL _lcd_gotoxy
                 ; 0000 00A9  lcd_putsf("Init Drive",0x01ff,0,0xff80);
                +
0019dc eee1     +LDI R30 , LOW ( 2 * _0x0 + ( 51 ) )
0019dd e1f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 51 ) )
                 	__POINTW1FN _0x0,51
0019de 940e 1e4a 	CALL SUBOPT_0x6A
0019e0 940e 1e4d 	CALL SUBOPT_0x6B
                 ; 0000 00AA  while(disk_initialize() != FR_OK)   delay_ms(100);     //refer to MMC document
                 _0x29F:
0019e2 dac6      	RCALL _disk_initialize
0019e3 30e0      	CPI  R30,0
0019e4 f019      	BREQ _0x2A1
0019e5 940e 1e5c 	CALL SUBOPT_0x6E
0019e7 cffa      	RJMP _0x29F
                 _0x2A1:
                 ; 0000 00AB lcd_putsf("   --->OK",0x01ff,0,0xff80);
                +
0019e8 eeec     +LDI R30 , LOW ( 2 * _0x0 + ( 62 ) )
0019e9 e1f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 62 ) )
                 	__POINTW1FN _0x0,62
0019ea 940e 1e4a 	CALL SUBOPT_0x6A
0019ec 940e 1e4d 	CALL SUBOPT_0x6B
                 ; 0000 00AC  delay_ms(1000);
0019ee 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 00AD  lcd_gotoxy(0,5);
0019f0 940e 1e53 	CALL SUBOPT_0x6C
0019f2 e0a5      	LDI  R26,LOW(5)
0019f3 e0b0      	LDI  R27,0
0019f4 defc      	RCALL _lcd_gotoxy
                 ; 0000 00AE 
                 ; 0000 00AF  ///////////////////////////////SHOW PICTURES ON DISPLAY//////////////////////////////
                 ; 0000 00B0  //////////////////////////////////////////////////////////////////////////////////////////
                 ; 0000 00B1  //////////////////////////////////////////////////////////////////////////////////////////
                 ; 0000 00B2  //////////////////////////////////////////////////////////////////////////////////////////
                 ; 0000 00B3  lcd_putsf("OPEN DRIVE",0x01ff,0,0xff80);
                +
0019f5 efe6     +LDI R30 , LOW ( 2 * _0x0 + ( 72 ) )
0019f6 e1f8     +LDI R31 , HIGH ( 2 * _0x0 + ( 72 ) )
                 	__POINTW1FN _0x0,72
0019f7 940e 1e4a 	CALL SUBOPT_0x6A
0019f9 940e 1e4d 	CALL SUBOPT_0x6B
                 ; 0000 00B4  while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
                 _0x2A2:
0019fb 940e 1e64 	CALL SUBOPT_0x70
0019fd f019      	BREQ _0x2A4
0019fe 940e 1e5c 	CALL SUBOPT_0x6E
001a00 cffa      	RJMP _0x2A2
                 _0x2A4:
                 ; 0000 00B5 lcd_gotoxy(0,6);
001a01 940e 1e53 	CALL SUBOPT_0x6C
001a03 940e 1e6a 	CALL SUBOPT_0x71
                 ; 0000 00B6  while(pf_open("1.bmp")!=FR_OK)   delay_ms(100);
                 _0x2A5:
                +
001a05 e6a0     +LDI R26 , LOW ( _0x2A8 + ( 0 ) )
001a06 e0b4     +LDI R27 , HIGH ( _0x2A8 + ( 0 ) )
                 	__POINTW2MN _0x2A8,0
001a07 940e 11dd 	CALL _pf_open
001a09 30e0      	CPI  R30,0
001a0a f019      	BREQ _0x2A7
001a0b 940e 1e5c 	CALL SUBOPT_0x6E
001a0d cff7      	RJMP _0x2A5
                 _0x2A7:
                 ; 0000 00B7 delay_ms(1000);
001a0e 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 00B8  pf_lseek(0x0A);                         /* The bmp file contains much informations except
                 ; 0000 00B9                                                 pixels colors such as the volume and the height and
                 ; 0000 00BA                                                 the width of the pic and the pixel colour informations
                 ; 0000 00BB                                                 begin in address 0x10  */
001a10 940e 1e6e 	CALL SUBOPT_0x72
                 ; 0000 00BC  pf_read(&buffer,4,&w_br);
001a12 940e 1e75 	CALL SUBOPT_0x73
                 ; 0000 00BD  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0]; //calculate address
001a14 940e 1e78 	CALL SUBOPT_0x74
                 ; 0000 00BE  pf_lseek(ADDR);
                 ; 0000 00BF  showbmp();
                 ; 0000 00C0  delay_ms(6000);
001a16 e7a0      	LDI  R26,LOW(6000)
001a17 e1b7      	LDI  R27,HIGH(6000)
001a18 940e 1ec1 	CALL _delay_ms
                 ; 0000 00C1  while(pf_mount(0)!=FR_OK )  delay_ms(100);
                 _0x2A9:
001a1a 940e 1ea0 	CALL SUBOPT_0x75
001a1c f019      	BREQ _0x2AB
001a1d 940e 1e5c 	CALL SUBOPT_0x6E
001a1f cffa      	RJMP _0x2A9
                 _0x2AB:
                 ; 0000 00C2 while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
                 _0x2AC:
001a20 940e 1e64 	CALL SUBOPT_0x70
001a22 f019      	BREQ _0x2AE
001a23 940e 1e5c 	CALL SUBOPT_0x6E
001a25 cffa      	RJMP _0x2AC
                 _0x2AE:
                 ; 0000 00C3 lcd_gotoxy(0,6);
001a26 940e 1e53 	CALL SUBOPT_0x6C
001a28 940e 1e6a 	CALL SUBOPT_0x71
                 ; 0000 00C4  //////////////////////////////////////////
                 ; 0000 00C5  while(pf_open("2.bmp")!=FR_OK)   delay_ms(100);
                 _0x2AF:
                +
001a2a e6a6     +LDI R26 , LOW ( _0x2A8 + ( 6 ) )
001a2b e0b4     +LDI R27 , HIGH ( _0x2A8 + ( 6 ) )
                 	__POINTW2MN _0x2A8,6
001a2c 940e 11dd 	CALL _pf_open
001a2e 30e0      	CPI  R30,0
001a2f f019      	BREQ _0x2B1
001a30 940e 1e5c 	CALL SUBOPT_0x6E
001a32 cff7      	RJMP _0x2AF
                 _0x2B1:
                 ; 0000 00C6 delay_ms(1000);
001a33 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 00C7  pf_lseek(0x0A);
001a35 940e 1e6e 	CALL SUBOPT_0x72
                 ; 0000 00C8  pf_read(&buffer,4,&w_br);
001a37 940e 1e75 	CALL SUBOPT_0x73
                 ; 0000 00C9  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
001a39 940e 1e78 	CALL SUBOPT_0x74
                 ; 0000 00CA  pf_lseek(ADDR);
                 ; 0000 00CB  showbmp();
                 ; 0000 00CC  delay_ms(1000);
001a3b 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 00CD   for(count=0;count<254;count++){                  //circle frame
001a3d e0e0      	LDI  R30,LOW(0)
001a3e 93e0 07a4 	STS  _count,R30
                 _0x2B3:
001a40 91a0 07a4 	LDS  R26,_count
001a42 3fae      	CPI  R26,LOW(0xFE)
001a43 f440      	BRSH _0x2B4
                 ; 0000 00CE       lcd_draw_circle(120,160,count,0,0XBDD7);
001a44 940e 1ea6 	CALL SUBOPT_0x76
001a46 eda7      	LDI  R26,LOW(48599)
001a47 ebbd      	LDI  R27,HIGH(48599)
001a48 dd92      	RCALL _lcd_draw_circle
                 ; 0000 00CF       }
001a49 940e 1eb6 	CALL SUBOPT_0x77
001a4b cff4      	RJMP _0x2B3
                 _0x2B4:
                 ; 0000 00D0  //lcd_background_color(BLACK);
                 ; 0000 00D1  while(pf_mount(0)!=FR_OK )  delay_ms(100);
                 _0x2B5:
001a4c 940e 1ea0 	CALL SUBOPT_0x75
001a4e f019      	BREQ _0x2B7
001a4f 940e 1e5c 	CALL SUBOPT_0x6E
001a51 cffa      	RJMP _0x2B5
                 _0x2B7:
                 ; 0000 00D5 lcd_clear_screen();
001a52 db79      	RCALL _lcd_clear_screen
                 ; 0000 00D6       lcd_background_color(BLACK);
001a53 e0a0      	LDI  R26,LOW(0)
001a54 e0b0      	LDI  R27,HIGH(0)
001a55 db82      	RCALL _lcd_background_color
                 ; 0000 00D7       lcd_draw_line(1,1,239,319,0x6523);
001a56 940e 1ebc 	CALL SUBOPT_0x78
001a58 940e 1ebc 	CALL SUBOPT_0x78
001a5a eeef      	LDI  R30,LOW(239)
001a5b e0f0      	LDI  R31,HIGH(239)
001a5c 93fa      	ST   -Y,R31
001a5d 93ea      	ST   -Y,R30
001a5e e3ef      	LDI  R30,LOW(319)
001a5f e0f1      	LDI  R31,HIGH(319)
001a60 93fa      	ST   -Y,R31
001a61 93ea      	ST   -Y,R30
001a62 e2a3      	LDI  R26,LOW(25891)
001a63 e6b5      	LDI  R27,HIGH(25891)
001a64 dc8a      	RCALL _lcd_draw_line
                 ; 0000 00D8       lcd_draw_line(239,1,1,319,0x7341);
001a65 eeef      	LDI  R30,LOW(239)
001a66 e0f0      	LDI  R31,HIGH(239)
001a67 93fa      	ST   -Y,R31
001a68 93ea      	ST   -Y,R30
001a69 940e 1ebc 	CALL SUBOPT_0x78
001a6b 940e 1ebc 	CALL SUBOPT_0x78
001a6d e3ef      	LDI  R30,LOW(319)
001a6e e0f1      	LDI  R31,HIGH(319)
001a6f 93fa      	ST   -Y,R31
001a70 93ea      	ST   -Y,R30
001a71 e4a1      	LDI  R26,LOW(29505)
001a72 e7b3      	LDI  R27,HIGH(29505)
001a73 dc7b      	RCALL _lcd_draw_line
                 ; 0000 00D9       for(count=0;count<100;count++){
001a74 e0e0      	LDI  R30,LOW(0)
001a75 93e0 07a4 	STS  _count,R30
                 _0x2B9:
001a77 91a0 07a4 	LDS  R26,_count
001a79 36a4      	CPI  R26,LOW(0x64)
001a7a f4d8      	BRSH _0x2BA
                 ; 0000 00DA       lcd_draw_rectangle(count,count,240-count,320-count,0,0XAAAA);
001a7b 91e0 07a4 	LDS  R30,_count
001a7d e0f0      	LDI  R31,0
001a7e 93fa      	ST   -Y,R31
001a7f 93ea      	ST   -Y,R30
001a80 93fa      	ST   -Y,R31
001a81 93ea      	ST   -Y,R30
001a82 efa0      	LDI  R26,LOW(240)
001a83 e0b0      	LDI  R27,HIGH(240)
001a84 1bae      	SUB  R26,R30
001a85 0bbf      	SBC  R27,R31
001a86 93ba      	ST   -Y,R27
001a87 93aa      	ST   -Y,R26
001a88 e4a0      	LDI  R26,LOW(320)
001a89 e0b1      	LDI  R27,HIGH(320)
001a8a 1bae      	SUB  R26,R30
001a8b 0bbf      	SBC  R27,R31
001a8c 93ba      	ST   -Y,R27
001a8d 93aa      	ST   -Y,R26
001a8e e0e0      	LDI  R30,LOW(0)
001a8f 93ea      	ST   -Y,R30
001a90 eaaa      	LDI  R26,LOW(43690)
001a91 eaba      	LDI  R27,HIGH(43690)
001a92 dce3      	RCALL _lcd_draw_rectangle
                 ; 0000 00DB       }
001a93 940e 1eb6 	CALL SUBOPT_0x77
001a95 cfe1      	RJMP _0x2B9
                 _0x2BA:
                 ; 0000 00DC       for(count=0;count<254;count++){
001a96 e0e0      	LDI  R30,LOW(0)
001a97 93e0 07a4 	STS  _count,R30
                 _0x2BC:
001a99 91a0 07a4 	LDS  R26,_count
001a9b 3fae      	CPI  R26,LOW(0xFE)
001a9c f440      	BRSH _0x2BD
                 ; 0000 00DD       lcd_draw_circle(120,160,count,0,0XA234);
001a9d 940e 1ea6 	CALL SUBOPT_0x76
001a9f e3a4      	LDI  R26,LOW(41524)
001aa0 eab2      	LDI  R27,HIGH(41524)
001aa1 dd39      	RCALL _lcd_draw_circle
                 ; 0000 00DE       }
001aa2 940e 1eb6 	CALL SUBOPT_0x77
001aa4 cff4      	RJMP _0x2BC
                 _0x2BD:
                 ; 0000 00DF 
                 ; 0000 00E0 
                 ; 0000 00E1 while (1)
                 _0x2BE:
                 ; 0000 00E2       {                 //It finished so play the 19,20,21,22 pictures again and again ...
                 ; 0000 00E3 
                 ; 0000 00E4   //////////////////////////////////////////
                 ; 0000 00E5  while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
                 _0x2C1:
001aa5 940e 1e64 	CALL SUBOPT_0x70
001aa7 f019      	BREQ _0x2C3
001aa8 940e 1e5c 	CALL SUBOPT_0x6E
001aaa cffa      	RJMP _0x2C1
                 _0x2C3:
                 ; 0000 00E6 lcd_gotoxy(0,6);
001aab 940e 1e53 	CALL SUBOPT_0x6C
001aad 940e 1e6a 	CALL SUBOPT_0x71
                 ; 0000 00E7  while(pf_open("19.bmp")!=FR_OK)   delay_ms(100);
                 _0x2C4:
                +
001aaf e6ac     +LDI R26 , LOW ( _0x2A8 + ( 12 ) )
001ab0 e0b4     +LDI R27 , HIGH ( _0x2A8 + ( 12 ) )
                 	__POINTW2MN _0x2A8,12
001ab1 940e 11dd 	CALL _pf_open
001ab3 30e0      	CPI  R30,0
001ab4 f019      	BREQ _0x2C6
001ab5 940e 1e5c 	CALL SUBOPT_0x6E
001ab7 cff7      	RJMP _0x2C4
                 _0x2C6:
                 ; 0000 00E8 delay_ms(1000);
001ab8 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 00E9  pf_lseek(0x0A);
001aba 940e 1e6e 	CALL SUBOPT_0x72
                 ; 0000 00EA  pf_read(&buffer,4,&w_br);
001abc 940e 1e75 	CALL SUBOPT_0x73
                 ; 0000 00EB  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
001abe 940e 1e78 	CALL SUBOPT_0x74
                 ; 0000 00EC  pf_lseek(ADDR);
                 ; 0000 00ED  showbmp();
                 ; 0000 00EE  delay_ms(3000);
001ac0 940e 1e58 	CALL SUBOPT_0x6D
                 ; 0000 00EF  while(pf_mount(0)!=FR_OK )  delay_ms(100);
                 _0x2C7:
001ac2 940e 1ea0 	CALL SUBOPT_0x75
001ac4 f019      	BREQ _0x2C9
001ac5 940e 1e5c 	CALL SUBOPT_0x6E
001ac7 cffa      	RJMP _0x2C7
                 _0x2C9:
                 ; 0000 00F1 while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
                 _0x2CA:
001ac8 940e 1e64 	CALL SUBOPT_0x70
001aca f019      	BREQ _0x2CC
001acb 940e 1e5c 	CALL SUBOPT_0x6E
001acd cffa      	RJMP _0x2CA
                 _0x2CC:
                 ; 0000 00F2 lcd_gotoxy(0,6);
001ace 940e 1e53 	CALL SUBOPT_0x6C
001ad0 940e 1e6a 	CALL SUBOPT_0x71
                 ; 0000 00F3  while(pf_open("20.bmp")!=FR_OK)   delay_ms(100);
                 _0x2CD:
                +
001ad2 e7a3     +LDI R26 , LOW ( _0x2A8 + ( 19 ) )
001ad3 e0b4     +LDI R27 , HIGH ( _0x2A8 + ( 19 ) )
                 	__POINTW2MN _0x2A8,19
001ad4 940e 11dd 	CALL _pf_open
001ad6 30e0      	CPI  R30,0
001ad7 f019      	BREQ _0x2CF
001ad8 940e 1e5c 	CALL SUBOPT_0x6E
001ada cff7      	RJMP _0x2CD
                 _0x2CF:
                 ; 0000 00F4 delay_ms(1000);
001adb 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 00F5  pf_lseek(0x0A);
001add 940e 1e6e 	CALL SUBOPT_0x72
                 ; 0000 00F6  pf_read(&buffer,4,&w_br);
001adf 940e 1e75 	CALL SUBOPT_0x73
                 ; 0000 00F7  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
001ae1 940e 1e78 	CALL SUBOPT_0x74
                 ; 0000 00F8  pf_lseek(ADDR);
                 ; 0000 00F9  showbmp();
                 ; 0000 00FA  delay_ms(3000);
001ae3 940e 1e58 	CALL SUBOPT_0x6D
                 ; 0000 00FB  while(pf_mount(0)!=FR_OK )  delay_ms(100);
                 _0x2D0:
001ae5 940e 1ea0 	CALL SUBOPT_0x75
001ae7 f019      	BREQ _0x2D2
001ae8 940e 1e5c 	CALL SUBOPT_0x6E
001aea cffa      	RJMP _0x2D0
                 _0x2D2:
                 ; 0000 00FD while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
                 _0x2D3:
001aeb 940e 1e64 	CALL SUBOPT_0x70
001aed f019      	BREQ _0x2D5
001aee 940e 1e5c 	CALL SUBOPT_0x6E
001af0 cffa      	RJMP _0x2D3
                 _0x2D5:
                 ; 0000 00FE lcd_gotoxy(0,6);
001af1 940e 1e53 	CALL SUBOPT_0x6C
001af3 940e 1e6a 	CALL SUBOPT_0x71
                 ; 0000 00FF  while(pf_open("21.bmp")!=FR_OK)   delay_ms(100);
                 _0x2D6:
                +
001af5 e7aa     +LDI R26 , LOW ( _0x2A8 + ( 26 ) )
001af6 e0b4     +LDI R27 , HIGH ( _0x2A8 + ( 26 ) )
                 	__POINTW2MN _0x2A8,26
001af7 940e 11dd 	CALL _pf_open
001af9 30e0      	CPI  R30,0
001afa f019      	BREQ _0x2D8
001afb 940e 1e5c 	CALL SUBOPT_0x6E
001afd cff7      	RJMP _0x2D6
                 _0x2D8:
                 ; 0000 0100 delay_ms(1000);
001afe 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 0101  pf_lseek(0x0A);
001b00 940e 1e6e 	CALL SUBOPT_0x72
                 ; 0000 0102  pf_read(&buffer,4,&w_br);
001b02 940e 1e75 	CALL SUBOPT_0x73
                 ; 0000 0103  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
001b04 940e 1e78 	CALL SUBOPT_0x74
                 ; 0000 0104  pf_lseek(ADDR);
                 ; 0000 0105  showbmp();
                 ; 0000 0106  delay_ms(3000);
001b06 940e 1e58 	CALL SUBOPT_0x6D
                 ; 0000 0107  while(pf_mount(0)!=FR_OK )  delay_ms(100);
                 _0x2D9:
001b08 940e 1ea0 	CALL SUBOPT_0x75
001b0a f019      	BREQ _0x2DB
001b0b 940e 1e5c 	CALL SUBOPT_0x6E
001b0d cffa      	RJMP _0x2D9
                 _0x2DB:
                 ; 0000 0109 while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
                 _0x2DC:
001b0e 940e 1e64 	CALL SUBOPT_0x70
001b10 f019      	BREQ _0x2DE
001b11 940e 1e5c 	CALL SUBOPT_0x6E
001b13 cffa      	RJMP _0x2DC
                 _0x2DE:
                 ; 0000 010A lcd_gotoxy(0,6);
001b14 940e 1e53 	CALL SUBOPT_0x6C
001b16 940e 1e6a 	CALL SUBOPT_0x71
                 ; 0000 010B  while(pf_open("22.bmp")!=FR_OK)   delay_ms(100);
                 _0x2DF:
                +
001b18 e8a1     +LDI R26 , LOW ( _0x2A8 + ( 33 ) )
001b19 e0b4     +LDI R27 , HIGH ( _0x2A8 + ( 33 ) )
                 	__POINTW2MN _0x2A8,33
001b1a 940e 11dd 	CALL _pf_open
001b1c 30e0      	CPI  R30,0
001b1d f019      	BREQ _0x2E1
001b1e 940e 1e5c 	CALL SUBOPT_0x6E
001b20 cff7      	RJMP _0x2DF
                 _0x2E1:
                 ; 0000 010C delay_ms(1000);
001b21 940e 1e60 	CALL SUBOPT_0x6F
                 ; 0000 010D  pf_lseek(0x0A);
001b23 940e 1e6e 	CALL SUBOPT_0x72
                 ; 0000 010E  pf_read(&buffer,4,&w_br);
001b25 940e 1e75 	CALL SUBOPT_0x73
                 ; 0000 010F  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
001b27 940e 1e78 	CALL SUBOPT_0x74
                 ; 0000 0110  pf_lseek(ADDR);
                 ; 0000 0111  showbmp();
                 ; 0000 0112  delay_ms(3000);
001b29 940e 1e58 	CALL SUBOPT_0x6D
                 ; 0000 0113  while(pf_mount(0)!=FR_OK )  delay_ms(100);
                 _0x2E2:
001b2b 940e 1ea0 	CALL SUBOPT_0x75
001b2d f019      	BREQ _0x2E4
001b2e 940e 1e5c 	CALL SUBOPT_0x6E
001b30 cffa      	RJMP _0x2E2
                 _0x2E4:
                 ; 0000 011A }
001b31 cf73      	RJMP _0x2BE
                 ; 0000 011B 
                 ; 0000 011C }
                 _0x2E5:
001b32 cfff      	RJMP _0x2E5
                 ; .FEND
                 
                 	.DSEG
                 _0x2A8:
000460           	.BYTE 0x28
                 ;
                 ;
                 ;/* this source is designed by MOHAMMAD DEHGHANI
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _FatFs_G000:
000488           	.BYTE 0x2
                 _CardType_G000:
00048a           	.BYTE 0x1
                 _highlight_color:
00048b           	.BYTE 0x2
                 _x_base:
00048d           	.BYTE 0x2
                 _x_text:
00048f           	.BYTE 0x1
                 _y_text:
000490           	.BYTE 0x1
                 _buffer:
000491           	.BYTE 0x2D1
                 _Fs:
000762           	.BYTE 0x2C
                 _w_br:
00078e           	.BYTE 0x2
                 _res:
000790           	.BYTE 0x1
                 _y:
000791           	.BYTE 0x4
                 _ADDR:
000795           	.BYTE 0x2
                 _i1:
000797           	.BYTE 0x2
                 _r:
000799           	.BYTE 0x1
                 _g:
00079a           	.BYTE 0x1
                 _b:
00079b           	.BYTE 0x1
                 _color:
00079c           	.BYTE 0x4
                 _tcolor:
0007a0           	.BYTE 0x4
                 _count:
0007a4           	.BYTE 0x1
                 __seed_G104:
0007a5           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
001b33 93ba      	ST   -Y,R27
001b34 93aa      	ST   -Y,R26
001b35 940e 201c 	CALL __SAVELOCR6
001b37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
001b38 91e0 0488 	LDS  R30,_FatFs_G000
001b3a 91f0 0489 	LDS  R31,_FatFs_G000+1
001b3c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
001b3d 85ac     +LDD R26 , Y + 12
001b3e 85bd     +LDD R27 , Y + 12 + 1
001b3f 858e     +LDD R24 , Y + 12 + 2
001b40 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
001b41 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
                +
001b42 30a2     +CPI R26 , LOW ( 0x2 )
001b43 e0e0     +LDI R30 , HIGH ( 0x2 )
001b44 07be     +CPC R27 , R30
001b45 e0e0     +LDI R30 , BYTE3 ( 0x2 )
001b46 078e     +CPC R24 , R30
001b47 e0e0     +LDI R30 , BYTE4 ( 0x2 )
001b48 079e     +CPC R25 , R30
                 	__CPD2N 0x2
001b49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
001b4a 01fe      	MOVW R30,R28
001b4b 9638      	ADIW R30,8
001b4c 93fa      	ST   -Y,R31
001b4d 93ea      	ST   -Y,R30
001b4e 85e8      	LDD  R30,Y+8
001b4f 85f9      	LDD  R31,Y+8+1
                +
001b50 85a4     +LDD R26 , Z + 12
001b51 85b5     +LDD R27 , Z + 12 + 1
001b52 8586     +LDD R24 , Z + 12 + 2
001b53 8597     +LDD R25 , Z + 12 + 3
                 	__GETD2Z 12
001b54 01f9      	MOVW R30,R18
001b55 2766      	CLR  R22
001b56 2777      	CLR  R23
001b57 940e 1ecb 	CALL __ADDD12
001b59 940e 1ff1 	CALL __PUTPARD1
001b5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
001b5c e0a2      	LDI  R26,LOW(2)
001b5d e0b0      	LDI  R27,0
001b5e 940e 153a 	CALL _disk_readp
001b60 30e0      	CPI  R30,0
001b61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
001b62 efef      	LDI  R30,LOW(511)
001b63 e0f1      	LDI  R31,HIGH(511)
001b64 93fa      	ST   -Y,R31
001b65 93ea      	ST   -Y,R30
001b66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
001b67 e0b0      	LDI  R27,0
001b68 940e 153a 	CALL _disk_readp
001b6a 30e0      	CPI  R30,0
001b6b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
001b6c 93fa      	ST   -Y,R31
001b6d 93ea      	ST   -Y,R30
001b6e 85e8      	LDD  R30,Y+8
001b6f 85f9      	LDD  R31,Y+8+1
                +
001b70 85a4     +LDD R26 , Z + 12
001b71 85b5     +LDD R27 , Z + 12 + 1
001b72 8586     +LDD R24 , Z + 12 + 2
001b73 8597     +LDD R25 , Z + 12 + 3
                 	__GETD2Z 12
001b74 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
001b75 2766      	CLR  R22
001b76 2777      	CLR  R23
001b77 940e 1ecb 	CALL __ADDD12
001b79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
001b7a e0e0      	LDI  R30,0
001b7b 85f9      	LDD  R31,Y+9
001b7c 01df      	MOVW R26,R30
001b7d 85e8      	LDD  R30,Y+8
001b7e e0f0      	LDI  R31,0
001b7f 2bea      	OR   R30,R26
001b80 2bfb      	OR   R31,R27
001b81 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
                +
001b82 85ae     +LDD R26 , Y + 14
001b83 85bf     +LDD R27 , Y + 14 + 1
001b84 8988     +LDD R24 , Y + 14 + 2
001b85 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
001b86 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
001b87 940e 1ecb 	CALL __ADDD12
001b89 940e 1ff1 	CALL __PUTPARD1
001b8b 89ea      	LDD  R30,Y+18
001b8c 89fb      	LDD  R31,Y+18+1
001b8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
001b8e 93fa      	ST   -Y,R31
001b8f 93ea      	ST   -Y,R30
001b90 cfcb      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0xE:
001b91 e0f0      	LDI  R31,0
001b92 940e 1f30 	CALL __CWD1
001b94 01df      	MOVW R26,R30
001b95 01cb      	MOVW R24,R22
001b96 e1e8      	LDI  R30,LOW(24)
001b97 940e 1ef0 	CALL __LSLD12
001b99 01df      	MOVW R26,R30
001b9a 01cb      	MOVW R24,R22
001b9b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xF:
001b9c e0f0      	LDI  R31,0
001b9d 940e 1f30 	CALL __CWD1
001b9f 940e 1f2b 	CALL __LSLD16
001ba1 940e 1edf 	CALL __ORD12
001ba3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x10:
001ba4 2766      	CLR  R22
001ba5 2777      	CLR  R23
001ba6 940e 1edf 	CALL __ORD12
001ba8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x11:
001ba9 27ff      	CLR  R31
001baa 2766      	CLR  R22
001bab 2777      	CLR  R23
001bac 940e 1edf 	CALL __ORD12
001bae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
001baf 931a      	ST   -Y,R17
001bb0 930a      	ST   -Y,R16
                +
001bb1 9100 0488+LDS R16 , 0 + ( _FatFs_G000 )
001bb3 9110 0489+LDS R17 , 0 + ( _FatFs_G000 ) + 1
                 	__GETWRMN 16,17,0,_FatFs_G000
001bb5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x13:
                +
001bb6 81ea     +LDD R30 , Y + 2
001bb7 81fb     +LDD R31 , Y + 2 + 1
001bb8 816c     +LDD R22 , Y + 2 + 2
001bb9 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
001bba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
                +
001bbb 83ea     +STD Y + 2 , R30
001bbc 83fb     +STD Y + 2 + 1 , R31
001bbd 836c     +STD Y + 2 + 2 , R22
001bbe 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
001bbf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x15:
                +
001bc0 81aa     +LDD R26 , Y + 2
001bc1 81bb     +LDD R27 , Y + 2 + 1
001bc2 818c     +LDD R24 , Y + 2 + 2
001bc3 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
001bc4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
                +
001bc5 e0e0     +LDI R30 , LOW ( 0x0 )
001bc6 e0f0     +LDI R31 , HIGH ( 0x0 )
001bc7 e060     +LDI R22 , BYTE3 ( 0x0 )
001bc8 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
001bc9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
001bca 940e 1fc8 	CALL __GETD1P
001bcc cfee      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
001bcd 940e 201e 	CALL __SAVELOCR4
                +
001bcf 9120 0488+LDS R18 , 0 + ( _FatFs_G000 )
001bd1 9130 0489+LDS R19 , 0 + ( _FatFs_G000 ) + 1
                 	__GETWRMN 18,19,0,_FatFs_G000
001bd3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
001bd4 940e 1fce 	CALL __GETD1P_INC
                +
001bd6 5fef     +SUBI R30 , LOW ( - 1 )
001bd7 4fff     +SBCI R31 , HIGH ( - 1 )
001bd8 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001bd9 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
001bda 940e 1fd8 	CALL __PUTDP1_DEC
001bdc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
                +
001bdd 81ac     +LDD R26 , Y + 4
001bde 81bd     +LDD R27 , Y + 4 + 1
001bdf 818e     +LDD R24 , Y + 4 + 2
001be0 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
001be1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
001be2 93ba      	ST   -Y,R27
001be3 93aa      	ST   -Y,R26
001be4 940e 201e 	CALL __SAVELOCR4
001be6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
001be7 91a0 0488 	LDS  R26,_FatFs_G000
001be9 91b0 0489 	LDS  R27,_FatFs_G000+1
001beb 9616      	ADIW R26,6
001bec 912d      	LD   R18,X+
001bed 913c      	LD   R19,X
001bee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
                +
001bef 85a4     +LDD R26 , Z + 12
001bf0 85b5     +LDD R27 , Z + 12 + 1
001bf1 8586     +LDD R24 , Z + 12 + 2
001bf2 8597     +LDD R25 , Z + 12 + 3
                 	__GETD2Z 12
001bf3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
001bf4 2fe2      	MOV  R30,R18
001bf5 5f2f      	SUBI R18,-1
001bf6 81ae      	LDD  R26,Y+6
001bf7 81bf      	LDD  R27,Y+6+1
001bf8 e0f0      	LDI  R31,0
001bf9 0fae      	ADD  R26,R30
001bfa 1fbf      	ADC  R27,R31
001bfb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1F:
001bfc 2fe5      	MOV  R30,R21
001bfd 5f5f      	SUBI R21,-1
001bfe 85a8      	LDD  R26,Y+8
001bff 85b9      	LDD  R27,Y+8+1
001c00 e0f0      	LDI  R31,0
001c01 0fea      	ADD  R30,R26
001c02 1ffb      	ADC  R31,R27
001c03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
001c04 dfc0      	RCALL SUBOPT_0x16
001c05 940e 1fd3 	CALL __PUTDP1
001c07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
001c08 81ae      	LDD  R26,Y+6
001c09 81bf      	LDD  R27,Y+6+1
001c0a 9612      	ADIW R26,2
001c0b 940e 1fc4 	CALL __GETW1P
001c0d 85e3      	LDD  R30,Z+11
001c0e 30e0      	CPI  R30,0
001c0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
001c10 e0f0      	LDI  R31,0
001c11 2bea      	OR   R30,R26
001c12 2bfb      	OR   R31,R27
001c13 2766      	CLR  R22
001c14 2777      	CLR  R23
001c15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
001c16 81ec      	LDD  R30,Y+4
001c17 81fd      	LDD  R31,Y+4+1
001c18 93fa      	ST   -Y,R31
001c19 93ea      	ST   -Y,R30
001c1a df9b      	RCALL SUBOPT_0x13
001c1b 940e 1ff1 	CALL __PUTPARD1
001c1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x24:
001c1e 81ec      	LDD  R30,Y+4
001c1f 81fd      	LDD  R31,Y+4+1
001c20 81e1      	LDD  R30,Z+1
001c21 2ffe      	MOV  R31,R30
001c22 e0e0      	LDI  R30,0
001c23 010f      	MOVW R0,R30
001c24 81ac      	LDD  R26,Y+4
001c25 81bd      	LDD  R27,Y+4+1
001c26 91ec      	LD   R30,X
001c27 e0f0      	LDI  R31,0
001c28 29e0      	OR   R30,R0
001c29 29f1      	OR   R31,R1
001c2a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
001c2b 01fe      	MOVW R30,R28
001c2c 9671      	ADIW R30,17
001c2d 93fa      	ST   -Y,R31
001c2e 93ea      	ST   -Y,R30
001c2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x26:
                +
001c30 85af     +LDD R26 , Y + 15
001c31 89b8     +LDD R27 , Y + 15 + 1
001c32 8989     +LDD R24 , Y + 15 + 2
001c33 899a     +LDD R25 , Y + 15 + 3
                 	__GETD2S 15
001c34 940e 1029 	CALL _check_fs_G000
001c36 2f1e      	MOV  R17,R30
001c37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
                +
001c38 85ef     +LDD R30 , Y + 15
001c39 89f8     +LDD R31 , Y + 15 + 1
001c3a 8969     +LDD R22 , Y + 15 + 2
001c3b 897a     +LDD R23 , Y + 15 + 3
                 	__GETD1S 15
001c3c 940e 1ff1 	CALL __PUTPARD1
001c3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x28:
001c3f 81f0      	LD   R31,Z
001c40 e0e0      	LDI  R30,LOW(0)
001c41 cf62      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
001c42 973c      	SBIW R30,12
001c43 81f0      	LD   R31,Z
001c44 e0e0      	LDI  R30,LOW(0)
001c45 01df      	MOVW R26,R30
001c46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
                +
001c47 87e9     +STD Y + 9 , R30
001c48 87fa     +STD Y + 9 + 1 , R31
001c49 876b     +STD Y + 9 + 2 , R22
001c4a 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
001c4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
                +
001c4c 85e9     +LDD R30 , Y + 9
001c4d 85fa     +LDD R31 , Y + 9 + 1
001c4e 856b     +LDD R22 , Y + 9 + 2
001c4f 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
001c50 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
                +
001c51 85a9     +LDD R26 , Y + 9
001c52 85ba     +LDD R27 , Y + 9 + 1
001c53 858b     +LDD R24 , Y + 9 + 2
001c54 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
001c55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2D:
001c56 01fe      	MOVW R30,R28
001c57 967f      	ADIW R30,31
001c58 973d      	SBIW R30,13
001c59 81e0      	LD   R30,Z
001c5a e0f0      	LDI  R31,0
001c5b 2bea      	OR   R30,R26
001c5c 2bfb      	OR   R31,R27
001c5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2E:
001c5e 01df      	MOVW R26,R30
001c5f 01cb      	MOVW R24,R22
001c60 01fe      	MOVW R30,R28
001c61 96f1      	ADIW R30,49
001c62 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2F:
001c63 a9ed      	LDD  R30,Y+53
001c64 a9fe      	LDD  R31,Y+53+1
001c65 81a4      	LDD  R26,Z+4
001c66 81b5      	LDD  R27,Z+5
001c67 01fd      	MOVW R30,R26
001c68 940e 1f18 	CALL __LSRW4
001c6a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
001c6b 81e1      	LDD  R30,Z+1
001c6c e0f0      	LDI  R31,0
001c6d 940e 1f30 	CALL __CWD1
001c6f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
001c70 a9ed      	LDD  R30,Y+53
001c71 a9fe      	LDD  R31,Y+53+1
001c72 df7c      	RCALL SUBOPT_0x1D
001c73 dfd8      	RCALL SUBOPT_0x2B
001c74 940e 1ecb 	CALL __ADDD12
001c76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x32:
001c77 81ee      	LDD  R30,Y+6
001c78 81ff      	LDD  R31,Y+6+1
                +
001c79 8da0     +LDD R26 , Z + 24
001c7a 8db1     +LDD R27 , Z + 24 + 1
001c7b 8d82     +LDD R24 , Z + 24 + 2
001c7c 8d93     +LDD R25 , Z + 24 + 3
                 	__GETD2Z 24
001c7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
                +
001c7e e0e0     +LDI R30 , LOW ( 0x200 )
001c7f e0f2     +LDI R31 , HIGH ( 0x200 )
001c80 e060     +LDI R22 , BYTE3 ( 0x200 )
001c81 e070     +LDI R23 , BYTE4 ( 0x200 )
                 	__GETD1N 0x200
001c82 940e 1f7f 	CALL __DIVD21U
001c84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
001c85 81ee      	LDD  R30,Y+6
001c86 81ff      	LDD  R31,Y+6+1
                +
001c87 a1a4     +LDD R26 , Z + 36
001c88 a1b5     +LDD R27 , Z + 36 + 1
001c89 a186     +LDD R24 , Z + 36 + 2
001c8a a197     +LDD R25 , Z + 36 + 3
                 	__GETD2Z 36
001c8b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
001c8c 9613      	ADIW R26,3
001c8d 91ec      	LD   R30,X
001c8e 5fef      	SUBI R30,-LOW(1)
001c8f 93ec      	ST   X,R30
001c90 50e1      	SUBI R30,LOW(1)
001c91 e0f0      	LDI  R31,0
001c92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x36:
001c93 9678      	ADIW R30,24
001c94 010f      	MOVW R0,R30
001c95 01df      	MOVW R26,R30
001c96 940e 1fc8 	CALL __GETD1P
001c98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x37:
001c99 940e 1fc8 	CALL __GETD1P
                +
001c9b 89aa     +LDD R26 , Y + 18
001c9c 89bb     +LDD R27 , Y + 18 + 1
001c9d 898c     +LDD R24 , Y + 18 + 2
001c9e 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
001c9f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
                +
001ca0 89aa     +LDD R26 , Y + 18
001ca1 89bb     +LDD R27 , Y + 18 + 1
001ca2 898c     +LDD R24 , Y + 18 + 2
001ca3 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
001ca4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
                +
001ca5 e0a0     +LDI R26 , LOW ( 0x200 )
001ca6 e0b2     +LDI R27 , HIGH ( 0x200 )
001ca7 e080     +LDI R24 , BYTE3 ( 0x200 )
001ca8 e090     +LDI R25 , BYTE4 ( 0x200 )
                 	__GETD2N 0x200
001ca9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
                +
001caa 89ea     +LDD R30 , Y + 18
001cab 89fb     +LDD R31 , Y + 18 + 1
001cac 896c     +LDD R22 , Y + 18 + 2
001cad 897d     +LDD R23 , Y + 18 + 3
                 	__GETD1S 18
001cae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3B:
                +
001caf 50e1     +SUBI R30 , LOW ( 1 )
001cb0 40f0     +SBCI R31 , HIGH ( 1 )
001cb1 4060     +SBCI R22 , BYTE3 ( 1 )
001cb2 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
001cb3 01df      	MOVW R26,R30
001cb4 01cb      	MOVW R24,R22
                +
001cb5 85ea     +LDD R30 , Y + 10
001cb6 85fb     +LDD R31 , Y + 10 + 1
001cb7 856c     +LDD R22 , Y + 10 + 2
001cb8 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
001cb9 940e 1f7f 	CALL __DIVD21U
001cbb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
001cbc 940e 1fc8 	CALL __GETD1P
                +
001cbe 87ee     +STD Y + 14 , R30
001cbf 87ff     +STD Y + 14 + 1 , R31
001cc0 8b68     +STD Y + 14 + 2 , R22
001cc1 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
001cc2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3D:
                +
001cc3 85ee     +LDD R30 , Y + 14
001cc4 85ff     +LDD R31 , Y + 14 + 1
001cc5 8968     +LDD R22 , Y + 14 + 2
001cc6 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
                +
001cc7 01d8     +MOVW R26 , R16
001cc8 9694     +ADIW R26 , 36
001cc9 940e 1fd3+CALL __PUTDP1
                 	__PUTD1RNS 16,36
001ccb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3E:
001ccc 93ea      	ST   -Y,R30
                +
001ccd e0a0     +LDI R26 , LOW ( 0x0 )
001cce e0b0     +LDI R27 , HIGH ( 0x0 )
001ccf e080     +LDI R24 , BYTE3 ( 0x0 )
001cd0 e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
001cd1 940c 1459 	JMP  _send_cmd_G000
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3F:
001cd3 2fe1      	MOV  R30,R17
001cd4 e0f0      	LDI  R31,0
001cd5 01de      	MOVW R26,R28
001cd6 9616      	ADIW R26,6
001cd7 0fea      	ADD  R30,R26
001cd8 1ffb      	ADC  R31,R27
001cd9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
001cda bbeb      	OUT  0x1B,R30
001cdb 81e8      	LD   R30,Y
001cdc bbe5      	OUT  0x15,R30
001cdd 9891      	CBI  0x12,1
001cde 9a91      	SBI  0x12,1
001cdf 9a93      	SBI  0x12,3
001ce0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:46 WORDS
                 SUBOPT_0x41:
001ce1 9724      	SBIW R28,4
001ce2 e2a0      	LDI  R26,LOW(32)
001ce3 940e 159b 	CALL _lcd_write_index_register
001ce5 e0a0      	LDI  R26,LOW(0)
001ce6 e0b0      	LDI  R27,0
001ce7 940e 15a3 	CALL _lcd_write_wdr
001ce9 e2a1      	LDI  R26,LOW(33)
001cea 940e 159b 	CALL _lcd_write_index_register
001cec e0a0      	LDI  R26,LOW(0)
001ced e0b0      	LDI  R27,0
001cee 940e 15a3 	CALL _lcd_write_wdr
001cf0 e5a0      	LDI  R26,LOW(80)
001cf1 940e 159b 	CALL _lcd_write_index_register
001cf3 e0a0      	LDI  R26,LOW(0)
001cf4 e0b0      	LDI  R27,0
001cf5 940e 15a3 	CALL _lcd_write_wdr
001cf7 e5a1      	LDI  R26,LOW(81)
001cf8 940e 159b 	CALL _lcd_write_index_register
001cfa eeaf      	LDI  R26,LOW(239)
001cfb e0b0      	LDI  R27,0
001cfc 940e 15a3 	CALL _lcd_write_wdr
001cfe e5a2      	LDI  R26,LOW(82)
001cff 940e 159b 	CALL _lcd_write_index_register
001d01 e0a0      	LDI  R26,LOW(0)
001d02 e0b0      	LDI  R27,0
001d03 940e 15a3 	CALL _lcd_write_wdr
001d05 e5a3      	LDI  R26,LOW(83)
001d06 940e 159b 	CALL _lcd_write_index_register
001d08 e3af      	LDI  R26,LOW(319)
001d09 e0b1      	LDI  R27,HIGH(319)
001d0a 940e 15a3 	CALL _lcd_write_wdr
001d0c e2a2      	LDI  R26,LOW(34)
001d0d 940e 159b 	CALL _lcd_write_index_register
001d0f e0e0      	LDI  R30,LOW(0)
001d10 940e 1fec 	CALL __CLRD1S0
001d12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x42:
001d13 940e 1fe2 	CALL __GETD2S0
                +
001d15 30a0     +CPI R26 , LOW ( 0x12C00 )
001d16 e2ec     +LDI R30 , HIGH ( 0x12C00 )
001d17 07be     +CPC R27 , R30
001d18 e0e1     +LDI R30 , BYTE3 ( 0x12C00 )
001d19 078e     +CPC R24 , R30
001d1a e0e0     +LDI R30 , BYTE4 ( 0x12C00 )
001d1b 079e     +CPC R25 , R30
                 	__CPD2N 0x12C00
001d1c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x43:
001d1d 940e 1fdd 	CALL __GETD1S0
                +
001d1f 5fef     +SUBI R30 , LOW ( - 1 )
001d20 4fff     +SBCI R31 , HIGH ( - 1 )
001d21 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001d22 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
001d23 940e 1fe7 	CALL __PUTD1S0
001d25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x44:
001d26 81ac      	LDD  R26,Y+4
001d27 81bd      	LDD  R27,Y+4+1
001d28 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x45:
001d2a 940e 159b 	CALL _lcd_write_index_register
001d2c e0a1      	LDI  R26,LOW(1)
001d2d e0b0      	LDI  R27,0
001d2e 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
001d30 e3a2      	LDI  R26,LOW(50)
001d31 e0b0      	LDI  R27,0
001d32 940c 1ec1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
001d34 940e 159b 	CALL _lcd_write_index_register
001d36 e0a0      	LDI  R26,LOW(1792)
001d37 e0b7      	LDI  R27,HIGH(1792)
001d38 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 31 TIMES, CODE SIZE REDUCTION:117 WORDS
                 SUBOPT_0x48:
001d3a 940e 159b 	CALL _lcd_write_index_register
001d3c e0a0      	LDI  R26,LOW(0)
001d3d e0b0      	LDI  R27,0
001d3e 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x49:
001d40 e1a1      	LDI  R26,LOW(17)
001d41 940e 159b 	CALL _lcd_write_index_register
001d43 e0a7      	LDI  R26,LOW(7)
001d44 e0b0      	LDI  R27,0
001d45 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4A:
001d47 e5a1      	LDI  R26,LOW(81)
001d48 940e 159b 	CALL _lcd_write_index_register
001d4a eeaf      	LDI  R26,LOW(239)
001d4b e0b0      	LDI  R27,0
001d4c 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4B:
001d4e e5a3      	LDI  R26,LOW(83)
001d4f 940e 159b 	CALL _lcd_write_index_register
001d51 e3af      	LDI  R26,LOW(319)
001d52 e0b1      	LDI  R27,HIGH(319)
001d53 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4C:
001d55 940e 159b 	CALL _lcd_write_index_register
001d57 cfce      	RJMP SUBOPT_0x44
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4D:
001d58 e2a1      	LDI  R26,LOW(33)
001d59 940e 159b 	CALL _lcd_write_index_register
001d5b 81aa      	LDD  R26,Y+2
001d5c 81bb      	LDD  R27,Y+2+1
001d5d 940e 15a3 	CALL _lcd_write_wdr
001d5f e5a0      	LDI  R26,LOW(80)
001d60 cff4      	RJMP SUBOPT_0x4C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4E:
001d61 e5a2      	LDI  R26,LOW(82)
001d62 940e 159b 	CALL _lcd_write_index_register
001d64 81aa      	LDD  R26,Y+2
001d65 81bb      	LDD  R27,Y+2+1
001d66 940e 15a3 	CALL _lcd_write_wdr
001d68 e5a3      	LDI  R26,LOW(83)
001d69 940e 159b 	CALL _lcd_write_index_register
001d6b 81aa      	LDD  R26,Y+2
001d6c 81bb      	LDD  R27,Y+2+1
001d6d 940e 15a3 	CALL _lcd_write_wdr
001d6f e2a2      	LDI  R26,LOW(34)
001d70 940c 159b 	JMP  _lcd_write_index_register
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4F:
001d72 85e8      	LDD  R30,Y+8
001d73 85f9      	LDD  R31,Y+8+1
001d74 89a8      	LDD  R26,Y+16
001d75 89b9      	LDD  R27,Y+16+1
001d76 0fea      	ADD  R30,R26
001d77 1ffb      	ADC  R31,R27
001d78 8be8      	STD  Y+16,R30
001d79 8bf9      	STD  Y+16+1,R31
001d7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x50:
001d7b 01fa      	MOVW R30,R20
001d7c 89aa      	LDD  R26,Y+18
001d7d 89bb      	LDD  R27,Y+18+1
001d7e 0fea      	ADD  R30,R26
001d7f 1ffb      	ADC  R31,R27
001d80 8bea      	STD  Y+18,R30
001d81 8bfb      	STD  Y+18+1,R31
001d82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x51:
001d83 81a8      	LD   R26,Y
001d84 81b9      	LDD  R27,Y+1
001d85 0fea      	ADD  R30,R26
001d86 1ffb      	ADC  R31,R27
001d87 83e8      	ST   Y,R30
001d88 83f9      	STD  Y+1,R31
001d89 89ea      	LDD  R30,Y+18
001d8a 89fb      	LDD  R31,Y+18+1
001d8b 93fa      	ST   -Y,R31
001d8c 93ea      	ST   -Y,R30
001d8d 89ea      	LDD  R30,Y+18
001d8e 89fb      	LDD  R31,Y+18+1
001d8f 93fa      	ST   -Y,R31
001d90 93ea      	ST   -Y,R30
001d91 85ae      	LDD  R26,Y+14
001d92 85bf      	LDD  R27,Y+14+1
001d93 940c 16cb 	JMP  _lcd_write_pixel
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x52:
001d95 940e 159b 	CALL _lcd_write_index_register
001d97 85ac      	LDD  R26,Y+12
001d98 85bd      	LDD  R27,Y+12+1
001d99 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x53:
001d9b 940e 159b 	CALL _lcd_write_index_register
001d9d 85aa      	LDD  R26,Y+10
001d9e 85bb      	LDD  R27,Y+10+1
001d9f 940c 15a3 	JMP  _lcd_write_wdr
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x54:
001da1 85e9      	LDD  R30,Y+9
001da2 85fa      	LDD  R31,Y+9+1
001da3 93fa      	ST   -Y,R31
001da4 93ea      	ST   -Y,R30
001da5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x55:
001da6 85ed      	LDD  R30,Y+13
001da7 85fe      	LDD  R31,Y+13+1
001da8 93fa      	ST   -Y,R31
001da9 93ea      	ST   -Y,R30
001daa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x56:
001dab 85a8      	LDD  R26,Y+8
001dac 85b9      	LDD  R27,Y+8+1
001dad 940e 16ef 	CALL _lcd_draw_line
001daf 81ed      	LDD  R30,Y+5
001db0 81fe      	LDD  R31,Y+5+1
001db1 93fa      	ST   -Y,R31
001db2 93ea      	ST   -Y,R30
001db3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x57:
001db4 81ed      	LDD  R30,Y+5
001db5 81fe      	LDD  R31,Y+5+1
001db6 93fa      	ST   -Y,R31
001db7 93ea      	ST   -Y,R30
001db8 cfed      	RJMP SUBOPT_0x55
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x58:
001db9 85ed      	LDD  R30,Y+13
001dba 85fe      	LDD  R31,Y+13+1
001dbb 1be0      	SUB  R30,R16
001dbc 0bf1      	SBC  R31,R17
001dbd 93fa      	ST   -Y,R31
001dbe 93ea      	ST   -Y,R30
001dbf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x59:
001dc0 85ad      	LDD  R26,Y+13
001dc1 85be      	LDD  R27,Y+13+1
001dc2 0fea      	ADD  R30,R26
001dc3 1ffb      	ADC  R31,R27
001dc4 93fa      	ST   -Y,R31
001dc5 93ea      	ST   -Y,R30
001dc6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5A:
001dc7 01f8      	MOVW R30,R16
001dc8 89a9      	LDD  R26,Y+17
001dc9 89ba      	LDD  R27,Y+17+1
001dca 0fea      	ADD  R30,R26
001dcb 1ffb      	ADC  R31,R27
001dcc 93fa      	ST   -Y,R31
001dcd 93ea      	ST   -Y,R30
001dce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5B:
001dcf 01f9      	MOVW R30,R18
001dd0 89a9      	LDD  R26,Y+17
001dd1 89ba      	LDD  R27,Y+17+1
001dd2 0fea      	ADD  R30,R26
001dd3 1ffb      	ADC  R31,R27
001dd4 93fa      	ST   -Y,R31
001dd5 93ea      	ST   -Y,R30
001dd6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5C:
001dd7 85ae      	LDD  R26,Y+14
001dd8 85bf      	LDD  R27,Y+14+1
001dd9 940c 16ef 	JMP  _lcd_draw_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x5D:
001ddb 85ed      	LDD  R30,Y+13
001ddc 85fe      	LDD  R31,Y+13+1
001ddd 1be2      	SUB  R30,R18
001dde 0bf3      	SBC  R31,R19
001ddf 93fa      	ST   -Y,R31
001de0 93ea      	ST   -Y,R30
001de1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5E:
001de2 85ed      	LDD  R30,Y+13
001de3 85fe      	LDD  R31,Y+13+1
001de4 0fe0      	ADD  R30,R16
001de5 1ff1      	ADC  R31,R17
001de6 93fa      	ST   -Y,R31
001de7 93ea      	ST   -Y,R30
001de8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5F:
001de9 85ed      	LDD  R30,Y+13
001dea 85fe      	LDD  R31,Y+13+1
001deb 0fe2      	ADD  R30,R18
001dec 1ff3      	ADC  R31,R19
001ded 93fa      	ST   -Y,R31
001dee 93ea      	ST   -Y,R30
001def 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x60:
001df0 85aa      	LDD  R26,Y+10
001df1 85bb      	LDD  R27,Y+10+1
001df2 940c 16cb 	JMP  _lcd_write_pixel
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x61:
001df4 91a0 048f 	LDS  R26,_x_text
001df6 e0e8      	LDI  R30,LOW(8)
001df7 9fea      	MUL  R30,R26
001df8 01f0      	MOVW R30,R0
001df9 0fe0      	ADD  R30,R16
001dfa 1ff1      	ADC  R31,R17
001dfb 93fa      	ST   -Y,R31
001dfc 93ea      	ST   -Y,R30
001dfd 91a0 0490 	LDS  R26,_y_text
001dff e1e0      	LDI  R30,LOW(16)
001e00 9fea      	MUL  R30,R26
001e01 01f0      	MOVW R30,R0
001e02 0fe2      	ADD  R30,R18
001e03 1ff3      	ADC  R31,R19
001e04 93fa      	ST   -Y,R31
001e05 93ea      	ST   -Y,R30
001e06 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x62:
001e07 91a0 0490 	LDS  R26,_y_text
001e09 e1e0      	LDI  R30,LOW(16)
001e0a 9fea      	MUL  R30,R26
001e0b 01f0      	MOVW R30,R0
001e0c 0fe2      	ADD  R30,R18
001e0d 1ff3      	ADC  R31,R19
001e0e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x63:
001e0f e0e0      	LDI  R30,LOW(0)
001e10 93e0 0791 	STS  _y,R30
001e12 93e0 0792 	STS  _y+1,R30
001e14 93e0 0793 	STS  _y+2,R30
001e16 93e0 0794 	STS  _y+3,R30
001e18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x64:
001e19 e9e1      	LDI  R30,LOW(_buffer)
001e1a e0f4      	LDI  R31,HIGH(_buffer)
001e1b 93fa      	ST   -Y,R31
001e1c 93ea      	ST   -Y,R30
001e1d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x65:
001e1e 93fa      	ST   -Y,R31
001e1f 93ea      	ST   -Y,R30
001e20 e8ae      	LDI  R26,LOW(_w_br)
001e21 e0b7      	LDI  R27,HIGH(_w_br)
001e22 940c 125b 	JMP  _pf_read
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x66:
001e24 91e0 0797 	LDS  R30,_i1
001e26 91f0 0798 	LDS  R31,_i1+1
001e28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x67:
001e29 93e0 079c 	STS  _color,R30
001e2b 93f0 079d 	STS  _color+1,R31
001e2d 9360 079e 	STS  _color+2,R22
001e2f 9370 079f 	STS  _color+3,R23
001e31 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x68:
001e32 91a0 079c 	LDS  R26,_color
001e34 91b0 079d 	LDS  R27,_color+1
001e36 9180 079e 	LDS  R24,_color+2
001e38 9190 079f 	LDS  R25,_color+3
001e3a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x69:
001e3b 940e 1f30 	CALL __CWD1
001e3d 93e0 07a0 	STS  _tcolor,R30
001e3f 93f0 07a1 	STS  _tcolor+1,R31
001e41 9360 07a2 	STS  _tcolor+2,R22
001e43 9370 07a3 	STS  _tcolor+3,R23
001e45 dfec      	RCALL SUBOPT_0x68
001e46 940e 1ecb 	CALL __ADDD12
001e48 dfe0      	RCALL SUBOPT_0x67
001e49 cfe8      	RJMP SUBOPT_0x68
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6A:
001e4a 93fa      	ST   -Y,R31
001e4b 93ea      	ST   -Y,R30
001e4c cd15      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6B:
001e4d e0e0      	LDI  R30,LOW(0)
001e4e 93ea      	ST   -Y,R30
001e4f e8a0      	LDI  R26,LOW(65408)
001e50 efbf      	LDI  R27,HIGH(65408)
001e51 940c 18d6 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6C:
001e53 e0e0      	LDI  R30,LOW(0)
001e54 e0f0      	LDI  R31,HIGH(0)
001e55 93fa      	ST   -Y,R31
001e56 93ea      	ST   -Y,R30
001e57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6D:
001e58 eba8      	LDI  R26,LOW(3000)
001e59 e0bb      	LDI  R27,HIGH(3000)
001e5a 940c 1ec1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x6E:
001e5c e6a4      	LDI  R26,LOW(100)
001e5d e0b0      	LDI  R27,0
001e5e 940c 1ec1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6F:
001e60 eea8      	LDI  R26,LOW(1000)
001e61 e0b3      	LDI  R27,HIGH(1000)
001e62 940c 1ec1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x70:
001e64 e6a2      	LDI  R26,LOW(_Fs)
001e65 e0b7      	LDI  R27,HIGH(_Fs)
001e66 940e 105f 	CALL _pf_mount
001e68 30e0      	CPI  R30,0
001e69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x71:
001e6a e0a6      	LDI  R26,LOW(6)
001e6b e0b0      	LDI  R27,0
001e6c 940c 18f1 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x72:
                +
001e6e e0aa     +LDI R26 , LOW ( 0xA )
001e6f e0b0     +LDI R27 , HIGH ( 0xA )
001e70 e080     +LDI R24 , BYTE3 ( 0xA )
001e71 e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
001e72 940e 1352 	CALL _pf_lseek
001e74 cfa4      	RJMP SUBOPT_0x64
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x73:
001e75 e0e4      	LDI  R30,LOW(4)
001e76 e0f0      	LDI  R31,HIGH(4)
001e77 cfa6      	RJMP SUBOPT_0x65
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:187 WORDS
                 SUBOPT_0x74:
                +
001e78 91a0 0494+LDS R26 , _buffer + ( 3 )
                 	__GETB2MN _buffer,3
001e7a e0b0      	LDI  R27,0
001e7b e0e0      	LDI  R30,LOW(512)
001e7c e0f2      	LDI  R31,HIGH(512)
001e7d 940e 1f62 	CALL __MULW12
001e7f 01bf      	MOVW R22,R30
                +
001e80 91a0 0493+LDS R26 , _buffer + ( 2 )
                 	__GETB2MN _buffer,2
001e82 e4e0      	LDI  R30,LOW(64)
001e83 9fea      	MUL  R30,R26
001e84 01f0      	MOVW R30,R0
001e85 01db      	MOVW R26,R22
001e86 0fae      	ADD  R26,R30
001e87 1fbf      	ADC  R27,R31
                +
001e88 91e0 0492+LDS R30 , _buffer + ( 1 )
                 	__GETB1MN _buffer,1
001e8a e0f0      	LDI  R31,0
001e8b 0fae      	ADD  R26,R30
001e8c 1fbf      	ADC  R27,R31
001e8d 91e0 0491 	LDS  R30,_buffer
001e8f e0f0      	LDI  R31,0
001e90 0fea      	ADD  R30,R26
001e91 1ffb      	ADC  R31,R27
001e92 93e0 0795 	STS  _ADDR,R30
001e94 93f0 0796 	STS  _ADDR+1,R31
001e96 91a0 0795 	LDS  R26,_ADDR
001e98 91b0 0796 	LDS  R27,_ADDR+1
001e9a 2788      	CLR  R24
001e9b 2799      	CLR  R25
001e9c 940e 1352 	CALL _pf_lseek
001e9e 940c 191c 	JMP  _showbmp
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x75:
001ea0 e0a0      	LDI  R26,LOW(0)
001ea1 e0b0      	LDI  R27,0
001ea2 940e 105f 	CALL _pf_mount
001ea4 30e0      	CPI  R30,0
001ea5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x76:
001ea6 e7e8      	LDI  R30,LOW(120)
001ea7 e0f0      	LDI  R31,HIGH(120)
001ea8 93fa      	ST   -Y,R31
001ea9 93ea      	ST   -Y,R30
001eaa eae0      	LDI  R30,LOW(160)
001eab e0f0      	LDI  R31,HIGH(160)
001eac 93fa      	ST   -Y,R31
001ead 93ea      	ST   -Y,R30
001eae 91e0 07a4 	LDS  R30,_count
001eb0 e0f0      	LDI  R31,0
001eb1 93fa      	ST   -Y,R31
001eb2 93ea      	ST   -Y,R30
001eb3 e0e0      	LDI  R30,LOW(0)
001eb4 93ea      	ST   -Y,R30
001eb5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x77:
001eb6 91e0 07a4 	LDS  R30,_count
001eb8 5fef      	SUBI R30,-LOW(1)
001eb9 93e0 07a4 	STS  _count,R30
001ebb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x78:
001ebc e0e1      	LDI  R30,LOW(1)
001ebd e0f0      	LDI  R31,HIGH(1)
001ebe 93fa      	ST   -Y,R31
001ebf 93ea      	ST   -Y,R30
001ec0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
001ec1 9610      	adiw r26,0
001ec2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
001ec3 ed80     +LDI R24 , LOW ( 0x7D0 )
001ec4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001ec5 9701     +SBIW R24 , 1
001ec6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
001ec7 95a8      	wdr
001ec8 9711      	sbiw r26,1
001ec9 f7c9      	brne __delay_ms0
                 __delay_ms1:
001eca 9508      	ret
                 
                 __ADDD12:
001ecb 0fea      	ADD  R30,R26
001ecc 1ffb      	ADC  R31,R27
001ecd 1f68      	ADC  R22,R24
001ece 1f79      	ADC  R23,R25
001ecf 9508      	RET
                 
                 __SUBD12:
001ed0 1bea      	SUB  R30,R26
001ed1 0bfb      	SBC  R31,R27
001ed2 0b68      	SBC  R22,R24
001ed3 0b79      	SBC  R23,R25
001ed4 9508      	RET
                 
                 __SUBD21:
001ed5 1bae      	SUB  R26,R30
001ed6 0bbf      	SBC  R27,R31
001ed7 0b86      	SBC  R24,R22
001ed8 0b97      	SBC  R25,R23
001ed9 9508      	RET
                 
                 __ANDD12:
001eda 23ea      	AND  R30,R26
001edb 23fb      	AND  R31,R27
001edc 2368      	AND  R22,R24
001edd 2379      	AND  R23,R25
001ede 9508      	RET
                 
                 __ORD12:
001edf 2bea      	OR   R30,R26
001ee0 2bfb      	OR   R31,R27
001ee1 2b68      	OR   R22,R24
001ee2 2b79      	OR   R23,R25
001ee3 9508      	RET
                 
                 __ANEGW1:
001ee4 95f1      	NEG  R31
001ee5 95e1      	NEG  R30
001ee6 40f0      	SBCI R31,0
001ee7 9508      	RET
                 
                 __LSRB12:
001ee8 23ee      	TST  R30
001ee9 2e0e      	MOV  R0,R30
001eea 2fea      	MOV  R30,R26
001eeb f019      	BREQ __LSRB12R
                 __LSRB12L:
001eec 95e6      	LSR  R30
001eed 940a      	DEC  R0
001eee f7e9      	BRNE __LSRB12L
                 __LSRB12R:
001eef 9508      	RET
                 
                 __LSLD12:
001ef0 23ee      	TST  R30
001ef1 2e0e      	MOV  R0,R30
001ef2 01fd      	MOVW R30,R26
001ef3 01bc      	MOVW R22,R24
001ef4 f031      	BREQ __LSLD12R
                 __LSLD12L:
001ef5 0fee      	LSL  R30
001ef6 1fff      	ROL  R31
001ef7 1f66      	ROL  R22
001ef8 1f77      	ROL  R23
001ef9 940a      	DEC  R0
001efa f7d1      	BRNE __LSLD12L
                 __LSLD12R:
001efb 9508      	RET
                 
                 __LSRD12:
001efc 23ee      	TST  R30
001efd 2e0e      	MOV  R0,R30
001efe 01fd      	MOVW R30,R26
001eff 01bc      	MOVW R22,R24
001f00 f031      	BREQ __LSRD12R
                 __LSRD12L:
001f01 9576      	LSR  R23
001f02 9567      	ROR  R22
001f03 95f7      	ROR  R31
001f04 95e7      	ROR  R30
001f05 940a      	DEC  R0
001f06 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
001f07 9508      	RET
                 
                 __LSLW4:
001f08 0fee      	LSL  R30
001f09 1fff      	ROL  R31
                 __LSLW3:
001f0a 0fee      	LSL  R30
001f0b 1fff      	ROL  R31
                 __LSLW2:
001f0c 0fee      	LSL  R30
001f0d 1fff      	ROL  R31
001f0e 0fee      	LSL  R30
001f0f 1fff      	ROL  R31
001f10 9508      	RET
                 
                 __ASRW3:
001f11 95f5      	ASR  R31
001f12 95e7      	ROR  R30
                 __ASRW2:
001f13 95f5      	ASR  R31
001f14 95e7      	ROR  R30
001f15 95f5      	ASR  R31
001f16 95e7      	ROR  R30
001f17 9508      	RET
                 
                 __LSRW4:
001f18 95f6      	LSR  R31
001f19 95e7      	ROR  R30
                 __LSRW3:
001f1a 95f6      	LSR  R31
001f1b 95e7      	ROR  R30
                 __LSRW2:
001f1c 95f6      	LSR  R31
001f1d 95e7      	ROR  R30
001f1e 95f6      	LSR  R31
001f1f 95e7      	ROR  R30
001f20 9508      	RET
                 
                 __ASRW8:
001f21 2fef      	MOV  R30,R31
001f22 27ff      	CLR  R31
001f23 fde7      	SBRC R30,7
001f24 efff      	SER  R31
001f25 9508      	RET
                 
                 __LSRD16:
001f26 2fe6      	MOV  R30,R22
001f27 2ff7      	MOV  R31,R23
001f28 e060      	LDI  R22,0
001f29 e070      	LDI  R23,0
001f2a 9508      	RET
                 
                 __LSLD16:
001f2b 2f6e      	MOV  R22,R30
001f2c 2f7f      	MOV  R23,R31
001f2d e0e0      	LDI  R30,0
001f2e e0f0      	LDI  R31,0
001f2f 9508      	RET
                 
                 __CWD1:
001f30 2f6f      	MOV  R22,R31
001f31 0f66      	ADD  R22,R22
001f32 0b66      	SBC  R22,R22
001f33 2f76      	MOV  R23,R22
001f34 9508      	RET
                 
                 __COMD1:
001f35 95e0      	COM  R30
001f36 95f0      	COM  R31
001f37 9560      	COM  R22
001f38 9570      	COM  R23
001f39 9508      	RET
                 
                 __MULW12U:
001f3a 9ffa      	MUL  R31,R26
001f3b 2df0      	MOV  R31,R0
001f3c 9feb      	MUL  R30,R27
001f3d 0df0      	ADD  R31,R0
001f3e 9fea      	MUL  R30,R26
001f3f 2de0      	MOV  R30,R0
001f40 0df1      	ADD  R31,R1
001f41 9508      	RET
                 
                 __MULD12U:
001f42 9f7a      	MUL  R23,R26
001f43 2d70      	MOV  R23,R0
001f44 9f6b      	MUL  R22,R27
001f45 0d70      	ADD  R23,R0
001f46 9ff8      	MUL  R31,R24
001f47 0d70      	ADD  R23,R0
001f48 9fe9      	MUL  R30,R25
001f49 0d70      	ADD  R23,R0
001f4a 9f6a      	MUL  R22,R26
001f4b 2d60      	MOV  R22,R0
001f4c 0d71      	ADD  R23,R1
001f4d 9ffb      	MUL  R31,R27
001f4e 0d60      	ADD  R22,R0
001f4f 1d71      	ADC  R23,R1
001f50 9fe8      	MUL  R30,R24
001f51 0d60      	ADD  R22,R0
001f52 1d71      	ADC  R23,R1
001f53 2788      	CLR  R24
001f54 9ffa      	MUL  R31,R26
001f55 2df0      	MOV  R31,R0
001f56 0d61      	ADD  R22,R1
001f57 1f78      	ADC  R23,R24
001f58 9feb      	MUL  R30,R27
001f59 0df0      	ADD  R31,R0
001f5a 1d61      	ADC  R22,R1
001f5b 1f78      	ADC  R23,R24
001f5c 9fea      	MUL  R30,R26
001f5d 2de0      	MOV  R30,R0
001f5e 0df1      	ADD  R31,R1
001f5f 1f68      	ADC  R22,R24
001f60 1f78      	ADC  R23,R24
001f61 9508      	RET
                 
                 __MULW12:
001f62 d053      	RCALL __CHKSIGNW
001f63 dfd6      	RCALL __MULW12U
001f64 f40e      	BRTC __MULW121
001f65 df7e      	RCALL __ANEGW1
                 __MULW121:
001f66 9508      	RET
                 
                 __DIVW21U:
001f67 2400      	CLR  R0
001f68 2411      	CLR  R1
001f69 e190      	LDI  R25,16
                 __DIVW21U1:
001f6a 0faa      	LSL  R26
001f6b 1fbb      	ROL  R27
001f6c 1c00      	ROL  R0
001f6d 1c11      	ROL  R1
001f6e 1a0e      	SUB  R0,R30
001f6f 0a1f      	SBC  R1,R31
001f70 f418      	BRCC __DIVW21U2
001f71 0e0e      	ADD  R0,R30
001f72 1e1f      	ADC  R1,R31
001f73 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001f74 60a1      	SBR  R26,1
                 __DIVW21U3:
001f75 959a      	DEC  R25
001f76 f799      	BRNE __DIVW21U1
001f77 01fd      	MOVW R30,R26
001f78 01d0      	MOVW R26,R0
001f79 9508      	RET
                 
                 __DIVW21:
001f7a d03b      	RCALL __CHKSIGNW
001f7b dfeb      	RCALL __DIVW21U
001f7c f40e      	BRTC __DIVW211
001f7d df66      	RCALL __ANEGW1
                 __DIVW211:
001f7e 9508      	RET
                 
                 __DIVD21U:
001f7f 933f      	PUSH R19
001f80 934f      	PUSH R20
001f81 935f      	PUSH R21
001f82 2400      	CLR  R0
001f83 2411      	CLR  R1
001f84 2744      	CLR  R20
001f85 2755      	CLR  R21
001f86 e230      	LDI  R19,32
                 __DIVD21U1:
001f87 0faa      	LSL  R26
001f88 1fbb      	ROL  R27
001f89 1f88      	ROL  R24
001f8a 1f99      	ROL  R25
001f8b 1c00      	ROL  R0
001f8c 1c11      	ROL  R1
001f8d 1f44      	ROL  R20
001f8e 1f55      	ROL  R21
001f8f 1a0e      	SUB  R0,R30
001f90 0a1f      	SBC  R1,R31
001f91 0b46      	SBC  R20,R22
001f92 0b57      	SBC  R21,R23
001f93 f428      	BRCC __DIVD21U2
001f94 0e0e      	ADD  R0,R30
001f95 1e1f      	ADC  R1,R31
001f96 1f46      	ADC  R20,R22
001f97 1f57      	ADC  R21,R23
001f98 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
001f99 60a1      	SBR  R26,1
                 __DIVD21U3:
001f9a 953a      	DEC  R19
001f9b f759      	BRNE __DIVD21U1
001f9c 01fd      	MOVW R30,R26
001f9d 01bc      	MOVW R22,R24
001f9e 01d0      	MOVW R26,R0
001f9f 01ca      	MOVW R24,R20
001fa0 915f      	POP  R21
001fa1 914f      	POP  R20
001fa2 913f      	POP  R19
001fa3 9508      	RET
                 
                 __MODW21:
001fa4 94e8      	CLT
001fa5 ffb7      	SBRS R27,7
001fa6 c004      	RJMP __MODW211
001fa7 95a0      	COM  R26
001fa8 95b0      	COM  R27
001fa9 9611      	ADIW R26,1
001faa 9468      	SET
                 __MODW211:
001fab fdf7      	SBRC R31,7
001fac df37      	RCALL __ANEGW1
001fad dfb9      	RCALL __DIVW21U
001fae 01fd      	MOVW R30,R26
001faf f40e      	BRTC __MODW212
001fb0 df33      	RCALL __ANEGW1
                 __MODW212:
001fb1 9508      	RET
                 
                 __MODD21U:
001fb2 dfcc      	RCALL __DIVD21U
001fb3 01fd      	MOVW R30,R26
001fb4 01bc      	MOVW R22,R24
001fb5 9508      	RET
                 
                 __CHKSIGNW:
001fb6 94e8      	CLT
001fb7 fff7      	SBRS R31,7
001fb8 c002      	RJMP __CHKSW1
001fb9 df2a      	RCALL __ANEGW1
001fba 9468      	SET
                 __CHKSW1:
001fbb ffb7      	SBRS R27,7
001fbc c006      	RJMP __CHKSW2
001fbd 95a0      	COM  R26
001fbe 95b0      	COM  R27
001fbf 9611      	ADIW R26,1
001fc0 f800      	BLD  R0,0
001fc1 9403      	INC  R0
001fc2 fa00      	BST  R0,0
                 __CHKSW2:
001fc3 9508      	RET
                 
                 __GETW1P:
001fc4 91ed      	LD   R30,X+
001fc5 91fc      	LD   R31,X
001fc6 9711      	SBIW R26,1
001fc7 9508      	RET
                 
                 __GETD1P:
001fc8 91ed      	LD   R30,X+
001fc9 91fd      	LD   R31,X+
001fca 916d      	LD   R22,X+
001fcb 917c      	LD   R23,X
001fcc 9713      	SBIW R26,3
001fcd 9508      	RET
                 
                 __GETD1P_INC:
001fce 91ed      	LD   R30,X+
001fcf 91fd      	LD   R31,X+
001fd0 916d      	LD   R22,X+
001fd1 917d      	LD   R23,X+
001fd2 9508      	RET
                 
                 __PUTDP1:
001fd3 93ed      	ST   X+,R30
001fd4 93fd      	ST   X+,R31
001fd5 936d      	ST   X+,R22
001fd6 937c      	ST   X,R23
001fd7 9508      	RET
                 
                 __PUTDP1_DEC:
001fd8 937e      	ST   -X,R23
001fd9 936e      	ST   -X,R22
001fda 93fe      	ST   -X,R31
001fdb 93ee      	ST   -X,R30
001fdc 9508      	RET
                 
                 __GETD1S0:
001fdd 81e8      	LD   R30,Y
001fde 81f9      	LDD  R31,Y+1
001fdf 816a      	LDD  R22,Y+2
001fe0 817b      	LDD  R23,Y+3
001fe1 9508      	RET
                 
                 __GETD2S0:
001fe2 81a8      	LD   R26,Y
001fe3 81b9      	LDD  R27,Y+1
001fe4 818a      	LDD  R24,Y+2
001fe5 819b      	LDD  R25,Y+3
001fe6 9508      	RET
                 
                 __PUTD1S0:
001fe7 83e8      	ST   Y,R30
001fe8 83f9      	STD  Y+1,R31
001fe9 836a      	STD  Y+2,R22
001fea 837b      	STD  Y+3,R23
001feb 9508      	RET
                 
                 __CLRD1S0:
001fec 83e8      	ST   Y,R30
001fed 83e9      	STD  Y+1,R30
001fee 83ea      	STD  Y+2,R30
001fef 83eb      	STD  Y+3,R30
001ff0 9508      	RET
                 
                 __PUTPARD1:
001ff1 937a      	ST   -Y,R23
001ff2 936a      	ST   -Y,R22
001ff3 93fa      	ST   -Y,R31
001ff4 93ea      	ST   -Y,R30
001ff5 9508      	RET
                 
                 __PUTPARD2:
001ff6 939a      	ST   -Y,R25
001ff7 938a      	ST   -Y,R24
001ff8 93ba      	ST   -Y,R27
001ff9 93aa      	ST   -Y,R26
001ffa 9508      	RET
                 
                 __SWAPD12:
001ffb 2e18      	MOV  R1,R24
001ffc 2f86      	MOV  R24,R22
001ffd 2d61      	MOV  R22,R1
001ffe 2e19      	MOV  R1,R25
001fff 2f97      	MOV  R25,R23
002000 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
002001 2e1b      	MOV  R1,R27
002002 2fbf      	MOV  R27,R31
002003 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
002004 2e1a      	MOV  R1,R26
002005 2fae      	MOV  R26,R30
002006 2de1      	MOV  R30,R1
002007 9508      	RET
                 
                 __CPD10:
002008 9730      	SBIW R30,0
002009 4060      	SBCI R22,0
00200a 4070      	SBCI R23,0
00200b 9508      	RET
                 
                 __CPD02:
00200c 2400      	CLR  R0
00200d 160a      	CP   R0,R26
00200e 060b      	CPC  R0,R27
00200f 0608      	CPC  R0,R24
002010 0609      	CPC  R0,R25
002011 9508      	RET
                 
                 __CPD12:
002012 17ea      	CP   R30,R26
002013 07fb      	CPC  R31,R27
002014 0768      	CPC  R22,R24
002015 0779      	CPC  R23,R25
002016 9508      	RET
                 
                 __CPD21:
002017 17ae      	CP   R26,R30
002018 07bf      	CPC  R27,R31
002019 0786      	CPC  R24,R22
00201a 0797      	CPC  R25,R23
00201b 9508      	RET
                 
                 __SAVELOCR6:
00201c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00201d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00201e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00201f 932a      	ST   -Y,R18
                 __SAVELOCR2:
002020 931a      	ST   -Y,R17
002021 930a      	ST   -Y,R16
002022 9508      	RET
                 
                 __LOADLOCR6:
002023 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
002024 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
002025 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
002026 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
002027 8119      	LDD  R17,Y+1
002028 8108      	LD   R16,Y
002029 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00202a 0fac      	ADD  R26,R28
00202b 1fbd      	ADC  R27,R29
                 __INITLOC0:
00202c 9005      	LPM  R0,Z+
00202d 920d      	ST   X+,R0
00202e 958a      	DEC  R24
00202f f7e1      	BRNE __INITLOC0
002030 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  72 r1 :  26 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16: 101 r17: 107 r18:  70 r19:  47 r20:  38 r21:  36 r22: 127 r23:  99 
r24: 106 r25:  72 r26: 615 r27: 316 r28:  78 r29:   2 r30: 981 r31: 438 
x  :  70 y  : 833 z  :  94 
Registers used: 21 out of 35 (60.0%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  40 add   :  41 
adiw  : 130 and   :   7 andi  :  27 asr   :   5 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  85 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  21 
brlt  :   4 brmi  :   2 brne  :  62 brpl  :   3 brsh  :  18 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 663 
cbi   :  13 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  38 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :  14 cpc   :  46 cpi   :  83 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   1 jmp   :  44 ld    :  65 ldd   : 546 ldi   : 576 
lds   :  45 lpm   :  14 lsl   :  15 lsr   :   7 mov   :  66 movw  : 203 
mul   :  18 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :  27 
ori   :   0 out   :  29 pop   :  49 push  :  49 rcall : 126 ret   : 162 
reti  :   0 rjmp  : 177 rol   :  24 ror   :  13 sbc   :  30 sbci  :  43 
sbi   :  21 sbic  :   0 sbis  :   7 sbiw  :  57 sbr   :   2 sbrc  :   2 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   1 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 244 std   : 131 sts   :  37 sub   :  23 subi  :  37 swap  :   0 
tst   :   8 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x004062  10056   6426  16482   32768  50.3%
[.dseg] 0x000060 0x0007a9      0    841    841    2048  41.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
