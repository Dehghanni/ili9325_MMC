
;CodeVisionAVR C Compiler V3.12 Advanced
;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com

;Build configuration    : Release
;Chip type              : ATmega32A
;Program type           : Application
;Clock frequency        : 8.000000 MHz
;Memory model           : Small
;Optimize for           : Size
;(s)printf features     : int, width
;(s)scanf features      : int, width
;External RAM size      : 0
;Data Stack size        : 1024 byte(s)
;Heap size              : 0 byte(s)
;Promote 'char' to 'int': Yes
;'char' is unsigned     : Yes
;8 bit enums            : Yes
;Global 'const' stored in FLASH: No
;Enhanced function parameter passing: Yes
;Enhanced core instructions: On
;Automatic register allocation for global variables: On
;Smart register allocation: On

	#define _MODEL_SMALL_

	#pragma AVRPART ADMIN PART_NAME ATmega32A
	#pragma AVRPART MEMORY PROG_FLASH 32768
	#pragma AVRPART MEMORY EEPROM 1024
	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60

	#define CALL_SUPPORTED 1

	.LISTMAC
	.EQU UDRE=0x5
	.EQU RXC=0x7
	.EQU USR=0xB
	.EQU UDR=0xC
	.EQU SPSR=0xE
	.EQU SPDR=0xF
	.EQU EERE=0x0
	.EQU EEWE=0x1
	.EQU EEMWE=0x2
	.EQU EECR=0x1C
	.EQU EEDR=0x1D
	.EQU EEARL=0x1E
	.EQU EEARH=0x1F
	.EQU WDTCR=0x21
	.EQU MCUCR=0x35
	.EQU SPL=0x3D
	.EQU SPH=0x3E
	.EQU SREG=0x3F

	.DEF R0X0=R0
	.DEF R0X1=R1
	.DEF R0X2=R2
	.DEF R0X3=R3
	.DEF R0X4=R4
	.DEF R0X5=R5
	.DEF R0X6=R6
	.DEF R0X7=R7
	.DEF R0X8=R8
	.DEF R0X9=R9
	.DEF R0XA=R10
	.DEF R0XB=R11
	.DEF R0XC=R12
	.DEF R0XD=R13
	.DEF R0XE=R14
	.DEF R0XF=R15
	.DEF R0X10=R16
	.DEF R0X11=R17
	.DEF R0X12=R18
	.DEF R0X13=R19
	.DEF R0X14=R20
	.DEF R0X15=R21
	.DEF R0X16=R22
	.DEF R0X17=R23
	.DEF R0X18=R24
	.DEF R0X19=R25
	.DEF R0X1A=R26
	.DEF R0X1B=R27
	.DEF R0X1C=R28
	.DEF R0X1D=R29
	.DEF R0X1E=R30
	.DEF R0X1F=R31

	.EQU __SRAM_START=0x0060
	.EQU __SRAM_END=0x085F
	.EQU __DSTACK_SIZE=0x0400
	.EQU __HEAP_SIZE=0x0000
	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1

	.MACRO __CPD1N
	CPI  R30,LOW(@0)
	LDI  R26,HIGH(@0)
	CPC  R31,R26
	LDI  R26,BYTE3(@0)
	CPC  R22,R26
	LDI  R26,BYTE4(@0)
	CPC  R23,R26
	.ENDM

	.MACRO __CPD2N
	CPI  R26,LOW(@0)
	LDI  R30,HIGH(@0)
	CPC  R27,R30
	LDI  R30,BYTE3(@0)
	CPC  R24,R30
	LDI  R30,BYTE4(@0)
	CPC  R25,R30
	.ENDM

	.MACRO __CPWRR
	CP   R@0,R@2
	CPC  R@1,R@3
	.ENDM

	.MACRO __CPWRN
	CPI  R@0,LOW(@2)
	LDI  R30,HIGH(@2)
	CPC  R@1,R30
	.ENDM

	.MACRO __ADDB1MN
	SUBI R30,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDB2MN
	SUBI R26,LOW(-@0-(@1))
	.ENDM

	.MACRO __ADDW1MN
	SUBI R30,LOW(-@0-(@1))
	SBCI R31,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW2MN
	SUBI R26,LOW(-@0-(@1))
	SBCI R27,HIGH(-@0-(@1))
	.ENDM

	.MACRO __ADDW1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1FN
	SUBI R30,LOW(-2*@0-(@1))
	SBCI R31,HIGH(-2*@0-(@1))
	SBCI R22,BYTE3(-2*@0-(@1))
	.ENDM

	.MACRO __ADDD1N
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	SBCI R22,BYTE3(-@0)
	SBCI R23,BYTE4(-@0)
	.ENDM

	.MACRO __ADDD2N
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	SBCI R24,BYTE3(-@0)
	SBCI R25,BYTE4(-@0)
	.ENDM

	.MACRO __SUBD1N
	SUBI R30,LOW(@0)
	SBCI R31,HIGH(@0)
	SBCI R22,BYTE3(@0)
	SBCI R23,BYTE4(@0)
	.ENDM

	.MACRO __SUBD2N
	SUBI R26,LOW(@0)
	SBCI R27,HIGH(@0)
	SBCI R24,BYTE3(@0)
	SBCI R25,BYTE4(@0)
	.ENDM

	.MACRO __ANDBMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ANDWMNN
	LDS  R30,@0+(@1)
	ANDI R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ANDI R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ANDD1N
	ANDI R30,LOW(@0)
	ANDI R31,HIGH(@0)
	ANDI R22,BYTE3(@0)
	ANDI R23,BYTE4(@0)
	.ENDM

	.MACRO __ANDD2N
	ANDI R26,LOW(@0)
	ANDI R27,HIGH(@0)
	ANDI R24,BYTE3(@0)
	ANDI R25,BYTE4(@0)
	.ENDM

	.MACRO __ORBMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	.ENDM

	.MACRO __ORWMNN
	LDS  R30,@0+(@1)
	ORI  R30,LOW(@2)
	STS  @0+(@1),R30
	LDS  R30,@0+(@1)+1
	ORI  R30,HIGH(@2)
	STS  @0+(@1)+1,R30
	.ENDM

	.MACRO __ORD1N
	ORI  R30,LOW(@0)
	ORI  R31,HIGH(@0)
	ORI  R22,BYTE3(@0)
	ORI  R23,BYTE4(@0)
	.ENDM

	.MACRO __ORD2N
	ORI  R26,LOW(@0)
	ORI  R27,HIGH(@0)
	ORI  R24,BYTE3(@0)
	ORI  R25,BYTE4(@0)
	.ENDM

	.MACRO __DELAY_USB
	LDI  R24,LOW(@0)
__DELAY_USB_LOOP:
	DEC  R24
	BRNE __DELAY_USB_LOOP
	.ENDM

	.MACRO __DELAY_USW
	LDI  R24,LOW(@0)
	LDI  R25,HIGH(@0)
__DELAY_USW_LOOP:
	SBIW R24,1
	BRNE __DELAY_USW_LOOP
	.ENDM

	.MACRO __GETD1S
	LDD  R30,Y+@0
	LDD  R31,Y+@0+1
	LDD  R22,Y+@0+2
	LDD  R23,Y+@0+3
	.ENDM

	.MACRO __GETD2S
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	LDD  R24,Y+@0+2
	LDD  R25,Y+@0+3
	.ENDM

	.MACRO __PUTD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R31
	STD  Y+@0+2,R22
	STD  Y+@0+3,R23
	.ENDM

	.MACRO __PUTD2S
	STD  Y+@0,R26
	STD  Y+@0+1,R27
	STD  Y+@0+2,R24
	STD  Y+@0+3,R25
	.ENDM

	.MACRO __PUTDZ2
	STD  Z+@0,R26
	STD  Z+@0+1,R27
	STD  Z+@0+2,R24
	STD  Z+@0+3,R25
	.ENDM

	.MACRO __CLRD1S
	STD  Y+@0,R30
	STD  Y+@0+1,R30
	STD  Y+@0+2,R30
	STD  Y+@0+3,R30
	.ENDM

	.MACRO __POINTB1MN
	LDI  R30,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW1MN
	LDI  R30,LOW(@0+(@1))
	LDI  R31,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTD1M
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __POINTW1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	LDI  R22,BYTE3(2*@0+(@1))
	LDI  R23,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTB2MN
	LDI  R26,LOW(@0+(@1))
	.ENDM

	.MACRO __POINTW2MN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	.ENDM

	.MACRO __POINTW2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	.ENDM

	.MACRO __POINTD2FN
	LDI  R26,LOW(2*@0+(@1))
	LDI  R27,HIGH(2*@0+(@1))
	LDI  R24,BYTE3(2*@0+(@1))
	LDI  R25,BYTE4(2*@0+(@1))
	.ENDM

	.MACRO __POINTBRM
	LDI  R@0,LOW(@1)
	.ENDM

	.MACRO __POINTWRM
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __POINTBRMN
	LDI  R@0,LOW(@1+(@2))
	.ENDM

	.MACRO __POINTWRMN
	LDI  R@0,LOW(@2+(@3))
	LDI  R@1,HIGH(@2+(@3))
	.ENDM

	.MACRO __POINTWRFN
	LDI  R@0,LOW(@2*2+(@3))
	LDI  R@1,HIGH(@2*2+(@3))
	.ENDM

	.MACRO __GETD1N
	LDI  R30,LOW(@0)
	LDI  R31,HIGH(@0)
	LDI  R22,BYTE3(@0)
	LDI  R23,BYTE4(@0)
	.ENDM

	.MACRO __GETD2N
	LDI  R26,LOW(@0)
	LDI  R27,HIGH(@0)
	LDI  R24,BYTE3(@0)
	LDI  R25,BYTE4(@0)
	.ENDM

	.MACRO __GETB1MN
	LDS  R30,@0+(@1)
	.ENDM

	.MACRO __GETB1HMN
	LDS  R31,@0+(@1)
	.ENDM

	.MACRO __GETW1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	.ENDM

	.MACRO __GETD1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	LDS  R22,@0+(@1)+2
	LDS  R23,@0+(@1)+3
	.ENDM

	.MACRO __GETBRMN
	LDS  R@0,@1+(@2)
	.ENDM

	.MACRO __GETWRMN
	LDS  R@0,@2+(@3)
	LDS  R@1,@2+(@3)+1
	.ENDM

	.MACRO __GETWRZ
	LDD  R@0,Z+@2
	LDD  R@1,Z+@2+1
	.ENDM

	.MACRO __GETD2Z
	LDD  R26,Z+@0
	LDD  R27,Z+@0+1
	LDD  R24,Z+@0+2
	LDD  R25,Z+@0+3
	.ENDM

	.MACRO __GETB2MN
	LDS  R26,@0+(@1)
	.ENDM

	.MACRO __GETW2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	.ENDM

	.MACRO __GETD2MN
	LDS  R26,@0+(@1)
	LDS  R27,@0+(@1)+1
	LDS  R24,@0+(@1)+2
	LDS  R25,@0+(@1)+3
	.ENDM

	.MACRO __PUTB1MN
	STS  @0+(@1),R30
	.ENDM

	.MACRO __PUTW1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	.ENDM

	.MACRO __PUTD1MN
	STS  @0+(@1),R30
	STS  @0+(@1)+1,R31
	STS  @0+(@1)+2,R22
	STS  @0+(@1)+3,R23
	.ENDM

	.MACRO __PUTB1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRB
	.ENDM

	.MACRO __PUTW1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRW
	.ENDM

	.MACRO __PUTD1EN
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMWRD
	.ENDM

	.MACRO __PUTBR0MN
	STS  @0+(@1),R0
	.ENDM

	.MACRO __PUTBMRN
	STS  @0+(@1),R@2
	.ENDM

	.MACRO __PUTWMRN
	STS  @0+(@1),R@2
	STS  @0+(@1)+1,R@3
	.ENDM

	.MACRO __PUTBZR
	STD  Z+@1,R@0
	.ENDM

	.MACRO __PUTWZR
	STD  Z+@2,R@0
	STD  Z+@2+1,R@1
	.ENDM

	.MACRO __GETW1R
	MOV  R30,R@0
	MOV  R31,R@1
	.ENDM

	.MACRO __GETW2R
	MOV  R26,R@0
	MOV  R27,R@1
	.ENDM

	.MACRO __GETWRN
	LDI  R@0,LOW(@2)
	LDI  R@1,HIGH(@2)
	.ENDM

	.MACRO __PUTW1R
	MOV  R@0,R30
	MOV  R@1,R31
	.ENDM

	.MACRO __PUTW2R
	MOV  R@0,R26
	MOV  R@1,R27
	.ENDM

	.MACRO __ADDWRN
	SUBI R@0,LOW(-@2)
	SBCI R@1,HIGH(-@2)
	.ENDM

	.MACRO __ADDWRR
	ADD  R@0,R@2
	ADC  R@1,R@3
	.ENDM

	.MACRO __SUBWRN
	SUBI R@0,LOW(@2)
	SBCI R@1,HIGH(@2)
	.ENDM

	.MACRO __SUBWRR
	SUB  R@0,R@2
	SBC  R@1,R@3
	.ENDM

	.MACRO __ANDWRN
	ANDI R@0,LOW(@2)
	ANDI R@1,HIGH(@2)
	.ENDM

	.MACRO __ANDWRR
	AND  R@0,R@2
	AND  R@1,R@3
	.ENDM

	.MACRO __ORWRN
	ORI  R@0,LOW(@2)
	ORI  R@1,HIGH(@2)
	.ENDM

	.MACRO __ORWRR
	OR   R@0,R@2
	OR   R@1,R@3
	.ENDM

	.MACRO __EORWRR
	EOR  R@0,R@2
	EOR  R@1,R@3
	.ENDM

	.MACRO __GETWRS
	LDD  R@0,Y+@2
	LDD  R@1,Y+@2+1
	.ENDM

	.MACRO __PUTBSR
	STD  Y+@1,R@0
	.ENDM

	.MACRO __PUTWSR
	STD  Y+@2,R@0
	STD  Y+@2+1,R@1
	.ENDM

	.MACRO __MOVEWRR
	MOV  R@0,R@2
	MOV  R@1,R@3
	.ENDM

	.MACRO __INWR
	IN   R@0,@2
	IN   R@1,@2+1
	.ENDM

	.MACRO __OUTWR
	OUT  @2+1,R@1
	OUT  @2,R@0
	.ENDM

	.MACRO __CALL1MN
	LDS  R30,@0+(@1)
	LDS  R31,@0+(@1)+1
	ICALL
	.ENDM

	.MACRO __CALL1FN
	LDI  R30,LOW(2*@0+(@1))
	LDI  R31,HIGH(2*@0+(@1))
	CALL __GETW1PF
	ICALL
	.ENDM

	.MACRO __CALL2EN
	PUSH R26
	PUSH R27
	LDI  R26,LOW(@0+(@1))
	LDI  R27,HIGH(@0+(@1))
	CALL __EEPROMRDW
	POP  R27
	POP  R26
	ICALL
	.ENDM

	.MACRO __CALL2EX
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	CALL __EEPROMRDD
	ICALL
	.ENDM

	.MACRO __GETW1STACK
	IN   R30,SPL
	IN   R31,SPH
	ADIW R30,@0+1
	LD   R0,Z+
	LD   R31,Z
	MOV  R30,R0
	.ENDM

	.MACRO __GETD1STACK
	IN   R30,SPL
	IN   R31,SPH
	ADIW R30,@0+1
	LD   R0,Z+
	LD   R1,Z+
	LD   R22,Z
	MOVW R30,R0
	.ENDM

	.MACRO __NBST
	BST  R@0,@1
	IN   R30,SREG
	LDI  R31,0x40
	EOR  R30,R31
	OUT  SREG,R30
	.ENDM


	.MACRO __PUTB1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SN
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNS
	LDD  R26,Y+@0
	LDD  R27,Y+@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMN
	LDS  R26,@0
	LDS  R27,@0+1
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1PMNS
	LDS  R26,@0
	LDS  R27,@0+1
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RN
	MOVW R26,R@0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RNS
	MOVW R26,R@0
	ADIW R26,@1
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RNS
	MOVW R26,R@0
	ADIW R26,@1
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RON
	MOV  R26,R@0
	MOV  R27,R@1
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	CALL __PUTDP1
	.ENDM

	.MACRO __PUTB1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X,R30
	.ENDM

	.MACRO __PUTW1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1RONS
	MOV  R26,R@0
	MOV  R27,R@1
	ADIW R26,@2
	CALL __PUTDP1
	.ENDM


	.MACRO __GETB1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R30,Z
	.ENDM

	.MACRO __GETB1HSX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	.ENDM

	.MACRO __GETW1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R0,Z+
	LD   R31,Z
	MOV  R30,R0
	.ENDM

	.MACRO __GETD1SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R0,Z+
	LD   R1,Z+
	LD   R22,Z+
	LD   R23,Z
	MOVW R30,R0
	.ENDM

	.MACRO __GETB2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R26,X
	.ENDM

	.MACRO __GETW2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	.ENDM

	.MACRO __GETD2SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R1,X+
	LD   R24,X+
	LD   R25,X
	MOVW R26,R0
	.ENDM

	.MACRO __GETBRSX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	LD   R@0,Z
	.ENDM

	.MACRO __GETWRSX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	LD   R@0,Z+
	LD   R@1,Z
	.ENDM

	.MACRO __GETBRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	LD   R@0,X
	.ENDM

	.MACRO __GETWRSX2
	MOVW R26,R28
	SUBI R26,LOW(-@2)
	SBCI R27,HIGH(-@2)
	LD   R@0,X+
	LD   R@1,X
	.ENDM

	.MACRO __LSLW8SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	LD   R31,Z
	CLR  R30
	.ENDM

	.MACRO __PUTB1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __CLRW1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __CLRD1SX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	ST   X+,R30
	ST   X+,R30
	ST   X+,R30
	ST   X,R30
	.ENDM

	.MACRO __PUTB2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z,R26
	.ENDM

	.MACRO __PUTW2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z,R27
	.ENDM

	.MACRO __PUTD2SX
	MOVW R30,R28
	SUBI R30,LOW(-@0)
	SBCI R31,HIGH(-@0)
	ST   Z+,R26
	ST   Z+,R27
	ST   Z+,R24
	ST   Z,R25
	.ENDM

	.MACRO __PUTBSRX
	MOVW R30,R28
	SUBI R30,LOW(-@1)
	SBCI R31,HIGH(-@1)
	ST   Z,R@0
	.ENDM

	.MACRO __PUTWSRX
	MOVW R30,R28
	SUBI R30,LOW(-@2)
	SBCI R31,HIGH(-@2)
	ST   Z+,R@0
	ST   Z,R@1
	.ENDM

	.MACRO __PUTB1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X,R30
	.ENDM

	.MACRO __PUTW1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X,R31
	.ENDM

	.MACRO __PUTD1SNX
	MOVW R26,R28
	SUBI R26,LOW(-@0)
	SBCI R27,HIGH(-@0)
	LD   R0,X+
	LD   R27,X
	MOV  R26,R0
	SUBI R26,LOW(-@1)
	SBCI R27,HIGH(-@1)
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	.ENDM

	.MACRO __MULBRR
	MULS R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRRU
	MUL  R@0,R@1
	MOVW R30,R0
	.ENDM

	.MACRO __MULBRR0
	MULS R@0,R@1
	.ENDM

	.MACRO __MULBRRU0
	MUL  R@0,R@1
	.ENDM

	.MACRO __MULBNWRU
	LDI  R26,@2
	MUL  R26,R@0
	MOVW R30,R0
	MUL  R26,R@1
	ADD  R31,R0
	.ENDM

;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
	.DEF _font_color=R4
	.DEF _font_color_msb=R5
	.DEF _x_font=R6
	.DEF _x_font_msb=R7
	.DEF _y_font=R8
	.DEF _y_font_msb=R9
	.DEF _highlight=R11
	.DEF _fa_num=R10
	.DEF _effect=R13
	.DEF _italic=R12

	.CSEG
	.ORG 0x00

;START OF CODE MARKER
__START_OF_CODE:

;INTERRUPT VECTORS
	JMP  __RESET
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00
	JMP  0x00

_font12x16:
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x4,0x60
	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x4,0x60
	.DB  0x4,0x60,0x4,0x60,0x3,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x1,0x50,0x6,0x50,0x8,0x50,0x1,0x50
	.DB  0x6,0x50,0x8,0x50,0xC,0x50,0x2,0x50
	.DB  0x1,0x50,0x1,0x50,0x1E,0x50,0x0,0x50
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x1,0x60,0xE,0x60,0x10,0x60,0x4,0x60
	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x4,0x60
	.DB  0x4,0x60,0x4,0x60,0x3,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x5,0x40,0x0,0x40,0x2,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x2,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x5,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x2,0x40,0x0,0x40
	.DB  0x5,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x18,0x80
	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
	.DB  0x0,0x80,0x8,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
	.DB  0x34,0x90,0x42,0x90,0x81,0x90,0x88,0x90
	.DB  0x80,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x18,0x80
	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
	.DB  0x34,0x90,0x42,0x90,0x81,0x90,0x80,0x90
	.DB  0x80,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x10,0x80,0x0,0x80,0x0,0x80,0x18,0x80
	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x20,0x90
	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
	.DB  0x34,0x90,0x42,0x90,0x81,0x90,0x80,0x90
	.DB  0x80,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x10,0x90,0x8,0x90,0x14,0x90,0x46,0x90
	.DB  0x49,0x90,0x19,0x90,0xF6,0x91,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x8,0x90
	.DB  0x0,0x90,0x14,0x90,0x0,0x90,0x0,0x90
	.DB  0x49,0x90,0x49,0x90,0xB6,0x91,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0xE,0xB0
	.DB  0x11,0xB1,0x21,0xB1,0xFE,0xB6,0x0,0xB0
	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
	.DB  0x0,0x40,0x0,0x30,0x0,0x30,0x0,0x30
	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x2,0x30
	.DB  0x7,0x30,0x2,0x30,0x0,0x30,0x0,0x30
	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
	.DB  0x0,0x30,0x0,0x20,0x0,0x20,0x0,0x20
	.DB  0x2,0x20,0x2,0x20,0x1,0x20,0x1,0x20
	.DB  0x1,0x20,0x1,0x20,0x1,0x20,0x1,0x20
	.DB  0x1,0x20,0x0,0x20,0x0,0x20,0x0,0x20
	.DB  0x0,0x60,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x11,0x50,0x19,0x50,0xE,0x50,0x8,0x50
	.DB  0x4,0x50,0x4,0x50,0x4,0x50,0x4,0x50
	.DB  0x4,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x25,0x60,0x35,0x60,0x1A,0x60,0x10,0x60
	.DB  0x8,0x60,0x8,0x60,0x8,0x60,0x8,0x60
	.DB  0x8,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x26,0x70,0x78,0x70,0x39,0x70,0x36,0x70
	.DB  0x10,0x70,0x10,0x70,0x10,0x70,0x10,0x70
	.DB  0x10,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x10,0x70,0x8,0x70,0x14,0x70,0x22,0x70
	.DB  0x22,0x70,0x41,0x70,0x49,0x70,0x49,0x70
	.DB  0x36,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0xC,0x60,0x10,0x60,0x20,0x60,0x21,0x60
	.DB  0x1E,0x60,0x4,0x60,0x8,0x60,0x10,0x60
	.DB  0x20,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x41,0x70,0x41,0x70,0x22,0x70,0x22,0x70
	.DB  0x14,0x70,0x14,0x70,0x8,0x70,0x8,0x70
	.DB  0x8,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x80,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x8,0x70,0x8,0x70,0x8,0x70,0x14,0x70
	.DB  0x14,0x70,0x22,0x70,0x22,0x70,0x41,0x70
	.DB  0x41,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x60,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0xC,0x50,0x12,0x50,0x12,0x50,0xE,0x50
	.DB  0x2,0x50,0x2,0x50,0x2,0x50,0x1,0x50
	.DB  0x1,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
	.DB  0x10,0xB0,0x0,0xB0,0x0,0xB0,0xE,0xB0
	.DB  0x11,0xB1,0x21,0xB1,0xFE,0xB6,0x0,0xB0
	.DB  0x0,0xB0,0x0,0xB0,0x0,0xB0,0x0,0xB0
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0xC,0x60,0x12,0x60
	.DB  0x10,0x60,0x9,0x60,0x3E,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x3,0x40
	.DB  0x3,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x1,0x40,0x2,0x40
	.DB  0x3,0x40,0x3,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x3,0x40,0x3,0x40
	.DB  0x1,0x40,0x2,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x1,0x40,0x2,0x40,0x3,0x40,0x3,0x40
	.DB  0x0,0x40,0x0,0x40,0x3,0x40,0x3,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x3C,0x80
	.DB  0x3C,0x80,0x3C,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x0,0x80,0x18,0x80,0x18,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x22,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x36,0x80
	.DB  0x36,0x80,0x7F,0x80,0x36,0x80,0x36,0x80
	.DB  0x36,0x80,0x7F,0x80,0x36,0x80,0x36,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0xC,0x80,0xC,0x80,0x3E,0x80,0x63,0x80
	.DB  0x61,0x80,0x60,0x80,0x3E,0x80,0x3,0x80
	.DB  0x3,0x80,0x43,0x80,0x63,0x80,0x3E,0x80
	.DB  0xC,0x80,0xC,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x61,0x80,0x63,0x80,0x6,0x80
	.DB  0xC,0x80,0x18,0x80,0x33,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x1C,0x80
	.DB  0x36,0x80,0x36,0x80,0x1C,0x80,0x3B,0x80
	.DB  0x6E,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x30,0x80,0x30,0x80,0x30,0x80
	.DB  0x60,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xC,0x80,0x18,0x80
	.DB  0x18,0x80,0x30,0x80,0x30,0x80,0x30,0x80
	.DB  0x30,0x80,0x18,0x80,0x18,0x80,0xC,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0xC,0x80
	.DB  0xC,0x80,0x6,0x80,0x6,0x80,0x6,0x80
	.DB  0x6,0x80,0xC,0x80,0xC,0x80,0x18,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x42,0x80,0x66,0x80,0x3C,0x80,0xFF,0x80
	.DB  0x3C,0x80,0x66,0x80,0x42,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0xFF,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x30,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0xFF,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1,0x80,0x3,0x80
	.DB  0x7,0x80,0xE,0x80,0x1C,0x80,0x38,0x80
	.DB  0x70,0x80,0xE0,0x80,0xC0,0x80,0x80,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x6B,0x80,0x6B,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xC,0x80,0x1C,0x80
	.DB  0x3C,0x80,0xC,0x80,0xC,0x80,0xC,0x80
	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x3F,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x3,0x80,0x6,0x80,0xC,0x80,0x18,0x80
	.DB  0x30,0x80,0x61,0x80,0x63,0x80,0x7F,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x3,0x80,0x3,0x80,0x1E,0x80,0x3,0x80
	.DB  0x3,0x80,0x3,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x6,0x80,0xE,0x80
	.DB  0x1E,0x80,0x36,0x80,0x66,0x80,0x66,0x80
	.DB  0x7F,0x80,0x6,0x80,0x6,0x80,0xF,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x60,0x80
	.DB  0x60,0x80,0x60,0x80,0x7E,0x80,0x3,0x80
	.DB  0x3,0x80,0x63,0x80,0x73,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0x30,0x80
	.DB  0x60,0x80,0x60,0x80,0x7E,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x63,0x80
	.DB  0x3,0x80,0x6,0x80,0x6,0x80,0xC,0x80
	.DB  0xC,0x80,0x18,0x80,0x18,0x80,0x18,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3F,0x80
	.DB  0x3,0x80,0x3,0x80,0x6,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x18,0x80,0x18,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x18,0x80,0x18,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x30,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x6,0x80
	.DB  0xC,0x80,0x18,0x80,0x30,0x80,0x60,0x80
	.DB  0x30,0x80,0x18,0x80,0xC,0x80,0x6,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x0,0x80
	.DB  0x0,0x80,0x7E,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x60,0x80
	.DB  0x30,0x80,0x18,0x80,0xC,0x80,0x6,0x80
	.DB  0xC,0x80,0x18,0x80,0x30,0x80,0x60,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x6,0x80,0xC,0x80,0xC,0x80
	.DB  0xC,0x80,0x0,0x80,0xC,0x80,0xC,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x6F,0x80,0x6B,0x80,0x6B,0x80
	.DB  0x6E,0x80,0x60,0x80,0x60,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x8,0x80,0x1C,0x80
	.DB  0x36,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x7F,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x7E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1E,0x80,0x33,0x80
	.DB  0x61,0x80,0x60,0x80,0x60,0x80,0x60,0x80
	.DB  0x60,0x80,0x61,0x80,0x33,0x80,0x1E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7C,0x80,0x36,0x80
	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x36,0x80,0x7C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x33,0x80
	.DB  0x31,0x80,0x34,0x80,0x3C,0x80,0x34,0x80
	.DB  0x30,0x80,0x31,0x80,0x33,0x80,0x7F,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x33,0x80
	.DB  0x31,0x80,0x34,0x80,0x3C,0x80,0x34,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1E,0x80,0x33,0x80
	.DB  0x61,0x80,0x60,0x80,0x60,0x80,0x6F,0x80
	.DB  0x63,0x80,0x63,0x80,0x37,0x80,0x1D,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x7F,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3C,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xF,0x80,0x6,0x80
	.DB  0x6,0x80,0x6,0x80,0x6,0x80,0x6,0x80
	.DB  0x6,0x80,0x66,0x80,0x66,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x73,0x80,0x33,0x80
	.DB  0x36,0x80,0x36,0x80,0x3C,0x80,0x36,0x80
	.DB  0x36,0x80,0x33,0x80,0x33,0x80,0x73,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x78,0x80,0x30,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x30,0x80
	.DB  0x30,0x80,0x31,0x80,0x33,0x80,0x7F,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x77,0x80
	.DB  0x7F,0x80,0x6B,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
	.DB  0x73,0x80,0x7B,0x80,0x7F,0x80,0x6F,0x80
	.DB  0x67,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0x36,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x36,0x80,0x1C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x30,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x6B,0x80,0x6F,0x80,0x3E,0x80
	.DB  0x6,0x80,0x7,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7E,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x36,0x80
	.DB  0x36,0x80,0x33,0x80,0x33,0x80,0x73,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3E,0x80,0x63,0x80
	.DB  0x63,0x80,0x30,0x80,0x1C,0x80,0x6,0x80
	.DB  0x3,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xFF,0x80,0xDB,0x80
	.DB  0x99,0x80,0x18,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x36,0x80,0x1C,0x80,0x8,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x6B,0x80
	.DB  0x6B,0x80,0x7F,0x80,0x36,0x80,0x36,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xC3,0x80,0xC3,0x80
	.DB  0x66,0x80,0x3C,0x80,0x18,0x80,0x18,0x80
	.DB  0x3C,0x80,0x66,0x80,0xC3,0x80,0xC3,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xC3,0x80,0xC3,0x80
	.DB  0xC3,0x80,0x66,0x80,0x3C,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x7F,0x80,0x63,0x80
	.DB  0x43,0x80,0x6,0x80,0xC,0x80,0x18,0x80
	.DB  0x30,0x80,0x61,0x80,0x63,0x80,0x7F,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3C,0x80,0x30,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x30,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x80,0x80,0xC0,0x80
	.DB  0xE0,0x80,0x70,0x80,0x38,0x80,0x1C,0x80
	.DB  0xE,0x80,0x7,0x80,0x3,0x80,0x1,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3C,0x80,0xC,0x80
	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0xC,0x80
	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x3C,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x8,0x80,0x1C,0x80,0x36,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0xFF,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x18,0x80,0x18,0x80,0xC,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3C,0x80,0x46,0x80,0x6,0x80
	.DB  0x3E,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x30,0x80
	.DB  0x30,0x80,0x3C,0x80,0x36,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x6E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x60,0x80
	.DB  0x60,0x80,0x60,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xE,0x80,0x6,0x80
	.DB  0x6,0x80,0x1E,0x80,0x36,0x80,0x66,0x80
	.DB  0x66,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x63,0x80
	.DB  0x7E,0x80,0x60,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0x36,0x80
	.DB  0x32,0x80,0x30,0x80,0x7C,0x80,0x30,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3B,0x80,0x66,0x80,0x66,0x80
	.DB  0x66,0x80,0x66,0x80,0x3E,0x80,0x6,0x80
	.DB  0x66,0x80,0x3C,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x30,0x80
	.DB  0x30,0x80,0x36,0x80,0x3B,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x73,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xC,0x80,0xC,0x80
	.DB  0x0,0x80,0x1C,0x80,0xC,0x80,0xC,0x80
	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x1E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x6,0x80,0x6,0x80
	.DB  0x0,0x80,0xE,0x80,0x6,0x80,0x6,0x80
	.DB  0x6,0x80,0x6,0x80,0x6,0x80,0x66,0x80
	.DB  0x66,0x80,0x3C,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x30,0x80
	.DB  0x30,0x80,0x33,0x80,0x33,0x80,0x36,0x80
	.DB  0x3C,0x80,0x36,0x80,0x33,0x80,0x73,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x1C,0x80,0xC,0x80
	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0xC,0x80
	.DB  0xC,0x80,0xC,0x80,0xC,0x80,0x1E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x6E,0x80,0x7F,0x80,0x6B,0x80
	.DB  0x6B,0x80,0x6B,0x80,0x6B,0x80,0x6B,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x6E,0x80,0x33,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x33,0x80,0x33,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x6E,0x80,0x33,0x80,0x33,0x80
	.DB  0x33,0x80,0x33,0x80,0x3E,0x80,0x30,0x80
	.DB  0x30,0x80,0x78,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3B,0x80,0x66,0x80,0x66,0x80
	.DB  0x66,0x80,0x66,0x80,0x3E,0x80,0x6,0x80
	.DB  0x6,0x80,0xF,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x6E,0x80,0x3B,0x80,0x33,0x80
	.DB  0x30,0x80,0x30,0x80,0x30,0x80,0x78,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x3E,0x80,0x63,0x80,0x38,0x80
	.DB  0xE,0x80,0x3,0x80,0x63,0x80,0x3E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x8,0x80,0x18,0x80
	.DB  0x18,0x80,0x7E,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x1B,0x80,0xE,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x66,0x80,0x66,0x80,0x66,0x80
	.DB  0x66,0x80,0x66,0x80,0x66,0x80,0x3B,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x36,0x80
	.DB  0x36,0x80,0x1C,0x80,0x1C,0x80,0x8,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x6B,0x80,0x6B,0x80,0x7F,0x80,0x36,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x63,0x80,0x36,0x80,0x1C,0x80
	.DB  0x1C,0x80,0x1C,0x80,0x36,0x80,0x63,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x63,0x80,0x63,0x80,0x63,0x80
	.DB  0x63,0x80,0x63,0x80,0x3F,0x80,0x3,0x80
	.DB  0x6,0x80,0x3C,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x7F,0x80,0x66,0x80,0xC,0x80
	.DB  0x18,0x80,0x30,0x80,0x63,0x80,0x7F,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0xE,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x70,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0xE,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x0,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x18,0x80
	.DB  0x18,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0xE,0x80,0x18,0x80
	.DB  0x18,0x80,0x18,0x80,0x18,0x80,0x70,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x3B,0x80,0x6E,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x8,0x70
	.DB  0x0,0x70,0x0,0x70,0xE,0x70,0x12,0x70
	.DB  0xC,0x70,0x12,0x70,0x21,0x70,0x20,0x70
	.DB  0x20,0x70,0x10,0x70,0xF,0x70,0x0,0x70
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x4,0x50
	.DB  0x0,0x50,0x0,0x50,0x6,0x50,0x9,0x50
	.DB  0x5,0x50,0x3,0x50,0x1E,0x50,0x0,0x50
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x40,0x80
	.DB  0x81,0x80,0x7E,0x80,0x28,0x80,0x10,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x6,0x70
	.DB  0x9,0x70,0x19,0x70,0x66,0x70,0x0,0x70
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0xA,0x50
	.DB  0x0,0x50,0x0,0x50,0x6,0x50,0x9,0x50
	.DB  0x5,0x50,0x3,0x50,0x1E,0x50,0x0,0x50
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x2,0x60,0x0,0x60,0x0,0x60,0x7,0x60
	.DB  0x9,0x60,0x6,0x60,0x3F,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x8,0x60
	.DB  0x0,0x60,0x0,0x60,0xC,0x60,0x12,0x60
	.DB  0x10,0x60,0x9,0x60,0x3E,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x1,0x40
	.DB  0x1,0x40,0x1,0x40,0x1,0x40,0x1,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x2,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x7,0x60
	.DB  0x9,0x60,0x6,0x60,0x3F,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x70,0x0,0x70,0xE,0x70,0x12,0x70
	.DB  0xC,0x70,0x12,0x70,0x21,0x70,0x20,0x70
	.DB  0x20,0x70,0x10,0x70,0xF,0x70,0x0,0x70
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x49,0x90,0x49,0x90,0xB6,0x91,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x8,0x80,0x8,0x80,0x34,0x80
	.DB  0x44,0x80,0x3A,0x80,0x1,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x1,0x50
	.DB  0x6,0x50,0x8,0x50,0xC,0x50,0x2,0x50
	.DB  0x1,0x50,0x1,0x50,0x1E,0x50,0x0,0x50
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
	.DB  0x30,0x80,0x40,0x80,0x94,0x80,0x80,0x80
	.DB  0x88,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x2,0x60
	.DB  0x0,0x60,0x5,0x60,0x0,0x60,0x0,0x60
	.DB  0x1,0x60,0x1,0x60,0x1,0x60,0x2,0x60
	.DB  0xC,0x60,0x30,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x5,0x40,0x0,0x40,0x0,0x40
	.DB  0x1,0x90,0x6,0x90,0x8,0x90,0x1,0x90
	.DB  0x6,0x90,0x8,0x90,0xC,0x90,0x42,0x90
	.DB  0x81,0x90,0x81,0x90,0x7E,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x4,0x80,0xA,0x80
	.DB  0x12,0x80,0x14,0x80,0xF9,0x80,0x12,0x80
	.DB  0xC,0x80,0x6,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x47,0x80,0x88,0x80
	.DB  0x87,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x18,0x80
	.DB  0x24,0x80,0x2,0x80,0xFF,0x80,0x0,0x80
	.DB  0x28,0x80,0x0,0x80,0x10,0x80,0x0,0x80
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x70,0x90,0x8F,0x90
	.DB  0x34,0x90,0x42,0x90,0x95,0x90,0x80,0x90
	.DB  0x88,0x90,0x41,0x90,0x3E,0x90,0x0,0x90
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x42,0x80
	.DB  0x22,0x80,0x12,0x80,0xA,0x80,0x6,0x80
	.DB  0x6,0x80,0xA,0x80,0x31,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x40,0x3,0x40,0x4,0x40,0x3,0x40
	.DB  0x4,0x40,0x0,0x40,0x0,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x21,0x70
	.DB  0x11,0x70,0x9,0x70,0x5,0x70,0x3,0x70
	.DB  0x2,0x70,0x5,0x70,0x9,0x70,0xF,0x70
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x6,0x40
	.DB  0x8,0x40,0x7,0x40,0xC,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x1,0x60,0xE,0x60,0x10,0x60,0x4,0x60
	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x4,0x60
	.DB  0x4,0x60,0x4,0x60,0x4,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x30,0x0,0x10,0x0,0x10,0x1,0x10
	.DB  0x1,0x10,0x1,0x10,0x1,0x10,0x1,0x10
	.DB  0x1,0x10,0x1,0x10,0x1,0x10,0x0,0x10
	.DB  0x0,0x10,0x0,0x10,0x0,0x10,0x0,0x10
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x40,0x80
	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
	.DB  0x0,0x80,0x10,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x14,0x80,0x0,0x80,0x40,0x80
	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x8,0x80
	.DB  0x0,0x80,0x14,0x80,0x0,0x80,0x40,0x80
	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
	.DB  0x30,0x80,0x40,0x80,0x80,0x80,0x88,0x80
	.DB  0x80,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
	.DB  0x30,0x80,0x40,0x80,0x80,0x80,0x80,0x80
	.DB  0x80,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x20,0x80
	.DB  0x0,0x80,0x0,0x80,0x70,0x80,0x8F,0x80
	.DB  0x30,0x80,0x40,0x80,0x80,0x80,0x80,0x80
	.DB  0x80,0x80,0x41,0x80,0x3E,0x80,0x0,0x80
	.DB  0x0,0x50,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x4,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x50,0x0,0x40,0x0,0x40,0x4,0x40
	.DB  0x0,0x40,0x0,0x40,0x4,0x40,0x2,0x40
	.DB  0x1,0x40,0x1,0x40,0xE,0x40,0x0,0x40
	.DB  0x0,0x40,0x0,0x40,0x0,0x40,0x0,0x40
	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x1,0x60,0x1,0x60,0x1,0x60,0x2,0x60
	.DB  0xC,0x60,0x30,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x2,0x60,0x0,0x60,0x0,0x60
	.DB  0x1,0x60,0x1,0x60,0x1,0x60,0x2,0x60
	.DB  0xC,0x60,0x30,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
	.DB  0x49,0xC0,0x49,0xC4,0x36,0xC8,0x20,0xC8
	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x8,0xC0
	.DB  0x0,0xC0,0x14,0xC0,0x0,0xC0,0x0,0xC0
	.DB  0x49,0xC0,0x49,0xC4,0x36,0xC8,0x20,0xC8
	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x6,0xC0
	.DB  0x49,0xC0,0x51,0xC4,0x3E,0xC8,0x20,0xC8
	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
	.DB  0x0,0xC0,0x0,0xC0,0x0,0xC0,0x0,0xC0
	.DB  0x10,0xC0,0x0,0xC0,0x0,0xC0,0x6,0xC0
	.DB  0x49,0xC0,0x51,0xC4,0x3E,0xC8,0x20,0xC8
	.DB  0x20,0xC8,0x40,0xC4,0x80,0xC3,0x0,0xC0
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x20,0x80
	.DB  0x20,0x80,0x20,0x80,0x20,0x80,0x26,0x80
	.DB  0x29,0x80,0x31,0x80,0xFE,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x20,0x80
	.DB  0x24,0x80,0x20,0x80,0x20,0x80,0x26,0x80
	.DB  0x29,0x80,0x31,0x80,0xFE,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x70,0x30,0x70,0x40,0x70,0x44,0x70
	.DB  0x38,0x70,0x20,0x70,0x40,0x70,0x40,0x70
	.DB  0x40,0x70,0x21,0x70,0x1E,0x70,0x0,0x70
	.DB  0x0,0x70,0x0,0x70,0x20,0x70,0x0,0x70
	.DB  0x0,0x70,0x30,0x70,0x40,0x70,0x44,0x70
	.DB  0x38,0x70,0x20,0x70,0x40,0x70,0x40,0x70
	.DB  0x40,0x70,0x21,0x70,0x1E,0x70,0x0,0x70
	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
	.DB  0x0,0x30,0x0,0x30,0x7,0x30,0x0,0x30
	.DB  0x0,0x30,0x0,0x30,0x0,0x30,0x0,0x30
	.DB  0x0,0xA0,0x0,0xA0,0x0,0xA0,0x4,0xA0
	.DB  0x0,0xA0,0x0,0xA0,0x6,0xA0,0x9,0xA1
	.DB  0x5,0xA2,0x3,0xA2,0xFE,0xA1,0x0,0xA0
	.DB  0x0,0xA0,0x0,0xA0,0x0,0xA0,0x0,0xA0
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0xA,0x80,0x0,0x80,0x0,0x80,0x6,0x80
	.DB  0x9,0x80,0x49,0x80,0x87,0x80,0x81,0x80
	.DB  0x81,0x80,0x42,0x80,0x3C,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x1,0x80
	.DB  0x6,0x80,0x8,0x80,0xC,0x80,0x42,0x80
	.DB  0x81,0x80,0x81,0x80,0x7E,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x70,0x0,0x70,0x0,0x70,0x1,0x70
	.DB  0x1,0x70,0x1,0x70,0x1,0x70,0x1,0x70
	.DB  0x21,0x70,0x41,0x70,0x41,0x70,0x42,0x70
	.DB  0x3C,0x70,0x0,0x70,0x0,0x70,0x0,0x70
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x6,0x60
	.DB  0x9,0x60,0x9,0x60,0x1E,0x60,0x20,0x60
	.DB  0x20,0x60,0x20,0x60,0x20,0x60,0x20,0x60
	.DB  0x0,0x80,0x0,0x80,0x0,0x80,0x0,0x80
	.DB  0x0,0x80,0x0,0x80,0x10,0x80,0x0,0x80
	.DB  0x2,0x80,0x41,0x80,0x81,0x80,0x81,0x80
	.DB  0x81,0x80,0x42,0x80,0x3C,0x80,0x0,0x80
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0x50,0x0,0x50,0xC,0x50,0x12,0x50
	.DB  0x11,0x50,0x11,0x50,0xE,0x50,0x0,0x50
	.DB  0x0,0x50,0x0,0x50,0x0,0x50,0x0,0x50
	.DB  0x0,0x70,0x0,0x60,0x0,0x60,0x0,0x60
	.DB  0x0,0x60,0x0,0x60,0x0,0x60,0x6,0x60
	.DB  0x9,0x60,0x9,0x60,0x7,0x60,0x1,0x60
	.DB  0x2,0x60,0xC,0x60,0x30,0x60,0x0,0x60
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x0,0x90
	.DB  0x0,0x90,0x0,0x90,0x0,0x90,0x3,0x90
	.DB  0x84,0x90,0x8,0x91,0xE,0x91,0x2,0x91
	.DB  0x4,0x91,0xF8,0x90,0x0,0x90,0x0,0x90
_FAmap:
	.DB  0xB0,0x8C,0xB0,0x8C,0x1,0x1,0x81,0x3
	.DB  0x81,0x3,0x1,0x1,0x8D,0x93,0x94,0x93
	.DB  0x1,0x1,0x8E,0x8E,0x8E,0x8E,0x1,0x0
	.DB  0x90,0x1,0x90,0x1,0x1,0x1,0x98,0x96
	.DB  0x98,0x96,0x0,0x1,0x99,0x99,0x2,0x2
	.DB  0x1,0x0,0xC3,0xC3,0x1,0x1,0x1,0x0
	.DB  0xC4,0xC4,0xC4,0xC4,0x0,0x0,0xC5,0xC5
	.DB  0x3,0x3,0x1,0x0,0xC6,0xC6,0xC6,0xC6
	.DB  0x0,0x0,0x9A,0x9A,0x0,0x0,0x1,0x0
	.DB  0x9B,0x4,0x9B,0x4,0x1,0x1,0xC9,0xFE
	.DB  0xE9,0x95,0x1,0x1,0x9C,0x5,0x9C,0x5
	.DB  0x1,0x1,0x9D,0x6,0x9D,0x6,0x1,0x1
	.DB  0x9E,0x7,0x8,0x7,0x1,0x1,0x9F,0x9
	.DB  0xA,0x9,0x1,0x1,0xA0,0xB,0xC,0xB
	.DB  0x1,0x1,0xA1,0xA1,0xA1,0xA1,0x1,0x0
	.DB  0xA2,0xA2,0xA2,0xA2,0x1,0x0,0xA3,0xA3
	.DB  0xA3,0xA3,0x1,0x0,0xA4,0xA4,0xA4,0xA4
	.DB  0x1,0x0,0xA5,0x8A,0xA5,0x8A,0x1,0x1
	.DB  0xA6,0xE,0xA6,0xE,0x1,0x1,0xA7,0xF
	.DB  0xA7,0xF,0x1,0x1,0xA8,0x1A,0xA8,0x1A
	.DB  0x1,0x1,0xD7,0xD7,0xD7,0xD7,0x0,0x0
	.DB  0xA9,0xA9,0xA9,0xA9,0x1,0x1,0xAA,0xAA
	.DB  0xAA,0xAA,0x1,0x1,0xAB,0x1B,0x89,0x88
	.DB  0x1,0x1,0xAC,0x85,0x7F,0x84,0x1,0x1
	.DB  0xAD,0xAD,0xAD,0xAD,0x1,0x1,0xAE,0x80
	.DB  0xAE,0x80,0x1,0x1,0xAF,0x83,0xAF,0x83
	.DB  0x1,0x1,0xB0,0x8C,0xB0,0x8C,0x1,0x1
	.DB  0xE0,0xE0,0xE0,0xE0,0x0,0x0,0xB1,0x86
	.DB  0xB1,0x86,0x1,0x1,0xE2,0xE2,0xE2,0xE2
	.DB  0x0,0x0,0xB2,0x82,0xB2,0x82,0x1,0x1
	.DB  0xB3,0x87,0xB3,0x87,0x1,0x1,0xB4,0xD
	.DB  0x8B,0x91,0x1,0x1,0xB5,0xB5,0xB5,0xB5
	.DB  0x1,0x0,0xE7,0xE7,0xE7,0xE7,0x0,0x0
	.DB  0xE8,0xE8,0xE8,0xE8,0x0,0x0,0xE9,0xE9
	.DB  0xE9,0xE9,0x0,0x0,0xFE,0xFE,0xFE,0xFE
	.DB  0x0,0x0,0xFF,0xFF,0xFF,0xFF,0x0,0x0
	.DB  0xEC,0xC0,0xA0,0xC0,0x1,0x1,0xB6,0x8F
	.DB  0x92,0x8F,0x1,0x1
_tbl10_G100:
	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
	.DB  0x1,0x0
_tbl16_G100:
	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0

;GLOBAL REGISTER VARIABLES INITIALIZATION
__REG_VARS:
	.DB  0x0,0x0

_0x7B:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_0x147:
	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
	.DB  0x0,0x0,0x0,0x0
_0x28E:
	.DB  0xFF
_0x0:
	.DB  0x44,0x65,0x73,0x69,0x67,0x6E,0x65,0x64
	.DB  0x20,0x62,0x79,0x3A,0x0,0x20,0x20,0x20
	.DB  0x20,0x4D,0x6F,0x68,0x61,0x6D,0x6D,0x61
	.DB  0x64,0x20,0x44,0x65,0x68,0x67,0x68,0x61
	.DB  0x6E,0x69,0x20,0x20,0x20,0x0,0x52,0x65
	.DB  0x61,0x64,0x20,0x53,0x44,0x20,0x63,0x61
	.DB  0x72,0x64,0x0,0x49,0x6E,0x69,0x74,0x20
	.DB  0x44,0x72,0x69,0x76,0x65,0x0,0x20,0x20
	.DB  0x20,0x2D,0x2D,0x2D,0x3E,0x4F,0x4B,0x0
	.DB  0x4F,0x50,0x45,0x4E,0x20,0x44,0x52,0x49
	.DB  0x56,0x45,0x0,0x31,0x2E,0x62,0x6D,0x70
	.DB  0x0,0x32,0x2E,0x62,0x6D,0x70,0x0,0x31
	.DB  0x39,0x2E,0x62,0x6D,0x70,0x0,0x32,0x30
	.DB  0x2E,0x62,0x6D,0x70,0x0,0x32,0x31,0x2E
	.DB  0x62,0x6D,0x70,0x0,0x32,0x32,0x2E,0x62
	.DB  0x6D,0x70,0x0
_0x2080060:
	.DB  0x1
_0x2080000:
	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
	.DB  0x0

__GLOBAL_INI_TBL:
	.DW  0x02
	.DW  0x0C
	.DW  __REG_VARS*2

	.DW  0x01
	.DW  _count
	.DW  _0x28E*2

	.DW  0x06
	.DW  _0x2A8
	.DW  _0x0*2+83

	.DW  0x06
	.DW  _0x2A8+6
	.DW  _0x0*2+89

	.DW  0x07
	.DW  _0x2A8+12
	.DW  _0x0*2+95

	.DW  0x07
	.DW  _0x2A8+19
	.DW  _0x0*2+102

	.DW  0x07
	.DW  _0x2A8+26
	.DW  _0x0*2+109

	.DW  0x07
	.DW  _0x2A8+33
	.DW  _0x0*2+116

	.DW  0x01
	.DW  __seed_G104
	.DW  _0x2080060*2

_0xFFFFFFFF:
	.DW  0

#define __GLOBAL_INI_TBL_PRESENT 1

__RESET:
	CLI
	CLR  R30
	OUT  EECR,R30

;INTERRUPT VECTORS ARE PLACED
;AT THE START OF FLASH
	LDI  R31,1
	OUT  MCUCR,R31
	OUT  MCUCR,R30

;DISABLE WATCHDOG
	LDI  R31,0x18
	OUT  WDTCR,R31
	OUT  WDTCR,R30

;CLEAR R2-R14
	LDI  R24,(14-2)+1
	LDI  R26,2
	CLR  R27
__CLEAR_REG:
	ST   X+,R30
	DEC  R24
	BRNE __CLEAR_REG

;CLEAR SRAM
	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
	LDI  R26,__SRAM_START
__CLEAR_SRAM:
	ST   X+,R30
	SBIW R24,1
	BRNE __CLEAR_SRAM

;GLOBAL VARIABLES INITIALIZATION
	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
__GLOBAL_INI_NEXT:
	LPM  R24,Z+
	LPM  R25,Z+
	SBIW R24,0
	BREQ __GLOBAL_INI_END
	LPM  R26,Z+
	LPM  R27,Z+
	LPM  R0,Z+
	LPM  R1,Z+
	MOVW R22,R30
	MOVW R30,R0
__GLOBAL_INI_LOOP:
	LPM  R0,Z+
	ST   X+,R0
	SBIW R24,1
	BRNE __GLOBAL_INI_LOOP
	MOVW R30,R22
	RJMP __GLOBAL_INI_NEXT
__GLOBAL_INI_END:

;HARDWARE STACK POINTER INITIALIZATION
	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
	OUT  SPL,R30
	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
	OUT  SPH,R30

;DATA STACK POINTER INITIALIZATION
	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)

	JMP  _main

	.ESEG
	.ORG 0

	.DSEG
	.ORG 0x460

	.CSEG
;/*
;-------------------------------Colorful Graphic Display beside MMC-----------------------------------
;
;by : MOHAMMAD DEHGHANI         (m.dehghani94@live.com)
;
;LCD features : ili9325 (320*240)
;                 and MMC/SD
;Processor features:    ATmega 32
;                        16 MHz clock
;description:
;    In this source we are going to run a SD card and a Graphic Display to show Pictures in bmp 24bits.
;*/
;#include <mega32a.h>   //header of ATmega32A
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x80
	.EQU __sm_mask=0x70
	.EQU __sm_powerdown=0x20
	.EQU __sm_powersave=0x30
	.EQU __sm_standby=0x60
	.EQU __sm_ext_standby=0x70
	.EQU __sm_adc_noise_red=0x10
	.SET power_ctrl_reg=mcucr
	#endif
;#include <delay.h>     //Header for making delays
;#include <stdio.h>
;#include <pff.c>       //Headers used to read or write on MMC/SD cards
;/*----------------------------------------------------------------------------/
;/  Petit FatFs - FAT file system module  R0.02                 (C)ChaN, 2009
;/-----------------------------------------------------------------------------/
;/ Petit FatFs module is an open source software to implement FAT file system to
;/ small embedded systems. This is a free software and is opened for education,
;/ research and commercial developments under license policy of following trems.
;/
;/  Copyright (C) 2009, ChaN, all right reserved.
;/
;/ * The Petit FatFs module is a free software and there is NO WARRANTY.
;/ * No restriction on use. You can use, modify and redistribute it for
;/   personal, non-profit or commercial use UNDER YOUR RESPONSIBILITY.
;/ * Redistributions of source code must retain the above copyright notice.
;/
;/-----------------------------------------------------------------------------/
;/ Jun 15,'09  R0.01a  First release. (Branched from FatFs R0.07b.)
;/
;/ Dec 14,'09  R0.02   Added multiple code page support.
;/                     Added write funciton.
;/                     Changed stream read mode interface.
;/----------------------------------------------------------------------------*/
;
;#include "pff.h"		/* Petit FatFs configurations and declarations */
;#include "diskio.h"		/* Declarations of low level disk I/O functions */
;
;
;/*--------------------------------------------------------------------------
;
;   Private Functions
;
;---------------------------------------------------------------------------*/
;
;static
;FATFS *FatFs;	/* Pointer to the file system object (logical drive) */
;
;
;
;/*-----------------------------------------------------------------------*/
;/* String functions                                                      */
;/*-----------------------------------------------------------------------*/
;
;/* Fill memory */
;static
;void mem_set (void* dst, int val, int cnt) {
; 0000 0010 void mem_set (void* dst, int val, int cnt) {

	.CSEG
_mem_set_G000:
; .FSTART _mem_set_G000
;	char *d = (char*)dst;
;	while (cnt--) *d++ = (char)val;
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	ST   -Y,R16
;	*dst -> Y+6
;	val -> Y+4
;	cnt -> Y+2
;	*d -> R16,R17
	__GETWRS 16,17,6
_0x3:
	LDD  R30,Y+2
	LDD  R31,Y+2+1
	SBIW R30,1
	STD  Y+2,R30
	STD  Y+2+1,R31
	ADIW R30,1
	BREQ _0x5
	PUSH R17
	PUSH R16
	__ADDWRN 16,17,1
	LDD  R30,Y+4
	POP  R26
	POP  R27
	ST   X,R30
	RJMP _0x3
_0x5:
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20A000A
; .FEND
;
;/* Compare memory to memory */
;static
;int mem_cmp (const void* dst, const void* src, int cnt) {
_mem_cmp_G000:
; .FSTART _mem_cmp_G000
;	const char *d = (const char *)dst, *s = (const char *)src;
;	int r = 0;
;	while (cnt-- && (r = *d++ - *s++) == 0) ;
	CALL SUBOPT_0x0
;	*dst -> Y+10
;	*src -> Y+8
;	cnt -> Y+6
;	*d -> R16,R17
;	*s -> R18,R19
;	r -> R20,R21
	__GETWRS 16,17,10
	__GETWRS 18,19,8
	__GETWRN 20,21,0
_0x6:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SBIW R30,1
	STD  Y+6,R30
	STD  Y+6+1,R31
	ADIW R30,1
	BREQ _0x9
	MOVW R26,R16
	__ADDWRN 16,17,1
	LD   R0,X
	CLR  R1
	MOVW R26,R18
	__ADDWRN 18,19,1
	LD   R26,X
	CLR  R27
	MOVW R30,R0
	SUB  R30,R26
	SBC  R31,R27
	MOVW R20,R30
	SBIW R30,0
	BREQ _0xA
_0x9:
	RJMP _0x8
_0xA:
	RJMP _0x6
_0x8:
;	return r;
	MOVW R30,R20
	CALL __LOADLOCR6
	ADIW R28,12
	RET
;}
; .FEND
;
;
;
;/*-----------------------------------------------------------------------*/
;/* FAT access - Read value of a FAT entry                                */
;/*-----------------------------------------------------------------------*/
;
;static
;CLUST get_fat (	/* 1:IO error, Else:Cluster status */
;	CLUST clst	/* Cluster# to get the link information */
;)
;{
_get_fat_G000:
; .FSTART _get_fat_G000
;	WORD wc, bc, ofs;
;	BYTE buf[4];
;	FATFS *fs = FatFs;
;
;
;	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
	CALL __PUTPARD2
	SBIW R28,6
	CALL __SAVELOCR6
;	clst -> Y+12
;	wc -> R16,R17
;	bc -> R18,R19
;	ofs -> R20,R21
;	buf -> Y+8
;	*fs -> Y+6
	CALL SUBOPT_0x1
	STD  Y+6,R30
	STD  Y+6+1,R31
	CALL SUBOPT_0x2
	CALL SUBOPT_0x3
	BRLO _0xC
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,8
	CALL __GETD1P
	CALL SUBOPT_0x2
	CALL __CPD21
	BRLO _0xB
_0xC:
;		return 1;
	RJMP _0x20A000D
;
;	switch (fs->fs_type) {
_0xB:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LD   R30,X
	LDI  R31,0
;	case FS_FAT12 :
	CPI  R30,LOW(0x1)
	LDI  R26,HIGH(0x1)
	CPC  R31,R26
	BREQ PC+2
	RJMP _0x11
;		bc = (WORD)clst; bc += bc / 2;
	__GETWRS 18,19,12
	MOVW R30,R18
	LSR  R31
	ROR  R30
	__ADDWRR 18,19,30,31
;		ofs = bc % 512; bc /= 512;
	MOVW R30,R18
	ANDI R31,HIGH(0x1FF)
	MOVW R20,R30
	MOVW R26,R18
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CALL __DIVW21U
	MOVW R18,R30
;		if (ofs != 511) {
	LDI  R30,LOW(511)
	LDI  R31,HIGH(511)
	CP   R30,R20
	CPC  R31,R21
	BREQ _0x12
;			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
	CALL SUBOPT_0x4
	ST   -Y,R21
	ST   -Y,R20
	CALL SUBOPT_0x5
	BREQ _0x13
	RJMP _0x10
;		} else {
_0x13:
	RJMP _0x14
_0x12:
;			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
	CALL SUBOPT_0x4
	CALL SUBOPT_0x6
	LDI  R26,LOW(1)
	CALL SUBOPT_0x7
	BREQ _0x15
	RJMP _0x10
;			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
_0x15:
	MOVW R30,R28
	ADIW R30,9
	CALL SUBOPT_0x8
	MOVW R30,R18
	CALL SUBOPT_0x9
	__ADDD1N 1
	CALL __PUTPARD1
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(1)
	CALL SUBOPT_0x7
	BREQ _0x16
	RJMP _0x10
;		}
_0x16:
_0x14:
;		wc = LD_WORD(buf);
	CALL SUBOPT_0xA
	MOVW R16,R30
;		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
	LDD  R30,Y+12
	ANDI R30,LOW(0x1)
	BREQ _0x17
	MOVW R30,R16
	CALL __LSRW4
	RJMP _0x2E6
_0x17:
	MOVW R30,R16
	ANDI R31,HIGH(0xFFF)
_0x2E6:
	CLR  R22
	CLR  R23
	RJMP _0x20A000C
;
;	case FS_FAT16 :
_0x11:
	CPI  R30,LOW(0x2)
	LDI  R26,HIGH(0x2)
	CPC  R31,R26
	BRNE _0x1A
;		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
	MOVW R30,R28
	ADIW R30,8
	CALL SUBOPT_0x8
	PUSH R25
	PUSH R24
	PUSH R27
	PUSH R26
	CALL SUBOPT_0xB
	__GETD1N 0x100
	CALL __DIVD21U
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0xC
	ANDI R31,HIGH(0xFF)
	LSL  R30
	ROL  R31
	CALL SUBOPT_0xD
	BREQ _0x1B
	RJMP _0x10
;		return LD_WORD(buf);
_0x1B:
	CALL SUBOPT_0xA
	CLR  R22
	CLR  R23
	RJMP _0x20A000C
;#if _FS_FAT32
;	case FS_FAT32 :
_0x1A:
	CPI  R30,LOW(0x3)
	LDI  R26,HIGH(0x3)
	CPC  R31,R26
	BRNE _0x10
;		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
	MOVW R30,R28
	ADIW R30,8
	CALL SUBOPT_0x8
	PUSH R25
	PUSH R24
	PUSH R27
	PUSH R26
	CALL SUBOPT_0xB
	__GETD1N 0x80
	CALL __DIVD21U
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0xC
	ANDI R30,LOW(0x7F)
	ANDI R31,HIGH(0x7F)
	CALL __LSLW2
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(4)
	CALL SUBOPT_0x7
	BRNE _0x10
;		return LD_DWORD(buf) & 0x0FFFFFFF;
	LDD  R30,Y+11
	CALL SUBOPT_0xE
	LDD  R30,Y+10
	CALL SUBOPT_0xF
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,0
	LDD  R31,Y+9
	CALL SUBOPT_0x10
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+8
	CALL SUBOPT_0x11
	__ANDD1N 0xFFFFFFF
	RJMP _0x20A000C
;#endif
;	}
_0x10:
;
;	return 1;	/* An error occured at the disk I/O layer */
_0x20A000D:
	__GETD1N 0x1
_0x20A000C:
	CALL __LOADLOCR6
	ADIW R28,16
	RET
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Get sector# from cluster#                                             */
;/*-----------------------------------------------------------------------*/
;
;static
;DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
;	CLUST clst		/* Cluster# to be converted */
;)
;{
_clust2sect_G000:
; .FSTART _clust2sect_G000
;	FATFS *fs = FatFs;
;
;
;	clst -= 2;
	CALL __PUTPARD2
	CALL SUBOPT_0x12
;	clst -> Y+2
;	*fs -> R16,R17
	CALL SUBOPT_0x13
	__SUBD1N 2
	CALL SUBOPT_0x14
;	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
	MOVW R30,R16
	__GETD2Z 8
	__GETD1N 0x2
	CALL __SWAPD12
	CALL __SUBD12
	CALL SUBOPT_0x15
	CALL __CPD21
	BRLO _0x1E
	CALL SUBOPT_0x16
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20A0009
;	return (DWORD)clst * fs->csize + fs->database;
_0x1E:
	MOVW R30,R16
	LDD  R30,Z+1
	LDI  R31,0
	CALL SUBOPT_0x15
	CALL __CWD1
	CALL __MULD12U
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R26,R16
	ADIW R26,20
	CALL __GETD1P
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __ADDD12
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20A0009
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Directory handling - Rewind directory index                           */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT dir_rewind (
;	DIR *dj			/* Pointer to directory object */
;)
;{
_dir_rewind_G000:
; .FSTART _dir_rewind_G000
;	CLUST clst;
;	FATFS *fs = FatFs;
;
;
;	dj->index = 0;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL SUBOPT_0x12
;	*dj -> Y+6
;	clst -> Y+2
;	*fs -> R16,R17
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   X+,R30
	ST   X,R31
;	clst = dj->sclust;
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,4
	CALL SUBOPT_0x17
;	if (clst == 1 || clst >= fs->max_clust)	/* Check start cluster range */
	CALL SUBOPT_0x15
	__CPD2N 0x1
	BREQ _0x20
	MOVW R26,R16
	ADIW R26,8
	CALL __GETD1P
	CALL SUBOPT_0x15
	CALL __CPD21
	BRLO _0x1F
_0x20:
;		return FR_DISK_ERR;
	LDI  R30,LOW(1)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20A000A
;#if _FS_FAT32
;	if (!clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
_0x1F:
	CALL SUBOPT_0x13
	CALL __CPD10
	BRNE _0x23
	MOVW R26,R16
	LD   R26,X
	CPI  R26,LOW(0x3)
	BREQ _0x24
_0x23:
	RJMP _0x22
_0x24:
;		clst = fs->dirbase;
	MOVW R26,R16
	ADIW R26,16
	CALL SUBOPT_0x17
;#endif
;	dj->clust = clst;						/* Current cluster */
_0x22:
	CALL SUBOPT_0x13
	__PUTD1SNS 6,8
;	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
	CALL SUBOPT_0x13
	CALL __CPD10
	BREQ _0x25
	CALL SUBOPT_0x15
	RCALL _clust2sect_G000
	RJMP _0x26
_0x25:
	MOVW R26,R16
	ADIW R26,16
	CALL __GETD1P
_0x26:
	__PUTD1SNS 6,12
;
;	return FR_OK;	/* Seek succeeded */
	LDI  R30,LOW(0)
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20A000A
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Directory handling - Move directory index next                        */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT dir_next (	        /* FR_OK:Succeeded, FR_NO_FILE:End of table */
;	DIR *dj			/* Pointer to directory object */
;)
;{
_dir_next_G000:
; .FSTART _dir_next_G000
;	CLUST clst;
;	WORD i;
;	FATFS *fs = FatFs;
;
;
;	i = dj->index + 1;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL SUBOPT_0x18
;	*dj -> Y+8
;	clst -> Y+4
;	i -> R16,R17
;	*fs -> R18,R19
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL __GETW1P
	ADIW R30,1
	MOVW R16,R30
;	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
	MOV  R0,R16
	OR   R0,R17
	BREQ _0x29
	ADIW R26,12
	CALL __GETD1P
	CALL __CPD10
	BRNE _0x28
_0x29:
;		return FR_NO_FILE;
	LDI  R30,LOW(3)
	RJMP _0x20A000B
;
;	if (!(i & (16-1))) {	/* Sector changed? */
_0x28:
	MOVW R30,R16
	ANDI R30,LOW(0xF)
	BREQ PC+2
	RJMP _0x2B
;		dj->sect++;			/* Next sector */
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,12
	CALL SUBOPT_0x19
;
;		if (dj->clust == 0) {	/* Static table */
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ADIW R26,8
	CALL __GETD1P
	CALL __CPD10
	BRNE _0x2C
;			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
	MOVW R26,R18
	ADIW R26,4
	CALL __GETW1P
	CP   R16,R30
	CPC  R17,R31
	BRLO _0x2D
;				return FR_NO_FILE;
	LDI  R30,LOW(3)
	RJMP _0x20A000B
;		}
_0x2D:
;		else {					/* Dynamic table */
	RJMP _0x2E
_0x2C:
;			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
	MOVW R30,R16
	CALL __LSRW4
	MOVW R26,R30
	MOVW R30,R18
	LDD  R30,Z+1
	LDI  R31,0
	SBIW R30,1
	AND  R30,R26
	AND  R31,R27
	SBIW R30,0
	BRNE _0x2F
;				clst = get_fat(dj->clust);		/* Get next cluster */
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__GETD2Z 8
	RCALL _get_fat_G000
	__PUTD1S 4
;				if (clst <= 1) return FR_DISK_ERR;
	CALL SUBOPT_0x1A
	CALL SUBOPT_0x3
	BRSH _0x30
	LDI  R30,LOW(1)
	RJMP _0x20A000B
;				if (clst >= fs->max_clust)		/* When it reached end of dynamic table */
_0x30:
	MOVW R26,R18
	ADIW R26,8
	CALL __GETD1P
	CALL SUBOPT_0x1A
	CALL __CPD21
	BRLO _0x31
;					return FR_NO_FILE;			/* Report EOT */
	LDI  R30,LOW(3)
	RJMP _0x20A000B
;				dj->clust = clst;				/* Initialize data for new cluster */
_0x31:
	__GETD1S 4
	__PUTD1SNS 8,8
;				dj->sect = clust2sect(clst);
	CALL SUBOPT_0x1A
	RCALL _clust2sect_G000
	__PUTD1SNS 8,12
;			}
;		}
_0x2F:
_0x2E:
;	}
;
;	dj->index = i;
_0x2B:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	ST   X+,R16
	ST   X,R17
;
;	return FR_OK;
	LDI  R30,LOW(0)
_0x20A000B:
	CALL __LOADLOCR4
	ADIW R28,10
	RET
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Directory handling - Find an object in the directory                  */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT dir_find (
;	DIR *dj			/* Pointer to the directory object linked to the file name */
;)
;{
_dir_find_G000:
; .FSTART _dir_find_G000
;	FRESULT res;
;	BYTE c, *dir;
;
;
;	res = dir_rewind(dj);			/* Rewind directory object */
	CALL SUBOPT_0x1B
;	*dj -> Y+4
;	res -> R17
;	c -> R16
;	*dir -> R18,R19
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	RCALL _dir_rewind_G000
	MOV  R17,R30
;	if (res != FR_OK) return res;
	CPI  R17,0
	BREQ _0x32
	CALL __LOADLOCR4
	RJMP _0x20A0009
;
;	dir = FatFs->buf;
_0x32:
	CALL SUBOPT_0x1C
;	do {
_0x34:
;		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
;			? FR_DISK_ERR : FR_OK;
	ST   -Y,R19
	ST   -Y,R18
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x1D
	CALL __PUTPARD2
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL __GETW1P
	ANDI R30,LOW(0xF)
	ANDI R31,HIGH(0xF)
	LSL  R30
	CALL __LSLW4
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(32)
	CALL SUBOPT_0x7
	BREQ _0x36
	LDI  R30,LOW(1)
	RJMP _0x37
_0x36:
	LDI  R30,LOW(0)
_0x37:
	MOV  R17,R30
;		if (res != FR_OK) break;
	CPI  R17,0
	BRNE _0x35
;		c = dir[DIR_Name];	/* First character */
	MOVW R26,R18
	LD   R16,X
;		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
	CPI  R16,0
	BRNE _0x3A
	LDI  R17,LOW(3)
	RJMP _0x35
;		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
_0x3A:
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x8)
	BRNE _0x3C
	ST   -Y,R19
	ST   -Y,R18
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+2
	LDD  R27,Z+3
	ST   -Y,R27
	ST   -Y,R26
	LDI  R26,LOW(11)
	LDI  R27,0
	RCALL _mem_cmp_G000
	SBIW R30,0
	BREQ _0x3D
_0x3C:
	RJMP _0x3B
_0x3D:
;			break;
	RJMP _0x35
;		res = dir_next(dj);							/* Next entry */
_0x3B:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	RCALL _dir_next_G000
	MOV  R17,R30
;	} while (res == FR_OK);
	CPI  R17,0
	BREQ _0x34
_0x35:
;
;	return res;
	MOV  R30,R17
	CALL __LOADLOCR4
	RJMP _0x20A0009
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Read an object from the directory                                     */
;/*-----------------------------------------------------------------------*/
;#if _USE_DIR
;static
;FRESULT dir_read (
;	DIR *dj			/* Pointer to the directory object to store read object name */
;)
;{
;	FRESULT res;
;	BYTE a, c, *dir;
;
;
;	res = FR_NO_FILE;
;	dir = FatFs->buf;
;	while (dj->sect) {
;		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
;			? FR_DISK_ERR : FR_OK;
;		if (res != FR_OK) break;
;		c = dir[DIR_Name];
;		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;		a = dir[DIR_Attr] & AM_MASK;
;		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
;			break;
;		res = dir_next(dj);				/* Next entry */
;		if (res != FR_OK) break;
;	}
;
;	if (res != FR_OK) dj->sect = 0;
;
;	return res;
;}
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Pick a segment and create the object name in directory form           */
;/*-----------------------------------------------------------------------*/
;
;#ifdef _EXCVT
;	static const BYTE cvt[] = _EXCVT;
;#endif
;
;static
;FRESULT create_name (
;	DIR *dj,			/* Pointer to the directory object */
;	const char **path	/* Pointer to pointer to the segment in the path string */
;)
;{
_create_name_G000:
; .FSTART _create_name_G000
;	BYTE c, d, ni, si, i, *sfn;
;	const char *p;
;
;	/* Create file name in directory form */
;	sfn = dj->fn;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,4
	CALL __SAVELOCR6
;	*dj -> Y+12
;	*path -> Y+10
;	c -> R17
;	d -> R16
;	ni -> R19
;	si -> R18
;	i -> R21
;	*sfn -> Y+8
;	*p -> Y+6
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	ADIW R26,2
	CALL __GETW1P
	STD  Y+8,R30
	STD  Y+8+1,R31
;	mem_set(sfn, ' ', 11);
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(32)
	LDI  R31,HIGH(32)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(11)
	LDI  R27,0
	RCALL _mem_set_G000
;	si = i = 0; ni = 8;
	LDI  R30,LOW(0)
	MOV  R21,R30
	MOV  R18,R30
	LDI  R19,LOW(8)
;	p = *path;
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	CALL __GETW1P
	STD  Y+6,R30
	STD  Y+6+1,R31
;	for (;;) {
_0x3F:
;		c = p[si++];
	CALL SUBOPT_0x1E
	LD   R17,X
;		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
	CPI  R17,33
	BRLO _0x42
	CPI  R17,47
	BRNE _0x41
_0x42:
	RJMP _0x40
;		if (c == '.' || i >= ni) {
_0x41:
	CPI  R17,46
	BREQ _0x45
	CP   R21,R19
	BRLO _0x44
_0x45:
;			if (ni != 8 || c != '.') break;
	CPI  R19,8
	BRNE _0x48
	CPI  R17,46
	BREQ _0x47
_0x48:
	RJMP _0x40
;			i = 8; ni = 11;
_0x47:
	LDI  R21,LOW(8)
	LDI  R19,LOW(11)
;			continue;
	RJMP _0x3E
;		}
;#ifdef _EXCVT
;		if (c >= 0x80)					/* To upper extended char (SBCS) */
;			c = cvt[c - 0x80];
;#endif
;		if (IsDBCS1(c) && i >= ni - 1) {	/* DBC 1st byte? */
_0x44:
	LDI  R30,LOW(0)
	CPI  R30,0
	BREQ _0x4B
	MOV  R30,R19
	LDI  R31,0
	SBIW R30,1
	MOV  R26,R21
	LDI  R27,0
	CP   R26,R30
	CPC  R27,R31
	BRGE _0x4C
_0x4B:
	RJMP _0x4A
_0x4C:
;			d = p[si++];					/* Get 2nd byte */
	CALL SUBOPT_0x1E
	LD   R16,X
;			sfn[i++] = c;
	CALL SUBOPT_0x1F
	ST   Z,R17
;			sfn[i++] = d;
	CALL SUBOPT_0x1F
	ST   Z,R16
;		} else {						/* Single byte code */
	RJMP _0x4D
_0x4A:
;			if (IsLower(c)) c -= 0x20;	/* toupper */
	CPI  R17,97
	BRLO _0x4F
	CPI  R17,123
	BRLO _0x50
_0x4F:
	RJMP _0x4E
_0x50:
	SUBI R17,LOW(32)
;			sfn[i++] = c;
_0x4E:
	CALL SUBOPT_0x1F
	ST   Z,R17
;		}
_0x4D:
;	}
_0x3E:
	RJMP _0x3F
_0x40:
;	*path = &p[si];						/* Rerurn pointer to the next segment */
	MOV  R30,R18
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R31,0
	ADD  R30,R26
	ADC  R31,R27
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	ST   X+,R30
	ST   X,R31
;
;	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
	CPI  R17,33
	BRSH _0x51
	LDI  R30,LOW(1)
	RJMP _0x52
_0x51:
	LDI  R30,LOW(0)
_0x52:
	__PUTB1SNS 8,11
;
;	return FR_OK;
	LDI  R30,LOW(0)
	CALL __LOADLOCR6
	ADIW R28,14
	RET
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Get file information from directory entry                             */
;/*-----------------------------------------------------------------------*/
;#if _USE_DIR
;static
;void get_fileinfo (		/* No return code */
;	DIR *dj,			/* Pointer to the directory object */
;	FILINFO *fno	 	/* Pointer to store the file information */
;)
;{
;	BYTE i, c, *dir;
;	char *p;
;
;
;	p = fno->fname;
;	if (dj->sect) {
;		dir = FatFs->buf;
;		for (i = 0; i < 8; i++) {	/* Copy file name body */
;			c = dir[i];
;			if (c == ' ') break;
;			if (c == 0x05) c = 0xE5;
;			*p++ = c;
;		}
;		if (dir[8] != ' ') {		/* Copy file name extension */
;			*p++ = '.';
;			for (i = 8; i < 11; i++) {
;				c = dir[i];
;				if (c == ' ') break;
;				*p++ = c;
;			}
;		}
;		fno->fattrib = dir[DIR_Attr];				/* Attribute */
;		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
;		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
;		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
;	}
;	*p = 0;
;}
;#endif /* _USE_DIR */
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Follow a file path                                                    */
;/*-----------------------------------------------------------------------*/
;
;static
;FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
;	DIR *dj,			/* Directory object to return last directory and found object */
;	const char *path	/* Full-path string to find a file or directory */
;)
;{
_follow_path_G000:
; .FSTART _follow_path_G000
;	FRESULT res;
;	BYTE *dir;
;
;
;	while (*path == ' ') path++;		/* Skip leading spaces */
	CALL SUBOPT_0x1B
;	*dj -> Y+6
;	*path -> Y+4
;	res -> R17
;	*dir -> R18,R19
_0x54:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CPI  R26,LOW(0x20)
	BRNE _0x56
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ADIW R30,1
	STD  Y+4,R30
	STD  Y+4+1,R31
	RJMP _0x54
_0x56:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CPI  R26,LOW(0x2F)
	BRNE _0x57
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ADIW R30,1
	STD  Y+4,R30
	STD  Y+4+1,R31
;	dj->sclust = 0;						/* Set start directory (always root dir) */
_0x57:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,4
	CALL SUBOPT_0x20
;
;	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R26,X
	CPI  R26,LOW(0x21)
	BRSH _0x58
;		res = dir_rewind(dj);
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RCALL _dir_rewind_G000
	MOV  R17,R30
;		FatFs->buf[0] = 0;
	CALL SUBOPT_0x1
	LDD  R26,Z+6
	LDD  R27,Z+7
	LDI  R30,LOW(0)
	ST   X,R30
;
;	} else {							/* Follow path */
	RJMP _0x59
_0x58:
;		for (;;) {
_0x5B:
;			res = create_name(dj, &path);	/* Get a segment */
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R28
	ADIW R26,6
	RCALL _create_name_G000
	MOV  R17,R30
;			if (res != FR_OK) break;
	CPI  R17,0
	BRNE _0x5C
;			res = dir_find(dj);				/* Find it */
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RCALL _dir_find_G000
	MOV  R17,R30
;			if (res != FR_OK) {				/* Could not find the object */
	CPI  R17,0
	BREQ _0x5E
;				if (res == FR_NO_FILE && !*(dj->fn+11))
	CPI  R17,3
	BRNE _0x60
	CALL SUBOPT_0x21
	BREQ _0x61
_0x60:
	RJMP _0x5F
_0x61:
;					res = FR_NO_PATH;
	LDI  R17,LOW(4)
;				break;
_0x5F:
	RJMP _0x5C
;			}
;			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
_0x5E:
	CALL SUBOPT_0x21
	BRNE _0x5C
;			dir = FatFs->buf;				/* There is next segment. Follow the sub directory */
	CALL SUBOPT_0x1C
;			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
	MOVW R30,R18
	LDD  R30,Z+11
	ANDI R30,LOW(0x10)
	BRNE _0x63
;				res = FR_NO_PATH; break;
	LDI  R17,LOW(4)
	RJMP _0x5C
;			}
;			dj->sclust =
_0x63:
;#if _FS_FAT32
;				((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
;#endif
;				LD_WORD(dir+DIR_FstClusLO);
	MOVW R30,R18
	LDD  R27,Z+21
	LDI  R26,LOW(0)
	LDD  R30,Z+20
	CALL SUBOPT_0x22
	CALL __LSLD16
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R30,R18
	LDD  R27,Z+27
	LDI  R26,LOW(0)
	LDD  R30,Z+26
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x10
	__PUTD1SNS 6,4
;		}
	RJMP _0x5B
_0x5C:
;	}
_0x59:
;
;	return res;
	MOV  R30,R17
	CALL __LOADLOCR4
_0x20A000A:
	ADIW R28,8
	RET
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Check a sector if it is an FAT boot record                            */
;/*-----------------------------------------------------------------------*/
;
;static
;BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
;	BYTE *buf,	/* Working buffer */
;	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;)
;{
_check_fs_G000:
; .FSTART _check_fs_G000
;	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
	CALL __PUTPARD2
;	*buf -> Y+4
;	sect -> Y+0
	CALL SUBOPT_0x23
	LDI  R30,LOW(510)
	LDI  R31,HIGH(510)
	CALL SUBOPT_0xD
	BREQ _0x64
;		return 3;
	LDI  R30,LOW(3)
	RJMP _0x20A0009
;	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
_0x64:
	CALL SUBOPT_0x24
	CPI  R30,LOW(0xAA55)
	LDI  R26,HIGH(0xAA55)
	CPC  R31,R26
	BREQ _0x65
;		return 2;
	LDI  R30,LOW(2)
	RJMP _0x20A0009
;
;	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
_0x65:
	CALL SUBOPT_0x23
	LDI  R30,LOW(54)
	LDI  R31,HIGH(54)
	CALL SUBOPT_0xD
	BRNE _0x67
	CALL SUBOPT_0x24
	CPI  R30,LOW(0x4146)
	LDI  R26,HIGH(0x4146)
	CPC  R31,R26
	BREQ _0x68
_0x67:
	RJMP _0x66
_0x68:
;		return 0;
	LDI  R30,LOW(0)
	RJMP _0x20A0009
;#if _FS_FAT32
;	if (!disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
_0x66:
	CALL SUBOPT_0x23
	LDI  R30,LOW(82)
	LDI  R31,HIGH(82)
	CALL SUBOPT_0xD
	BRNE _0x6A
	CALL SUBOPT_0x24
	CPI  R30,LOW(0x4146)
	LDI  R26,HIGH(0x4146)
	CPC  R31,R26
	BREQ _0x6B
_0x6A:
	RJMP _0x69
_0x6B:
;		return 0;
	LDI  R30,LOW(0)
	RJMP _0x20A0009
;#endif
;	return 1;
_0x69:
	LDI  R30,LOW(1)
_0x20A0009:
	ADIW R28,6
	RET
;}
; .FEND
;
;
;
;
;/*--------------------------------------------------------------------------
;
;   Public Functions
;
;--------------------------------------------------------------------------*/
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Mount/Unmount a Locical Drive                                         */
;/*-----------------------------------------------------------------------*/
;
;FRESULT pf_mount (
;	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
;)
;{
_pf_mount:
; .FSTART _pf_mount
;	BYTE fmt, buf[36];
;	DWORD bsect, fsize, tsect, mclst;
;
;
;	FatFs = 0;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,52
	ST   -Y,R17
;	*fs -> Y+53
;	fmt -> R17
;	buf -> Y+17
;	bsect -> Y+13
;	fsize -> Y+9
;	tsect -> Y+5
;	mclst -> Y+1
	LDI  R30,LOW(0)
	STS  _FatFs_G000,R30
	STS  _FatFs_G000+1,R30
;	if (!fs) return FR_OK;				/* Unregister fs object */
	LDD  R30,Y+53
	LDD  R31,Y+53+1
	SBIW R30,0
	BRNE _0x6C
	RJMP _0x20A0008
;
;	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
_0x6C:
	RCALL _disk_initialize
	ANDI R30,LOW(0x1)
	BREQ _0x6D
;		return FR_NOT_READY;
	LDI  R30,LOW(2)
	RJMP _0x20A0007
;
;	/* Search FAT partition on the drive */
;	bsect = 0;
_0x6D:
	LDI  R30,LOW(0)
	__CLRD1S 13
;	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
	CALL SUBOPT_0x25
	CALL SUBOPT_0x26
;	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
	CPI  R17,1
	BRNE _0x6E
;		/* Check a partition listed in top of the partition table */
;		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
	CALL SUBOPT_0x25
	CALL SUBOPT_0x27
	LDI  R30,LOW(446)
	LDI  R31,HIGH(446)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(16)
	CALL SUBOPT_0x7
	BREQ _0x6F
;			fmt = 3;
	LDI  R17,LOW(3)
;		} else {
	RJMP _0x70
_0x6F:
;			if (buf[4]) {					/* Is the partition existing? */
	LDD  R30,Y+21
	CPI  R30,0
	BREQ _0x71
;				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
	MOVW R30,R28
	ADIW R30,28
	LD   R30,Z
	CALL SUBOPT_0xE
	MOVW R30,R28
	ADIW R30,27
	LD   R30,Z
	CALL SUBOPT_0xF
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R28
	ADIW R30,26
	CALL SUBOPT_0x28
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+25
	CALL SUBOPT_0x11
	__PUTD1S 13
;				fmt = check_fs(buf, bsect);	/* Check the partition */
	CALL SUBOPT_0x25
	CALL SUBOPT_0x26
;			}
;		}
_0x71:
_0x70:
;	}
;	if (fmt == 3) return FR_DISK_ERR;
_0x6E:
	CPI  R17,3
	BRNE _0x72
	LDI  R30,LOW(1)
	RJMP _0x20A0007
;	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
_0x72:
	CPI  R17,0
	BREQ _0x73
	LDI  R30,LOW(7)
	RJMP _0x20A0007
;
;	/* Initialize the file system object */
;	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
_0x73:
	CALL SUBOPT_0x25
	CALL SUBOPT_0x27
	LDI  R30,LOW(13)
	LDI  R31,HIGH(13)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(36)
	CALL SUBOPT_0x7
	BREQ _0x74
	LDI  R30,LOW(1)
	RJMP _0x20A0007
;
;	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
_0x74:
	MOVW R30,R28
	ADIW R30,39
	CALL SUBOPT_0x29
	MOVW R30,R28
	ADIW R30,39
	SBIW R30,13
	LD   R30,Z
	CALL SUBOPT_0x22
	CALL SUBOPT_0x2A
;	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
	CALL SUBOPT_0x2B
	CALL __CPD10
	BRNE _0x75
	MOVW R30,R28
	ADIW R30,53
	SBIW R30,10
	LD   R30,Z
	CALL SUBOPT_0xE
	MOVW R30,R28
	ADIW R30,53
	SBIW R30,11
	LD   R30,Z
	CALL SUBOPT_0xF
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R28
	ADIW R30,53
	SBIW R30,12
	CALL SUBOPT_0x28
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R28
	ADIW R30,53
	SBIW R30,13
	LD   R30,Z
	CALL SUBOPT_0x11
	CALL SUBOPT_0x2A
;
;	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
_0x75:
	LDD  R30,Y+20
	LDI  R31,0
	CALL SUBOPT_0x2C
	CALL __CWD1
	CALL __MULD12U
	CALL SUBOPT_0x2A
;	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	MOVW R30,R28
	ADIW R30,31
	CALL SUBOPT_0x29
	CALL SUBOPT_0x2D
	__GETD2S 13
	CALL SUBOPT_0x9
	__PUTD1SNS 53,12
;	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	LDD  R30,Y+17
	__PUTB1SNS 53,1
;	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	MOVW R30,R28
	ADIW R30,34
	CALL SUBOPT_0x29
	MOVW R30,R28
	ADIW R30,34
	SBIW R30,13
	LD   R30,Z
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	__PUTW1SNS 53,4
;	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	MOVW R30,R28
	ADIW R30,36
	CALL SUBOPT_0x29
	MOVW R30,R28
	ADIW R30,36
	SBIW R30,13
	LD   R30,Z
	CALL SUBOPT_0x22
	__PUTD1S 5
;	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	CALL __CPD10
	BRNE _0x76
	MOVW R30,R28
	ADIW R30,49
	SBIW R30,10
	LD   R30,Z
	CALL SUBOPT_0xE
	MOVW R30,R28
	ADIW R30,49
	SBIW R30,11
	LD   R30,Z
	CALL SUBOPT_0xF
	CALL SUBOPT_0x2E
	SBIW R30,12
	CALL SUBOPT_0x28
	CALL SUBOPT_0x2E
	SBIW R30,13
	LD   R30,Z
	CALL SUBOPT_0x11
	__PUTD1S 5
;	mclst = (tsect						/* Last cluster# + 1 */
_0x76:
;		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
;		) / fs->csize + 2;
	MOVW R30,R28
	ADIW R30,31
	CALL SUBOPT_0x29
	CALL SUBOPT_0x2D
	__GETD2S 5
	CLR  R22
	CLR  R23
	CALL __SWAPD12
	CALL __SUBD12
	CALL SUBOPT_0x2C
	CALL __SUBD12
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2F
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CLR  R22
	CLR  R23
	CALL __SUBD21
	LDD  R30,Y+53
	LDD  R31,Y+53+1
	CALL SUBOPT_0x30
	CALL __DIVD21U
	__ADDD1N 2
	__PUTD1S 1
;	fs->max_clust = (CLUST)mclst;
	__PUTD1SNS 53,8
;
;	fmt = FS_FAT12;							/* Determine the FAT sub type */
	LDI  R17,LOW(1)
;	if (mclst >= 0xFF7) fmt = FS_FAT16;		/* Number of clusters >= 0xFF5 */
	__GETD2S 1
	__CPD2N 0xFF7
	BRLO _0x77
	LDI  R17,LOW(2)
;	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
_0x77:
	__GETD2S 1
	__CPD2N 0xFFF7
	BRLO _0x78
;#if _FS_FAT32
;		fmt = FS_FAT32;
	LDI  R17,LOW(3)
;#else
;		return FR_NO_FILESYSTEM;
;#endif
;
;	fs->fs_type = fmt;		/* FAT sub-type */
_0x78:
	LDD  R26,Y+53
	LDD  R27,Y+53+1
	ST   X,R17
;#if _FS_FAT32
;	if (fmt == FS_FAT32)
	CPI  R17,3
	BRNE _0x79
;		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	MOVW R30,R28
	ADIW R30,51
	LD   R30,Z
	CALL SUBOPT_0xE
	MOVW R30,R28
	ADIW R30,50
	LD   R30,Z
	CALL SUBOPT_0xF
	CALL SUBOPT_0x2E
	CALL SUBOPT_0x28
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+48
	CALL SUBOPT_0x11
	RJMP _0x2E7
;	else
_0x79:
;#endif
;		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	CALL SUBOPT_0x31
_0x2E7:
	__PUTD1SNS 53,16
;	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
	CALL SUBOPT_0x31
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x2F
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x9
	__PUTD1SNS 53,20
;
;	fs->flag = 0;
	LDD  R26,Y+53
	LDD  R27,Y+53+1
	ADIW R26,2
	LDI  R30,LOW(0)
	ST   X,R30
;	FatFs = fs;
	LDD  R30,Y+53
	LDD  R31,Y+53+1
	STS  _FatFs_G000,R30
	STS  _FatFs_G000+1,R31
;
;	return FR_OK;
_0x20A0008:
	LDI  R30,LOW(0)
_0x20A0007:
	LDD  R17,Y+0
	ADIW R28,55
	RET
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Open or Create a File                                                 */
;/*-----------------------------------------------------------------------*/
;
;FRESULT pf_open (
;	const char *path	/* Pointer to the file name */
;)
;{
_pf_open:
; .FSTART _pf_open
;	FRESULT res;
;	DIR dj;
;	BYTE sp[12]={0}, dir[32]={0};
;	FATFS *fs = FatFs;
;
;
;	if (!fs)						/* Check file system */
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,60
	LDI  R24,44
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	LDI  R30,LOW(_0x7B*2)
	LDI  R31,HIGH(_0x7B*2)
	CALL __INITLOCB
	CALL SUBOPT_0x18
;	*path -> Y+64
;	res -> R17
;	dj -> Y+48
;	sp -> Y+36
;	dir -> Y+4
;	*fs -> R18,R19
	MOV  R0,R18
	OR   R0,R19
	BRNE _0x7C
;		return FR_NOT_ENABLED;
	LDI  R30,LOW(6)
	RJMP _0x20A0006
;
;	fs->flag = 0;
_0x7C:
	MOVW R26,R18
	ADIW R26,2
	LDI  R30,LOW(0)
	ST   X,R30
;	fs->buf = dir;
	MOVW R30,R28
	ADIW R30,4
	__PUTW1RNS 18,6
;	dj.fn = sp;
	MOVW R30,R28
	ADIW R30,36
	STD  Y+50,R30
	STD  Y+50+1,R31
;	res = follow_path(&dj, path);	/* Follow the file path */
	MOVW R30,R28
	ADIW R30,48
	ST   -Y,R31
	ST   -Y,R30
	__GETW2SX 66
	RCALL _follow_path_G000
	MOV  R17,R30
;	if (res != FR_OK) return res;	/* Follow failed */
	CPI  R17,0
	BREQ _0x7D
	RJMP _0x20A0006
;	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
_0x7D:
	LDD  R30,Y+4
	CPI  R30,0
	BREQ _0x7F
	LDD  R30,Y+15
	ANDI R30,LOW(0x10)
	BREQ _0x7E
_0x7F:
;		return FR_NO_FILE;
	LDI  R30,LOW(3)
	RJMP _0x20A0006
;
;	fs->org_clust =						/* File start cluster */
_0x7E:
;#if _FS_FAT32
;		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
;#endif
;		LD_WORD(dir+DIR_FstClusLO);
	MOVW R30,R28
	ADIW R30,25
	LD   R31,Z
	LDI  R30,LOW(0)
	MOVW R26,R30
	LDD  R30,Y+24
	CALL SUBOPT_0x22
	CALL __LSLD16
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	MOVW R30,R28
	ADIW R30,31
	LD   R31,Z
	LDI  R30,LOW(0)
	MOVW R26,R30
	LDD  R30,Y+30
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL SUBOPT_0x10
	__PUTD1RNS 18,32
;	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	MOVW R30,R28
	ADIW R30,35
	LD   R30,Z
	CALL SUBOPT_0xE
	MOVW R30,R28
	ADIW R30,34
	LD   R30,Z
	CALL SUBOPT_0xF
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R28
	ADIW R30,33
	CALL SUBOPT_0x28
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+32
	CALL SUBOPT_0x11
	__PUTD1RNS 18,28
;	fs->fptr = 0;						/* File pointer */
	MOVW R26,R18
	ADIW R26,24
	CALL SUBOPT_0x20
;	fs->flag = FA_OPENED;
	MOVW R26,R18
	ADIW R26,2
	LDI  R30,LOW(1)
	ST   X,R30
;
;	return FR_OK;
	LDI  R30,LOW(0)
_0x20A0006:
	CALL __LOADLOCR4
	ADIW R28,63
	ADIW R28,3
	RET
;}
; .FEND
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Read File                                                             */
;/*-----------------------------------------------------------------------*/
;#if _USE_READ
;
;FRESULT pf_read (
;	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
;	WORD btr,		/* Number of bytes to read */
;	WORD* br		/* Pointer to number of bytes read */
;)
;{
_pf_read:
; .FSTART _pf_read
;	DRESULT dr;
;	CLUST clst;
;	DWORD sect, remain;
;	BYTE *rbuff = buff;
;	WORD rcnt;
;	FATFS *fs = FatFs;
;
;
;	*br = 0;
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,14
	CALL __SAVELOCR6
;	*buff -> Y+24
;	btr -> Y+22
;	*br -> Y+20
;	dr -> R17
;	clst -> Y+16
;	sect -> Y+12
;	remain -> Y+8
;	*rbuff -> R18,R19
;	rcnt -> R20,R21
;	*fs -> Y+6
	__GETWRS 18,19,24
	CALL SUBOPT_0x1
	STD  Y+6,R30
	STD  Y+6+1,R31
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   X+,R30
	ST   X,R31
;	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SBIW R30,0
	BRNE _0x81
	LDI  R30,LOW(6)
	RJMP _0x20A0005
;	if (!(fs->flag & FA_OPENED))		/* Check if opened */
_0x81:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+2
	ANDI R26,LOW(0x1)
	BRNE _0x82
;		return FR_NOT_OPENED;
	LDI  R30,LOW(5)
	RJMP _0x20A0005
;
;	remain = fs->fsize - fs->fptr;
_0x82:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	__GETD2Z 28
	PUSH R25
	PUSH R24
	PUSH R27
	PUSH R26
	CALL SUBOPT_0x32
	POP  R30
	POP  R31
	POP  R22
	POP  R23
	CALL __SUBD12
	__PUTD1S 8
;	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
	LDD  R26,Y+22
	LDD  R27,Y+22+1
	CLR  R24
	CLR  R25
	CALL __CPD12
	BRSH _0x83
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	STD  Y+22,R30
	STD  Y+22+1,R31
;
;	while (btr)	{									/* Repeat until all data transferred */
_0x83:
_0x84:
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	SBIW R30,0
	BRNE PC+2
	RJMP _0x86
;		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
	CALL SUBOPT_0x32
	MOVW R30,R26
	MOVW R22,R24
	ANDI R31,HIGH(0x1FF)
	SBIW R30,0
	BREQ PC+2
	RJMP _0x87
;			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
	CALL SUBOPT_0x32
	CALL SUBOPT_0x33
	MOVW R26,R30
	MOVW R24,R22
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x30
	CALL __MODD21U
	CALL __CPD10
	BRNE _0x88
;				clst = (fs->fptr == 0) ?			/* On the top of the file? */
;					fs->org_clust : get_fat(fs->curr_clust);
	CALL SUBOPT_0x32
	CALL __CPD02
	BRNE _0x89
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,32
	CALL __GETD1P
	RJMP _0x8A
_0x89:
	CALL SUBOPT_0x34
	RCALL _get_fat_G000
_0x8A:
	__PUTD1S 16
;				if (clst <= 1) goto fr_abort;
	__GETD2S 16
	CALL SUBOPT_0x3
	BRSH _0x8C
	RJMP _0x8D
;				fs->curr_clust = clst;				/* Update current cluster */
_0x8C:
	__GETD1S 16
	__PUTD1SNS 6,36
;				fs->csect = 0;						/* Reset sector offset in the cluster */
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,3
	LDI  R30,LOW(0)
	ST   X,R30
;			}
;			sect = clust2sect(fs->curr_clust);		/* Get current sector */
_0x88:
	CALL SUBOPT_0x34
	RCALL _clust2sect_G000
	__PUTD1S 12
;			if (!sect) goto fr_abort;
	CALL __CPD10
	BRNE _0x8E
	RJMP _0x8D
;			fs->dsect = sect + fs->csect++;
_0x8E:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	CALL SUBOPT_0x35
	CALL SUBOPT_0x2
	CALL __CWD1
	CALL __ADDD12
	__PUTD1SNS 6,40
;		}
;		rcnt = 512 - ((WORD)fs->fptr % 512);		/* Get partial sector data from sector buffer */
_0x87:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LDD  R26,Z+24
	LDD  R27,Z+25
	MOVW R30,R26
	ANDI R31,HIGH(0x1FF)
	LDI  R26,LOW(512)
	LDI  R27,HIGH(512)
	SUB  R26,R30
	SBC  R27,R31
	MOVW R20,R26
;		if (rcnt > btr) rcnt = btr;
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	CP   R30,R20
	CPC  R31,R21
	BRSH _0x8F
	__GETWRS 20,21,22
;		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
_0x8F:
	LDD  R30,Y+24
	LDD  R31,Y+24+1
	SBIW R30,0
	BRNE _0x90
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	RJMP _0x91
_0x90:
	MOVW R30,R18
_0x91:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__GETD2Z 40
	CALL __PUTPARD2
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	ADIW R26,24
	CALL __GETW1P
	ANDI R31,HIGH(0x1FF)
	ST   -Y,R31
	ST   -Y,R30
	MOVW R26,R20
	RCALL _disk_readp
	MOV  R17,R30
;		if (dr) goto fr_abort;
	CPI  R17,0
	BRNE _0x8D
;		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	CALL SUBOPT_0x36
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R20
	CALL SUBOPT_0x9
	MOVW R26,R0
	CALL __PUTDP1
	__ADDWRR 18,19,20,21
;		btr -= rcnt; *br += rcnt;
	LDD  R30,Y+22
	LDD  R31,Y+22+1
	SUB  R30,R20
	SBC  R31,R21
	STD  Y+22,R30
	STD  Y+22+1,R31
	LDD  R26,Y+20
	LDD  R27,Y+20+1
	LD   R30,X+
	LD   R31,X+
	ADD  R30,R20
	ADC  R31,R21
	ST   -X,R31
	ST   -X,R30
;	}
	RJMP _0x84
_0x86:
;
;	return FR_OK;
	LDI  R30,LOW(0)
	RJMP _0x20A0005
;
;fr_abort:
_0x8D:
;	fs->flag = 0;
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,2
	LDI  R30,LOW(0)
	ST   X,R30
;	return FR_DISK_ERR;
	LDI  R30,LOW(1)
_0x20A0005:
	CALL __LOADLOCR6
	ADIW R28,26
	RET
;}
; .FEND
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Write File                                                            */
;/*-----------------------------------------------------------------------*/
;#if _USE_WRITE
;
;FRESULT pf_write (
;	const void* buff,	/* Pointer to the data to be written */
;	WORD btw,			/* Number of bytes to write (0:Finalize the current write operation) */
;	WORD* bw			/* Pointer to number of bytes written */
;)
;{
;	CLUST clst;
;	DWORD sect, remain;
;	const BYTE *p = buff;
;	WORD wcnt;
;	FATFS *fs = FatFs;
;
;
;	*bw = 0;
;	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
;	if (!(fs->flag & FA_OPENED))		/* Check if opened */
;		return FR_NOT_OPENED;
;
;	if (!btw) {		/* Finalize request */
;		if ((fs->flag & FA__WIP) && disk_writep(0, 0)) goto fw_abort;
;		fs->flag &= ~FA__WIP;
;		return FR_OK;
;	} else {		/* Write data request */
;		if (!(fs->flag & FA__WIP))		/* Round down fptr to the sector boundary */
;			fs->fptr &= 0xFFFFFE00;
;	}
;	remain = fs->fsize - fs->fptr;
;	if (btw > remain) btw = (WORD)remain;			/* Truncate btw by remaining bytes */
;
;	while (btw)	{									/* Repeat until all data transferred */
;		if (((WORD)fs->fptr % 512) == 0) {				/* On the sector boundary? */
;			if ((fs->fptr / 512 % fs->csize) == 0) {	/* On the cluster boundary? */
;				clst = (fs->fptr == 0) ?			/* On the top of the file? */
;					fs->org_clust : get_fat(fs->curr_clust);
;				if (clst <= 1) goto fw_abort;
;				fs->curr_clust = clst;				/* Update current cluster */
;				fs->csect = 0;						/* Reset sector offset in the cluster */
;			}
;			sect = clust2sect(fs->curr_clust);		/* Get current sector */
;			if (!sect) goto fw_abort;
;			fs->dsect = sect + fs->csect++;
;			if (disk_writep(0, fs->dsect)) goto fw_abort;	/* Initiate a sector write operation */
;			fs->flag |= FA__WIP;
;		}
;		wcnt = 512 - ((WORD)fs->fptr % 512);		/* Number of bytes to write to the sector */
;		if (wcnt > btw) wcnt = btw;
;		if (disk_writep(p, wcnt)) goto fw_abort;	/* Send data to the sector */
;		fs->fptr += wcnt; p += wcnt;				/* Update pointers and counters */
;		btw -= wcnt; *bw += wcnt;
;		if (((WORD)fs->fptr % 512) == 0) {
;			if (disk_writep(0, 0)) goto fw_abort;	/* Finalize the currtent secter write operation */
;			fs->flag &= ~FA__WIP;
;		}
;	}
;
;	return FR_OK;
;
;fw_abort:
;	fs->flag = 0;
;	return FR_DISK_ERR;
;}
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Seek File R/W Pointer                                                 */
;/*-----------------------------------------------------------------------*/
;#if _USE_LSEEK
;
;FRESULT pf_lseek (
;	DWORD ofs		/* File pointer from top of file */
;)
;{
_pf_lseek:
; .FSTART _pf_lseek
;	CLUST clst;
;	DWORD bcs, sect, ifptr;
;	FATFS *fs = FatFs;
;
;
;	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	CALL __PUTPARD2
	SBIW R28,16
	CALL SUBOPT_0x12
;	ofs -> Y+18
;	clst -> Y+14
;	bcs -> Y+10
;	sect -> Y+6
;	ifptr -> Y+2
;	*fs -> R16,R17
	MOV  R0,R16
	OR   R0,R17
	BRNE _0x94
	LDI  R30,LOW(6)
	RJMP _0x20A0004
;	if (!(fs->flag & FA_OPENED))		/* Check if opened */
_0x94:
	MOVW R30,R16
	LDD  R26,Z+2
	ANDI R26,LOW(0x1)
	BRNE _0x95
;			return FR_NOT_OPENED;
	LDI  R30,LOW(5)
	RJMP _0x20A0004
;
;	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
_0x95:
	MOVW R26,R16
	ADIW R26,28
	CALL SUBOPT_0x37
	CALL __CPD12
	BRSH _0x96
	MOVW R26,R16
	ADIW R26,28
	CALL __GETD1P
	__PUTD1S 18
;	ifptr = fs->fptr;
_0x96:
	MOVW R26,R16
	ADIW R26,24
	CALL SUBOPT_0x17
;	fs->fptr = 0;
	MOVW R26,R16
	ADIW R26,24
	CALL SUBOPT_0x20
;	if (ofs > 0) {
	CALL SUBOPT_0x38
	CALL __CPD02
	BRLO PC+2
	RJMP _0x97
;		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
	MOVW R30,R16
	CALL SUBOPT_0x30
	CALL SUBOPT_0x39
	CALL __MULD12U
	__PUTD1S 10
;		if (ifptr > 0 &&
;			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
	CALL SUBOPT_0x15
	CALL __CPD02
	BRSH _0x99
	CALL SUBOPT_0x3A
	CALL SUBOPT_0x3B
	PUSH R23
	PUSH R22
	PUSH R31
	PUSH R30
	CALL SUBOPT_0x13
	CALL SUBOPT_0x3B
	POP  R26
	POP  R27
	POP  R24
	POP  R25
	CALL __CPD21
	BRSH _0x9A
_0x99:
	RJMP _0x98
_0x9A:
;			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
	CALL SUBOPT_0x13
	__SUBD1N 1
	MOVW R26,R30
	MOVW R24,R22
	__GETD1S 10
	__SUBD1N 1
	CALL __COMD1
	CALL __ANDD12
	__PUTD1RNS 16,24
;			ofs -= fs->fptr;
	MOVW R26,R16
	ADIW R26,24
	CALL SUBOPT_0x37
	CALL __SUBD21
	__PUTD2S 18
;			clst = fs->curr_clust;
	MOVW R26,R16
	ADIW R26,36
	CALL SUBOPT_0x3C
;		} else {							/* When seek to back cluster, */
	RJMP _0x9B
_0x98:
;			clst = fs->org_clust;			/* start from the first cluster */
	MOVW R26,R16
	ADIW R26,32
	CALL SUBOPT_0x3C
;			fs->curr_clust = clst;
	CALL SUBOPT_0x3D
;		}
_0x9B:
;		while (ofs > bcs) {				/* Cluster following loop */
_0x9C:
	__GETD1S 10
	CALL SUBOPT_0x38
	CALL __CPD12
	BRSH _0x9E
;			clst = get_fat(clst);		/* Follow cluster chain */
	CALL SUBOPT_0xB
	RCALL _get_fat_G000
	__PUTD1S 14
;			if (clst <= 1 || clst >= fs->max_clust) goto fe_abort;
	CALL SUBOPT_0xB
	CALL SUBOPT_0x3
	BRLO _0xA0
	MOVW R26,R16
	ADIW R26,8
	CALL __GETD1P
	CALL SUBOPT_0xB
	CALL __CPD21
	BRLO _0x9F
_0xA0:
	RJMP _0xA2
;			fs->curr_clust = clst;
_0x9F:
	CALL SUBOPT_0x3D
;			fs->fptr += bcs;
	MOVW R30,R16
	CALL SUBOPT_0x36
	__GETD2S 10
	CALL __ADDD12
	MOVW R26,R0
	CALL __PUTDP1
;			ofs -= bcs;
	__GETD2S 10
	CALL SUBOPT_0x3A
	CALL __SUBD12
	__PUTD1S 18
;		}
	RJMP _0x9C
_0x9E:
;		fs->fptr += ofs;
	MOVW R30,R16
	CALL SUBOPT_0x36
	CALL SUBOPT_0x38
	CALL __ADDD12
	MOVW R26,R0
	CALL __PUTDP1
;		sect = clust2sect(clst);		/* Current sector */
	CALL SUBOPT_0xB
	RCALL _clust2sect_G000
	__PUTD1S 6
;		if (!sect) goto fe_abort;
	CALL __CPD10
	BREQ _0xA2
;		fs->csect = (BYTE)(ofs / 512);	/* Sector offset in the cluster */
	CALL SUBOPT_0x38
	CALL SUBOPT_0x33
	__PUTB1RNS 16,3
;		if (ofs % 512)
	CALL SUBOPT_0x3A
	ANDI R31,HIGH(0x1FF)
	SBIW R30,0
	BREQ _0xA4
;			fs->dsect = sect + fs->csect++;
	MOVW R26,R16
	CALL SUBOPT_0x35
	__GETD2S 6
	CALL __CWD1
	CALL __ADDD12
	__PUTD1RNS 16,40
;	}
_0xA4:
;
;	return FR_OK;
_0x97:
	LDI  R30,LOW(0)
	RJMP _0x20A0004
;
;fe_abort:
_0xA2:
;	fs->flag = 0;
	MOVW R26,R16
	ADIW R26,2
	LDI  R30,LOW(0)
	ST   X,R30
;	return FR_DISK_ERR;
	LDI  R30,LOW(1)
_0x20A0004:
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,22
	RET
;}
; .FEND
;#endif
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Create a Directroy Object                                             */
;/*-----------------------------------------------------------------------*/
;#if _USE_DIR
;
;FRESULT pf_opendir (
;	DIR *dj,			/* Pointer to directory object to create */
;	const char *path	/* Pointer to the directory path */
;)
;{
;	FRESULT res;
;	BYTE sp[12], dir[32];
;	FATFS *fs = FatFs;
;
;
;	if (!fs) {				/* Check file system */
;		res = FR_NOT_ENABLED;
;	} else {
;		fs->buf = dir;
;		dj->fn = sp;
;		res = follow_path(dj, path);			/* Follow the path to the directory */
;		if (res == FR_OK) {						/* Follow completed */
;			if (dir[0]) {						/* It is not the root dir */
;				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
;					dj->sclust =
;#if _FS_FAT32
;					((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) |
;#endif
;					LD_WORD(dir+DIR_FstClusLO);
;				} else {						/* The object is not a directory */
;					res = FR_NO_PATH;
;				}
;			}
;			if (res == FR_OK)
;				res = dir_rewind(dj);			/* Rewind dir */
;		}
;		if (res == FR_NO_FILE) res = FR_NO_PATH;
;	}
;
;	return res;
;}
;
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Read Directory Entry in Sequense                                      */
;/*-----------------------------------------------------------------------*/
;
;FRESULT pf_readdir (
;	DIR *dj,			/* Pointer to the open directory object */
;	FILINFO *fno		/* Pointer to file information to return */
;)
;{
;	FRESULT res;
;	BYTE sp[12], dir[32];
;	FATFS *fs = FatFs;
;
;
;	if (!fs) {				/* Check file system */
;		res = FR_NOT_ENABLED;
;	} else {
;		fs->buf = dir;
;		dj->fn = sp;
;		if (!fno) {
;			res = dir_rewind(dj);
;		} else {
;			res = dir_read(dj);
;			if (res == FR_NO_FILE) {
;				dj->sect = 0;
;				res = FR_OK;
;			}
;			if (res == FR_OK) {				/* A valid entry is found */
;				get_fileinfo(dj, fno);		/* Get the object information */
;				res = dir_next(dj);			/* Increment index for next */
;				if (res == FR_NO_FILE) {
;					dj->sect = 0;
;					res = FR_OK;
;				}
;			}
;		}
;	}
;
;	return res;
;}
;
;#endif /* _USE_DIR */
;
;#include <ff.h>
;#include <mmc.c>
;
;
;#include "diskio.h"
;
;#define SCK_DDR                 DDRB
;#define SCK_PRT                 PORTB
;#define SCK_BIT                 7
;
;#define MOSI_DDR                DDRB
;#define MOSI_PRT                PORTB
;#define MOSI_BIT                5
;
;#define MISO_DDR                DDRB
;#define MISO_PRT                PORTB
;#define MISO_BIT                6
;
;#define SD_CS_DDR               DDRB
;#define SD_CS_PRT               PORTB
;#define SD_CS_BIT               4
;
;
;// Port Controls  (Platform dependent)
;#define _BV(pin)                                (1<<(pin))
;#define set(port,pin)                           port |= _BV(pin)
;#define reset(port,pin)                         port &= ~_BV(pin)
;#define SELECT()                                reset(SD_CS_PRT,SD_CS_BIT)   /* MMC CS = L */
;#define DESELECT()                              set  (SD_CS_PRT,SD_CS_BIT)   /* MMC CS = H */
;#define bit_is_set(port,pin)                    (port & _BV(pin))
;#define loop_until_bit_is_set( port, pin)       while (!bit_is_set(port,pin))
;
;/* Alternative macro to receive data fast */
;#define rcv_spi_m(dst)                          SPDR=0xFF; loop_until_bit_is_set(SPSR,SPIF); *(dst)=SPDR
;#define xmit_spi(dat)                           SPDR=(dat); loop_until_bit_is_set(SPSR,SPIF)
;
;/* Definitions for MMC/SDC command */
;#define CMD0            (0x40+0)         /* GO_IDLE_STATE */
;#define CMD1            (0x40+1)         /* SEND_OP_COND (MMC) */
;#define ACMD41          (0xC0+41)        /* SEND_OP_COND (SDC) */
;#define CMD8            (0x40+8)         /* SEND_IF_COND */
;#define CMD16           (0x40+16)        /* SET_BLOCKLEN */
;#define CMD17           (0x40+17)        /* READ_SINGLE_BLOCK */
;#define CMD24           (0x40+24)        /* WRITE_BLOCK */
;#define CMD55           (0x40+55)        /* APP_CMD */
;#define CMD58           (0x40+58)        /* READ_OCR */
;
;
;
;/*-----------------------------------------------------------------------*/
;/* SPI interace                                                          */
;/*-----------------------------------------------------------------------*/
;void init_spi (void)
; 0000 0012         {
_init_spi:
; .FSTART _init_spi
;        set(SD_CS_PRT,SD_CS_BIT);
	SBI  0x18,4
;        reset(SCK_PRT,SCK_BIT);
	CBI  0x18,7
;        set(MOSI_PRT,MOSI_BIT);
	SBI  0x18,5
;        reset(MISO_PRT,MISO_BIT);
	CBI  0x18,6
;
;        set(SD_CS_DDR,SD_CS_BIT);
	SBI  0x17,4
;        set(SCK_DDR,SCK_BIT);
	SBI  0x17,7
;        set(MOSI_DDR,MOSI_BIT);
	SBI  0x17,5
;        reset(MISO_DDR,MISO_BIT);
	CBI  0x17,6
;
;        set(SPCR,SPE);
	SBI  0xD,6
;        set(SPCR,MSTR);
	SBI  0xD,4
;        set(SPSR,SPI2X);
	SBI  0xE,0
;        }
	RET
; .FEND
;
;BYTE rcv_spi (void)
;        {
_rcv_spi:
; .FSTART _rcv_spi
;        SPDR = 0xFF;
	LDI  R30,LOW(255)
	OUT  0xF,R30
;        loop_until_bit_is_set(SPSR, SPIF);
_0xA5:
	SBIS 0xE,7
	RJMP _0xA5
;        return SPDR;
	IN   R30,0xF
	RET
;        }
; .FEND
;
;/*--------------------------------------------------------------------------
;
;   Module Private Functions
;
;---------------------------------------------------------------------------*/
;
;static
;BYTE CardType;
;
;
;/*-----------------------------------------------------------------------*/
;/* Deselect the card and release SPI bus                                 */
;/*-----------------------------------------------------------------------*/
;
;static
;void release_spi (void)
;        {
_release_spi_G000:
; .FSTART _release_spi_G000
;        DESELECT();
	SBI  0x18,4
;        rcv_spi();
	RCALL _rcv_spi
;        }
	RET
; .FEND
;
;
;/*-----------------------------------------------------------------------*/
;/* Send a command packet to MMC                                          */
;/*-----------------------------------------------------------------------*/
;
;static
;BYTE send_cmd
;        (
;        BYTE cmd,                /* Command byte */
;        DWORD arg                /* Argument */
;        )
;        {
_send_cmd_G000:
; .FSTART _send_cmd_G000
;        BYTE n, res;
;        if (cmd & 0x80)         /* ACMD<n> is the command sequense of CMD55-CMD<n> */
	CALL __PUTPARD2
	ST   -Y,R17
	ST   -Y,R16
;	cmd -> Y+6
;	arg -> Y+2
;	n -> R17
;	res -> R16
	LDD  R30,Y+6
	ANDI R30,LOW(0x80)
	BREQ _0xA8
;                {
;                cmd &= 0x7F;
	LDD  R30,Y+6
	ANDI R30,0x7F
	STD  Y+6,R30
;                res = send_cmd(CMD55, 0);
	LDI  R30,LOW(119)
	CALL SUBOPT_0x3E
	MOV  R16,R30
;                if (res > 1) return res;
	CPI  R16,2
	BRLO _0xA9
	LDD  R17,Y+1
	LDD  R16,Y+0
	ADIW R28,7
	RET
;                }
_0xA9:
;
;        /* Select the card */
;        DESELECT();
_0xA8:
	SBI  0x18,4
;        rcv_spi();
	RCALL _rcv_spi
;        SELECT();
	CBI  0x18,4
;        rcv_spi();
	RCALL _rcv_spi
;
;        /* Send a command packet */
;        xmit_spi(cmd);                          /* Start + Command index */
	LDD  R30,Y+6
	OUT  0xF,R30
_0xAA:
	SBIS 0xE,7
	RJMP _0xAA
;        xmit_spi((BYTE)(arg >> 24));            /* Argument[31..24] */
	CALL SUBOPT_0x15
	LDI  R30,LOW(24)
	CALL __LSRD12
	OUT  0xF,R30
_0xAD:
	SBIS 0xE,7
	RJMP _0xAD
;        xmit_spi((BYTE)(arg >> 16));            /* Argument[23..16] */
	CALL SUBOPT_0x13
	CALL __LSRD16
	OUT  0xF,R30
_0xB0:
	SBIS 0xE,7
	RJMP _0xB0
;        xmit_spi((BYTE)(arg >> 8));             /* Argument[15..8] */
	CALL SUBOPT_0x15
	LDI  R30,LOW(8)
	CALL __LSRD12
	OUT  0xF,R30
_0xB3:
	SBIS 0xE,7
	RJMP _0xB3
;        xmit_spi((BYTE)arg);                    /* Argument[7..0] */
	LDD  R30,Y+2
	OUT  0xF,R30
_0xB6:
	SBIS 0xE,7
	RJMP _0xB6
;        n = 0x01;                               /* Dummy CRC + Stop */
	LDI  R17,LOW(1)
;        if (cmd == CMD0) n = 0x95;              /* Valid CRC for CMD0(0) */
	LDD  R26,Y+6
	CPI  R26,LOW(0x40)
	BRNE _0xB9
	LDI  R17,LOW(149)
;        if (cmd == CMD8) n = 0x87;              /* Valid CRC for CMD8(0x1AA) */
_0xB9:
	LDD  R26,Y+6
	CPI  R26,LOW(0x48)
	BRNE _0xBA
	LDI  R17,LOW(135)
;        xmit_spi(n);
_0xBA:
	OUT  0xF,R17
_0xBB:
	SBIS 0xE,7
	RJMP _0xBB
;
;        /* Receive a command response */
;        n = 10;                                 /* Wait for a valid response in timeout of 10 attempts */
	LDI  R17,LOW(10)
;        do
_0xBF:
;                {
;                res = rcv_spi();
	RCALL _rcv_spi
	MOV  R16,R30
;                } while ((res & 0x80) && --n);
	SBRS R16,7
	RJMP _0xC1
	SUBI R17,LOW(1)
	BRNE _0xC2
_0xC1:
	RJMP _0xC0
_0xC2:
	RJMP _0xBF
_0xC0:
;
;        return res;                        /* Return with the response value */
	MOV  R30,R16
	LDD  R17,Y+1
	LDD  R16,Y+0
	RJMP _0x20A0002
;        }
; .FEND
;
;
;
;/*--------------------------------------------------------------------------
;
;   Public Functions
;
;---------------------------------------------------------------------------*/
;
;/*-----------------------------------------------------------------------*/
;/* Initialize Disk Drive                                                 */
;/*-----------------------------------------------------------------------*/
;
;DSTATUS disk_initialize (void)
;        {
_disk_initialize:
; .FSTART _disk_initialize
;        BYTE n, cmd, ty, ocr[4];
;        WORD tmr;
;
;        init_spi();                              /* Initialize USI */
	SBIW R28,4
	CALL __SAVELOCR6
;	n -> R17
;	cmd -> R16
;	ty -> R19
;	ocr -> Y+6
;	tmr -> R20,R21
	RCALL _init_spi
;
;        for (n = 100; n; n--) rcv_spi();        /* Dummy clocks */
	LDI  R17,LOW(100)
_0xC4:
	CPI  R17,0
	BREQ _0xC5
	RCALL _rcv_spi
	SUBI R17,1
	RJMP _0xC4
_0xC5:
	LDI  R19,LOW(0)
;        if (send_cmd(CMD0, 0) == 1) {                        /* Enter Idle state */
	LDI  R30,LOW(64)
	CALL SUBOPT_0x3E
	CPI  R30,LOW(0x1)
	BREQ PC+2
	RJMP _0xC6
;                if (send_cmd(CMD8, 0x1AA) == 1) {        /* SDHC */
	LDI  R30,LOW(72)
	ST   -Y,R30
	__GETD2N 0x1AA
	RCALL _send_cmd_G000
	CPI  R30,LOW(0x1)
	BREQ PC+2
	RJMP _0xC7
;                        for (n = 0; n < 4; n++) ocr[n] = rcv_spi();                /* Get trailing return value of R7 re ...
	LDI  R17,LOW(0)
_0xC9:
	CPI  R17,4
	BRSH _0xCA
	CALL SUBOPT_0x3F
	PUSH R31
	PUSH R30
	RCALL _rcv_spi
	POP  R26
	POP  R27
	ST   X,R30
	SUBI R17,-1
	RJMP _0xC9
_0xCA:
	LDD  R26,Y+8
	CPI  R26,LOW(0x1)
	BRNE _0xCC
	LDD  R26,Y+9
	CPI  R26,LOW(0xAA)
	BREQ _0xCD
_0xCC:
	RJMP _0xCB
_0xCD:
;                                for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;        /* Wait for leavin ...
	__GETWRN 20,21,25000
_0xCF:
	MOV  R0,R20
	OR   R0,R21
	BREQ _0xD1
	LDI  R30,LOW(233)
	ST   -Y,R30
	__GETD2N 0x40000000
	RCALL _send_cmd_G000
	CPI  R30,0
	BRNE _0xD2
_0xD1:
	RJMP _0xD0
_0xD2:
	__SUBWRN 20,21,1
	RJMP _0xCF
_0xD0:
;                                if (tmr && send_cmd(CMD58, 0) == 0) {                /* Check CCS bit in the OCR */
	MOV  R0,R20
	OR   R0,R21
	BREQ _0xD4
	LDI  R30,LOW(122)
	CALL SUBOPT_0x3E
	CPI  R30,0
	BREQ _0xD5
_0xD4:
	RJMP _0xD3
_0xD5:
;                                        for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
	LDI  R17,LOW(0)
_0xD7:
	CPI  R17,4
	BRSH _0xD8
	CALL SUBOPT_0x3F
	PUSH R31
	PUSH R30
	RCALL _rcv_spi
	POP  R26
	POP  R27
	ST   X,R30
	SUBI R17,-1
	RJMP _0xD7
_0xD8:
	LDD  R30,Y+6
	ANDI R30,LOW(0x40)
	BREQ _0xD9
	LDI  R30,LOW(12)
	RJMP _0xDA
_0xD9:
	LDI  R30,LOW(4)
_0xDA:
	MOV  R19,R30
;                                }
;                        }
_0xD3:
;                } else {                                                        /* SDSC or MMC */
_0xCB:
	RJMP _0xDC
_0xC7:
;                        if (send_cmd(ACMD41, 0) <= 1)         {
	LDI  R30,LOW(233)
	CALL SUBOPT_0x3E
	CPI  R30,LOW(0x2)
	BRSH _0xDD
;                                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
	LDI  R19,LOW(2)
	LDI  R16,LOW(233)
;                        } else {
	RJMP _0xDE
_0xDD:
;                                ty = CT_MMC; cmd = CMD1;        /* MMCv3 */
	LDI  R19,LOW(1)
	LDI  R16,LOW(65)
;                        }
_0xDE:
;                        for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;        /* Wait for leaving idle state */
	__GETWRN 20,21,25000
_0xE0:
	MOV  R0,R20
	OR   R0,R21
	BREQ _0xE2
	ST   -Y,R16
	__GETD2N 0x0
	RCALL _send_cmd_G000
	CPI  R30,0
	BRNE _0xE3
_0xE2:
	RJMP _0xE1
_0xE3:
	__SUBWRN 20,21,1
	RJMP _0xE0
_0xE1:
;                        if (!tmr || send_cmd(CMD16, 512) != 0)                        /* Set R/W block length to 512 */
	MOV  R0,R20
	OR   R0,R21
	BREQ _0xE5
	LDI  R30,LOW(80)
	ST   -Y,R30
	CALL SUBOPT_0x39
	RCALL _send_cmd_G000
	CPI  R30,0
	BREQ _0xE4
_0xE5:
;                                ty = 0;
	LDI  R19,LOW(0)
;                }
_0xE4:
_0xDC:
;        }
;        CardType = ty;
_0xC6:
	STS  _CardType_G000,R19
;        release_spi();
	RCALL _release_spi_G000
;        return ty ? 0 : STA_NOINIT;
	CPI  R19,0
	BREQ _0xE7
	LDI  R30,LOW(0)
	RJMP _0xE8
_0xE7:
	LDI  R30,LOW(1)
_0xE8:
	CALL __LOADLOCR6
	ADIW R28,10
	RET
;}
; .FEND
;
;
;/*-----------------------------------------------------------------------*/
;/* Read partial sector                                                   */
;/*-----------------------------------------------------------------------*/
;
;DRESULT disk_readp
;        (
;        BYTE *buff,                /* Pointer to the read buffer (NULL:Read bytes are forwarded to the stream) */
;        DWORD lba,                /* Sector number (LBA) */
;        WORD ofs,                /* Byte offset to read from (0..511) */
;        WORD cnt                /* Number of bytes to read (ofs + cnt mus be <= 512) */
;        )
;        {
_disk_readp:
; .FSTART _disk_readp
;        DRESULT res;
;        BYTE rc;
;        WORD bc;
;
;        if (!(CardType & CT_BLOCK)) lba *= 512;                /* Convert to byte address if needed */
	CALL SUBOPT_0x1B
;	*buff -> Y+12
;	lba -> Y+8
;	ofs -> Y+6
;	cnt -> Y+4
;	res -> R17
;	rc -> R16
;	bc -> R18,R19
	LDS  R30,_CardType_G000
	ANDI R30,LOW(0x8)
	BRNE _0xEA
	__GETD1S 8
	CALL SUBOPT_0x39
	CALL __MULD12U
	__PUTD1S 8
;        res = RES_ERROR;
_0xEA:
	LDI  R17,LOW(1)
;        if (send_cmd(CMD17, lba) == 0)                 /* READ_SINGLE_BLOCK */
	LDI  R30,LOW(81)
	ST   -Y,R30
	CALL SUBOPT_0x2C
	RCALL _send_cmd_G000
	CPI  R30,0
	BREQ PC+2
	RJMP _0xEB
;                {
;                bc = 30000;
	__GETWRN 18,19,30000
;                do                                                         /* Wait for data packet in timeout of 100ms * ...
_0xED:
;                        {
;                        rc = rcv_spi();
	RCALL _rcv_spi
	MOV  R16,R30
;                        } while (rc == 0xFF && --bc);
	CPI  R16,255
	BRNE _0xEF
	__SUBWRN 18,19,1
	BRNE _0xF0
_0xEF:
	RJMP _0xEE
_0xF0:
	RJMP _0xED
_0xEE:
;                if (rc == 0xFE)                                 /* A data packet arrived */
	CPI  R16,254
	BRNE _0xF1
;                        {
;                        bc = 514 - ofs - cnt;
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R30,LOW(514)
	LDI  R31,HIGH(514)
	SUB  R30,R26
	SBC  R31,R27
	MOVW R26,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SUB  R26,R30
	SBC  R27,R31
	MOVW R18,R26
;                        /* Skip leading bytes */
;                        if (ofs)
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SBIW R30,0
	BREQ _0xF2
;                                {
;                                do rcv_spi(); while (--ofs);
_0xF4:
	RCALL _rcv_spi
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	SBIW R30,1
	STD  Y+6,R30
	STD  Y+6+1,R31
	BRNE _0xF4
;                                }
;
;                        /* Receive a part of the sector */
;                        if (buff)         /* Store data to the memory */
_0xF2:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	SBIW R30,0
	BREQ _0xF6
;                                {
;                                do
_0xF8:
;                                        *buff++ = rcv_spi();
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	ADIW R30,1
	STD  Y+12,R30
	STD  Y+12+1,R31
	SBIW R30,1
	PUSH R31
	PUSH R30
	RCALL _rcv_spi
	POP  R26
	POP  R27
	ST   X,R30
;                                while (--cnt);
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	SBIW R30,1
	STD  Y+4,R30
	STD  Y+4+1,R31
	BRNE _0xF8
;                                }
;                        do rcv_spi(); while (--bc);
_0xF6:
_0xFB:
	RCALL _rcv_spi
	MOVW R30,R18
	SBIW R30,1
	MOVW R18,R30
	BRNE _0xFB
;                        res = RES_OK;
	LDI  R17,LOW(0)
;                        }
;                }
_0xF1:
;        release_spi();
_0xEB:
	RCALL _release_spi_G000
;        return res;
	MOV  R30,R17
	CALL __LOADLOCR4
	ADIW R28,14
	RET
;        }
; .FEND
;
;
;
;/*-----------------------------------------------------------------------*/
;/* Write partial sector                                                  */
;/*-----------------------------------------------------------------------*/
;DRESULT disk_writep
;        (
;        const BYTE *buff,        /* Pointer to the bytes to be written (NULL:Initiate/Finalize sector write) */
;        DWORD sa                        /* Number of bytes to send, Sector number (LBA) or zero */
;        )
;        {
;        DRESULT res;
;        WORD bc;
;        static WORD wc;
;        res = RES_ERROR;
;	*buff -> Y+8
;	sa -> Y+4
;	res -> R17
;	bc -> R18,R19
;
;        if (buff)                 /* Send data bytes */
;                {
;                bc = (WORD)sa;
;                while (bc && wc)                 /* Send data bytes to the card */
;                        {
;                        xmit_spi(*buff++);
;                        wc--; bc--;
;                        }
;                res = RES_OK;
;                }
;        else
;                {
;                if (sa)         /* Initiate sector write process */
;                        {
;                        if (!(CardType & CT_BLOCK)) sa *= 512;        /* Convert to byte address if needed */
;                        if (send_cmd(CMD24, sa) == 0)                         /* WRITE_SINGLE_BLOCK */
;                                {
;                                xmit_spi(0xFF); xmit_spi(0xFE);                /* Data block header */
;                                wc = 512;                                                        /* Set byte counter */
;                                res = RES_OK;
;                                }
;                        }
;                else         /* Finalize sector write process */
;                        {
;                        bc = wc + 2;
;                        while (bc--) xmit_spi(0);        /* Fill left bytes and CRC with zeros */
;                        if ((rcv_spi() & 0x1F) == 0x05)         /* Receive data resp and wait for end of write process i ...
;                                {
;                                for (bc = 65000; rcv_spi() != 0xFF && bc; bc--) ;        /* Wait ready */
;                                if (bc) res = RES_OK;
;                                }
;                        release_spi();
;                        }
;                }
;        return res;
;        }
;
;#define xtal 16000000
;
;//================================ LCD CONFIGURATIONS =======================================
; #define   PORTRAIT                /* It used in the "tftlcd_functions.h" library
;                                                             ,you can change it to LANSCAPE*/
;
; //Define pins to connect to the display
; #define LCD_CONTROLPORT_DDR  DDRD
; #define LCD_CONTROLPORT_PORT PORTD
; #define LCD_CONTROLPORT_PIN  PIND
;
; #define LCD_RST_DDR  DDRD
; #define LCD_RST_PORT PORTD
; #define LCD_RST_PIN  4
;
; #define LCD_RS_DDR  DDRD
; #define LCD_RS_PORT PORTD
; #define LCD_RS_PIN  2
;
; #define LCD_CS_DDR  DDRD
; #define LCD_CS_PORT PORTD
; #define LCD_CS_PIN  3
;
; #define LCD_RD_DDR  DDRD
; #define LCD_RD_PORT PORTD
; #define LCD_RD_PIN  0
;
; #define LCD_WR_DDR  DDRD
; #define LCD_WR_PORT PORTD
; #define LCD_WR_PIN  1
;
; #define LCD_DATAPORT_MSB_DDR   DDRA
; #define LCD_DATAPORT_MSB_PORT  PORTA
; #define LCD_DATAPORT_MSB_PIN   PINA
;
; #define LCD_DATAPORT_LSB_DDR   DDRC
; #define LCD_DATAPORT_LSB_PORT  PORTC
; #define LCD_DATAPORT_LSB_PIN   PINC
;
; #include "tftlcd_functions.h"    // The main header to run ili9325 display
_lcd_write_index_register:
; .FSTART _lcd_write_index_register
	ST   -Y,R26
;	ins -> Y+0
	CBI  0x12,3
	CBI  0x12,2
	LDI  R30,LOW(0)
	CALL SUBOPT_0x40
	ADIW R28,1
	RET
; .FEND
_lcd_write_wdr:
; .FSTART _lcd_write_wdr
	ST   -Y,R27
	ST   -Y,R26
;	data -> Y+0
	CBI  0x12,3
	SBI  0x12,2
	LD   R30,Y
	LDD  R31,Y+1
	CALL __ASRW8
	CALL SUBOPT_0x40
	ADIW R28,2
	RET
; .FEND
_lcd_read_rdr:
; .FSTART _lcd_read_rdr
	CALL __SAVELOCR6
;	data_lsb -> R16,R17
;	data_msb -> R18,R19
;	rdr_data -> R20,R21
	LDI  R30,LOW(0)
	OUT  0x1B,R30
	OUT  0x15,R30
	OUT  0x1A,R30
	OUT  0x14,R30
	CBI  0x12,0
	SBI  0x12,1
	CBI  0x12,3
	IN   R16,19
	CLR  R17
	IN   R18,25
	CLR  R19
	MOV  R31,R18
	LDI  R30,LOW(0)
	OR   R30,R16
	OR   R31,R17
	MOVW R20,R30
	SBI  0x12,3
	SBI  0x12,0
	SBI  0x12,1
	LDI  R30,LOW(255)
	OUT  0x1A,R30
	OUT  0x14,R30
	MOVW R30,R20
	CALL __LOADLOCR6
	RJMP _0x20A0003
; .FEND
_lcd_clear_screen:
; .FSTART _lcd_clear_screen
	CALL SUBOPT_0x41
;	counter -> Y+0
_0x13F:
	CALL SUBOPT_0x42
	BRSH _0x140
	LDI  R26,LOW(65535)
	LDI  R27,HIGH(65535)
	RCALL _lcd_write_wdr
	CALL SUBOPT_0x43
	RJMP _0x13F
_0x140:
	RJMP _0x20A0001
; .FEND
_lcd_background_color:
; .FSTART _lcd_background_color
	ST   -Y,R27
	ST   -Y,R26
	CALL SUBOPT_0x41
;	color -> Y+4
;	counter -> Y+0
_0x142:
	CALL SUBOPT_0x42
	BRSH _0x143
	CALL SUBOPT_0x44
	CALL SUBOPT_0x43
	RJMP _0x142
_0x143:
	RJMP _0x20A0003
; .FEND
;	index -> Y+2
;	argument -> Y+0
;	color -> Y+2
;	counter -> R16,R17
;	x0 -> Y+26
;	y0 -> Y+24
;	N -> Y+22
;	gray -> Y+20
;	*img -> Y+18
;	counter -> R16,R17
;	X_S -> R18,R19
;	Y_S -> R20,R21
;	col -> Y+16
;	H -> Y+14
;	V -> Y+12
;	DX -> Y+10
;	DY -> Y+8
;	raw_counter -> Y+6
;	X0 -> Y+10
;	Y0 -> Y+8
;	DX -> Y+6
;	DY -> Y+4
;	S_X -> Y+2
;	S_Y -> Y+0
;	color -> Y+0
;	ef -> Y+0
;	character -> Y+6
;	counter_x -> R16,R17
;	counter_y -> R18,R19
;	letter_length -> R21
;	flag_p -> R20
;	character -> Y+12
;	size -> Y+10
;	counter_x -> R16,R17
;	counter_y -> R18,R19
;	i -> R20,R21
;	j -> Y+8
;	letter_length -> Y+7
;	flag_p -> Y+6
;	x -> Y+2
;	y -> Y+0
;	color -> Y+0
;	*string -> Y+47
;	size -> Y+45
;	letter -> R17
;	nt_letter -> R16
;	pr_letter -> R19
;	CN -> R18
;	CP -> R21
;	pr_CN -> R20
;	nt_CP -> Y+44
;	place -> Y+43
;	flag1 -> Y+42
;	letter_counter -> Y+41
;	letter_count -> Y+40
;	length -> Y+39
;	enter -> Y+38
;	text_buffer -> Y+6
;	*uni_str -> Y+8
;	*ascii_str -> Y+6
;	counter -> R16,R17
;	Uch -> R18,R19
;	chl -> R21
;	chh -> R20
_lcd_init:
; .FSTART _lcd_init
	LDI  R30,LOW(31)
	OUT  0x12,R30
	OUT  0x11,R30
	LDI  R30,LOW(255)
	OUT  0x1A,R30
	OUT  0x14,R30
	CBI  0x12,4
	LDI  R26,LOW(1)
	LDI  R27,0
	CALL _delay_ms
	SBI  0x12,4
	LDI  R26,LOW(227)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(12296)
	LDI  R27,HIGH(12296)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(231)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(18)
	LDI  R27,0
	RCALL _lcd_write_wdr
	LDI  R26,LOW(239)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(4657)
	LDI  R27,HIGH(4657)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(0)
	CALL SUBOPT_0x45
	CALL SUBOPT_0x46
	LDI  R26,LOW(1)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(256)
	LDI  R27,HIGH(256)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(2)
	CALL SUBOPT_0x47
	LDI  R26,LOW(3)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(48)
	LDI  R27,0
	RCALL _lcd_write_wdr
	LDI  R26,LOW(4)
	CALL SUBOPT_0x48
	LDI  R26,LOW(8)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(514)
	LDI  R27,HIGH(514)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(9)
	CALL SUBOPT_0x48
	LDI  R26,LOW(10)
	CALL SUBOPT_0x48
	LDI  R26,LOW(12)
	CALL SUBOPT_0x48
	LDI  R26,LOW(13)
	CALL SUBOPT_0x48
	LDI  R26,LOW(15)
	CALL SUBOPT_0x48
	LDI  R26,LOW(16)
	CALL SUBOPT_0x48
	CALL SUBOPT_0x49
	LDI  R26,LOW(18)
	CALL SUBOPT_0x48
	LDI  R26,LOW(19)
	CALL SUBOPT_0x48
	LDI  R26,LOW(200)
	LDI  R27,0
	CALL _delay_ms
	LDI  R26,LOW(16)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(5776)
	LDI  R27,HIGH(5776)
	RCALL _lcd_write_wdr
	CALL SUBOPT_0x49
	CALL SUBOPT_0x46
	LDI  R26,LOW(18)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(26)
	LDI  R27,0
	RCALL _lcd_write_wdr
	CALL SUBOPT_0x46
	LDI  R26,LOW(19)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(6144)
	LDI  R27,HIGH(6144)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(41)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(42)
	LDI  R27,0
	RCALL _lcd_write_wdr
	CALL SUBOPT_0x46
	LDI  R26,LOW(32)
	CALL SUBOPT_0x48
	LDI  R26,LOW(33)
	CALL SUBOPT_0x48
	LDI  R26,LOW(48)
	CALL SUBOPT_0x48
	LDI  R26,LOW(49)
	CALL SUBOPT_0x48
	LDI  R26,LOW(50)
	CALL SUBOPT_0x48
	LDI  R26,LOW(53)
	CALL SUBOPT_0x48
	LDI  R26,LOW(54)
	CALL SUBOPT_0x48
	LDI  R26,LOW(55)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(1030)
	LDI  R27,HIGH(1030)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(56)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(6)
	LDI  R27,0
	RCALL _lcd_write_wdr
	LDI  R26,LOW(57)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(1028)
	LDI  R27,HIGH(1028)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(60)
	CALL SUBOPT_0x47
	LDI  R26,LOW(61)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(2568)
	LDI  R27,HIGH(2568)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(80)
	CALL SUBOPT_0x48
	CALL SUBOPT_0x4A
	LDI  R26,LOW(82)
	CALL SUBOPT_0x48
	CALL SUBOPT_0x4B
	LDI  R26,LOW(96)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(42752)
	LDI  R27,HIGH(42752)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(97)
	CALL SUBOPT_0x45
	LDI  R26,LOW(106)
	CALL SUBOPT_0x48
	LDI  R26,LOW(128)
	CALL SUBOPT_0x48
	LDI  R26,LOW(129)
	CALL SUBOPT_0x48
	LDI  R26,LOW(130)
	CALL SUBOPT_0x48
	LDI  R26,LOW(131)
	CALL SUBOPT_0x48
	LDI  R26,LOW(132)
	CALL SUBOPT_0x48
	LDI  R26,LOW(133)
	CALL SUBOPT_0x48
	LDI  R26,LOW(144)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(16)
	LDI  R27,0
	RCALL _lcd_write_wdr
	LDI  R26,LOW(146)
	CALL SUBOPT_0x48
	LDI  R26,LOW(147)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(3)
	LDI  R27,0
	RCALL _lcd_write_wdr
	LDI  R26,LOW(149)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(272)
	LDI  R27,HIGH(272)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(151)
	CALL SUBOPT_0x48
	LDI  R26,LOW(152)
	CALL SUBOPT_0x48
	LDI  R26,LOW(7)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(307)
	LDI  R27,HIGH(307)
	RCALL _lcd_write_wdr
	LDI  R26,LOW(43)
	RCALL _lcd_write_index_register
	LDI  R26,LOW(13)
	LDI  R27,0
	RCALL _lcd_write_wdr
	RCALL _lcd_clear_screen
	RET
; .FEND
_lcd_write_pixel:
; .FSTART _lcd_write_pixel
	ST   -Y,R27
	ST   -Y,R26
;	x -> Y+4
;	y -> Y+2
;	color -> Y+0
	LDI  R26,LOW(32)
	CALL SUBOPT_0x4C
	CALL SUBOPT_0x4D
	LDI  R26,LOW(81)
	CALL SUBOPT_0x4C
	CALL SUBOPT_0x4E
	LD   R26,Y
	LDD  R27,Y+1
	RCALL _lcd_write_wdr
	RJMP _0x20A0003
; .FEND
_lcd_read_pixel:
; .FSTART _lcd_read_pixel
	ST   -Y,R27
	ST   -Y,R26
	ST   -Y,R17
	ST   -Y,R16
;	x -> Y+4
;	y -> Y+2
;	pixel -> R16,R17
	LDI  R26,LOW(32)
	CALL SUBOPT_0x4C
	CALL SUBOPT_0x4D
	LDI  R26,LOW(81)
	CALL SUBOPT_0x4C
	CALL SUBOPT_0x4E
	RCALL _lcd_read_rdr
	MOVW R16,R30
	LDD  R17,Y+1
	LDD  R16,Y+0
_0x20A0003:
	ADIW R28,6
	RET
; .FEND
_lcd_draw_line:
; .FSTART _lcd_draw_line
	ST   -Y,R27
	ST   -Y,R26
	SBIW R28,2
	CALL __SAVELOCR6
;	x0 -> Y+16
;	y0 -> Y+14
;	x1 -> Y+12
;	y1 -> Y+10
;	color -> Y+8
;	dy -> R16,R17
;	dx -> R18,R19
;	stepx -> R20,R21
;	stepy -> Y+6
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	LDD  R30,Y+10
	LDD  R31,Y+10+1
	SUB  R30,R26
	SBC  R31,R27
	MOVW R16,R30
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	SUB  R30,R26
	SBC  R31,R27
	MOVW R18,R30
	TST  R17
	BRPL _0x227
	MOVW R30,R16
	CALL __ANEGW1
	MOVW R16,R30
	LDI  R30,LOW(65535)
	LDI  R31,HIGH(65535)
	RJMP _0x2EE
_0x227:
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
_0x2EE:
	STD  Y+6,R30
	STD  Y+6+1,R31
	TST  R19
	BRPL _0x229
	MOVW R30,R18
	CALL __ANEGW1
	MOVW R18,R30
	__GETWRN 20,21,-1
	RJMP _0x22A
_0x229:
	__GETWRN 20,21,1
_0x22A:
	LSL  R16
	ROL  R17
	LSL  R18
	ROL  R19
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+16
	LDD  R31,Y+16+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	RCALL _lcd_write_pixel
	__CPWRR 16,17,18,19
	BRGE _0x22B
	SBIW R28,2
;	x0 -> Y+18
;	y0 -> Y+16
;	x1 -> Y+14
;	y1 -> Y+12
;	color -> Y+10
;	stepy -> Y+8
;	fraction -> Y+0
	MOVW R30,R18
	ASR  R31
	ROR  R30
	MOVW R26,R30
	MOVW R30,R16
	SUB  R30,R26
	SBC  R31,R27
	ST   Y,R30
	STD  Y+1,R31
_0x22C:
	LDD  R30,Y+14
	LDD  R31,Y+14+1
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	CP   R30,R26
	CPC  R31,R27
	BREQ _0x22E
	LDD  R26,Y+1
	TST  R26
	BRMI _0x22F
	CALL SUBOPT_0x4F
	LD   R30,Y
	LDD  R31,Y+1
	SUB  R30,R18
	SBC  R31,R19
	ST   Y,R30
	STD  Y+1,R31
_0x22F:
	CALL SUBOPT_0x50
	MOVW R30,R16
	CALL SUBOPT_0x51
	RJMP _0x22C
_0x22E:
	RJMP _0x2EF
_0x22B:
	SBIW R28,2
;	x0 -> Y+18
;	y0 -> Y+16
;	x1 -> Y+14
;	y1 -> Y+12
;	color -> Y+10
;	stepy -> Y+8
;	fraction -> Y+0
	MOVW R30,R16
	ASR  R31
	ROR  R30
	MOVW R26,R30
	MOVW R30,R18
	SUB  R30,R26
	SBC  R31,R27
	ST   Y,R30
	STD  Y+1,R31
_0x231:
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	CP   R30,R26
	CPC  R31,R27
	BREQ _0x233
	LDD  R26,Y+1
	TST  R26
	BRMI _0x234
	CALL SUBOPT_0x50
	LD   R30,Y
	LDD  R31,Y+1
	SUB  R30,R16
	SBC  R31,R17
	ST   Y,R30
	STD  Y+1,R31
_0x234:
	CALL SUBOPT_0x4F
	MOVW R30,R18
	CALL SUBOPT_0x51
	RJMP _0x231
_0x233:
_0x2EF:
	ADIW R28,2
	CALL __LOADLOCR6
	ADIW R28,18
	RET
; .FEND
_lcd_draw_rectangle:
; .FSTART _lcd_draw_rectangle
	ST   -Y,R27
	ST   -Y,R26
;	x0 -> Y+9
;	y0 -> Y+7
;	x1 -> Y+5
;	y1 -> Y+3
;	fill -> Y+2
;	color -> Y+0
	LDD  R30,Y+2
	CPI  R30,0
	BREQ _0x235
	SBIW R28,3
;	x0 -> Y+12
;	y0 -> Y+10
;	x1 -> Y+8
;	y1 -> Y+6
;	fill -> Y+5
;	color -> Y+3
;	counter_x -> Y+1
;	counter_y -> Y+0
	LDI  R26,LOW(32)
	CALL SUBOPT_0x52
	LDI  R26,LOW(33)
	CALL SUBOPT_0x53
	LDI  R26,LOW(80)
	CALL SUBOPT_0x52
	LDI  R26,LOW(81)
	RCALL _lcd_write_index_register
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RCALL _lcd_write_wdr
	LDI  R26,LOW(82)
	CALL SUBOPT_0x53
	LDI  R26,LOW(83)
	RCALL _lcd_write_index_register
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	RCALL _lcd_write_wdr
	LDI  R26,LOW(34)
	RCALL _lcd_write_index_register
	LDD  R30,Y+10
	ST   Y,R30
_0x237:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	LD   R26,Y
	LDI  R27,0
	CP   R30,R26
	CPC  R31,R27
	BRLT _0x238
	LDD  R30,Y+12
	LDD  R31,Y+12+1
	STD  Y+1,R30
	STD  Y+1+1,R31
_0x23A:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R26,Y+1
	LDD  R27,Y+1+1
	CP   R30,R26
	CPC  R31,R27
	BRLO _0x23B
	LDD  R26,Y+3
	LDD  R27,Y+3+1
	RCALL _lcd_write_wdr
	LDD  R30,Y+1
	LDD  R31,Y+1+1
	ADIW R30,1
	STD  Y+1,R30
	STD  Y+1+1,R31
	RJMP _0x23A
_0x23B:
	LD   R30,Y
	SUBI R30,-LOW(1)
	ST   Y,R30
	RJMP _0x237
_0x238:
	ADIW R28,3
	RJMP _0x23C
_0x235:
	CALL SUBOPT_0x54
	CALL SUBOPT_0x54
	CALL SUBOPT_0x54
	CALL SUBOPT_0x55
	CALL SUBOPT_0x56
	CALL SUBOPT_0x54
	CALL SUBOPT_0x54
	CALL SUBOPT_0x54
	CALL SUBOPT_0x56
	CALL SUBOPT_0x57
	CALL SUBOPT_0x54
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RCALL _lcd_draw_line
	CALL SUBOPT_0x54
	CALL SUBOPT_0x57
	CALL SUBOPT_0x55
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	RCALL _lcd_draw_line
_0x23C:
	ADIW R28,11
	RET
; .FEND
_lcd_draw_circle:
; .FSTART _lcd_draw_circle
	CALL SUBOPT_0x0
;	x0 -> Y+13
;	y0 -> Y+11
;	radius -> Y+9
;	fill -> Y+8
;	color -> Y+6
;	x_offset -> R16,R17
;	y_offset -> R18,R19
;	error -> R20,R21
	__GETWRN 16,17,0
	__GETWRS 18,19,9
	LDD  R26,Y+9
	LDD  R27,Y+9+1
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	SUB  R30,R26
	SBC  R31,R27
	MOVW R20,R30
_0x23E:
	LDD  R30,Y+8
	CPI  R30,0
	BREQ _0x240
	CALL SUBOPT_0x58
	MOVW R30,R18
	CALL SUBOPT_0x59
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x5B
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x58
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x5A
	LDD  R30,Y+17
	LDD  R31,Y+17+1
	SUB  R30,R18
	SBC  R31,R19
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x5D
	MOVW R30,R16
	CALL SUBOPT_0x59
	CALL SUBOPT_0x5B
	CALL SUBOPT_0x5A
	CALL SUBOPT_0x5C
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x58
	CALL SUBOPT_0x5B
	LDD  R30,Y+17
	LDD  R31,Y+17+1
	SUB  R30,R16
	SBC  R31,R17
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x5C
	RJMP _0x241
_0x240:
	CALL SUBOPT_0x5E
	CALL SUBOPT_0x5F
	CALL SUBOPT_0x60
	CALL SUBOPT_0x5F
	CALL SUBOPT_0x5E
	CALL SUBOPT_0x60
	CALL SUBOPT_0x58
	CALL SUBOPT_0x5F
	CALL SUBOPT_0x60
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x5E
	CALL SUBOPT_0x60
	CALL SUBOPT_0x5F
	CALL SUBOPT_0x58
	CALL SUBOPT_0x60
	CALL SUBOPT_0x5E
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x60
	CALL SUBOPT_0x58
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x60
	CALL SUBOPT_0x5D
	CALL SUBOPT_0x58
	CALL SUBOPT_0x60
_0x241:
	TST  R21
	BRPL _0x242
	MOVW R30,R16
	__ADDWRN 16,17,1
	LSL  R30
	ROL  R31
	ADIW R30,3
	RJMP _0x2F0
_0x242:
	PUSH R17
	PUSH R16
	__ADDWRN 16,17,1
	MOVW R30,R18
	__SUBWRN 18,19,1
	POP  R26
	POP  R27
	CALL __SWAPW12
	SUB  R30,R26
	SBC  R31,R27
	LSL  R30
	ROL  R31
	ADIW R30,5
_0x2F0:
	__ADDWRR 20,21,30,31
	__CPWRR 18,19,16,17
	BRLT _0x23F
	RJMP _0x23E
_0x23F:
	CALL __LOADLOCR6
	ADIW R28,15
	RET
; .FEND
;	x -> Y+12
;	y -> Y+10
;	*pointer -> Y+8
;	counter -> Y+4
;	compare_value -> Y+0
_lcd_putchar:
; .FSTART _lcd_putchar
	CALL SUBOPT_0x0
;	character -> Y+11
;	forground_color -> Y+9
;	transparent_mode -> Y+8
;	background_color -> Y+6
;	width_counter -> R16,R17
;	length_counter -> R18,R19
;	character_segment_data -> R21
	__GETWRN 18,19,0
_0x248:
	__CPWRN 18,19,16
	BRLT PC+2
	RJMP _0x249
	LDD  R30,Y+11
	LDI  R31,0
	LSL  R30
	ROL  R31
	CALL __LSLW4
	SUBI R30,LOW(-_font12x16*2)
	SBCI R31,HIGH(-_font12x16*2)
	MOVW R26,R30
	MOVW R30,R18
	LSL  R30
	ROL  R31
	ADD  R30,R26
	ADC  R31,R27
	LPM  R30,Z
	MOV  R21,R30
	__GETWRN 16,17,0
_0x24B:
	__CPWRN 16,17,8
	BRGE _0x24C
	MOV  R30,R16
	LDI  R26,LOW(128)
	CALL __LSRB12
	AND  R30,R21
	BREQ _0x24D
	CALL SUBOPT_0x61
	LDD  R26,Y+13
	LDD  R27,Y+13+1
	RJMP _0x2F1
_0x24D:
	LDD  R30,Y+8
	CPI  R30,0
	BRNE _0x24F
	CALL SUBOPT_0x61
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	RJMP _0x2F1
_0x24F:
	LDS  R26,_x_text
	LDI  R30,LOW(8)
	MUL  R30,R26
	MOVW R30,R0
	ADD  R30,R16
	ADC  R31,R17
	MOVW R22,R30
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x62
	ST   -Y,R31
	ST   -Y,R30
	ST   -Y,R23
	ST   -Y,R22
	CALL SUBOPT_0x62
	MOVW R26,R30
	RCALL _lcd_read_pixel
	MOVW R26,R30
_0x2F1:
	RCALL _lcd_write_pixel
	__ADDWRN 16,17,1
	RJMP _0x24B
_0x24C:
	__ADDWRN 18,19,1
	RJMP _0x248
_0x249:
	LDS  R26,_x_text
	SUBI R26,-LOW(1)
	STS  _x_text,R26
	CPI  R26,LOW(0x1E)
	BRLO _0x251
	LDI  R30,LOW(0)
	STS  _x_text,R30
	LDS  R26,_y_text
	SUBI R26,-LOW(1)
	STS  _y_text,R26
	CPI  R26,LOW(0x14)
	BRLO _0x252
	STS  _y_text,R30
_0x252:
_0x251:
	CALL __LOADLOCR6
	ADIW R28,12
	RET
; .FEND
_lcd_putsf:
; .FSTART _lcd_putsf
	ST   -Y,R27
	ST   -Y,R26
;	*string -> Y+5
;	forground_color -> Y+3
;	background_color_activation -> Y+2
;	background_color -> Y+0
_0x253:
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	LPM  R30,Z
	CPI  R30,0
	BREQ _0x255
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ADIW R30,1
	STD  Y+5,R30
	STD  Y+5+1,R31
	SBIW R30,1
	LPM  R30,Z
	ST   -Y,R30
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+5
	ST   -Y,R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	RCALL _lcd_putchar
	RJMP _0x253
_0x255:
_0x20A0002:
	ADIW R28,7
	RET
; .FEND
;	*string -> Y+5
;	forground_color -> Y+3
;	background_color_activation -> Y+2
;	background_color -> Y+0
;	x0 -> Y+30
;	y0 -> Y+28
;	d -> Y+26
;	l -> Y+24
;	alpha -> Y+22
;	color -> Y+20
;	alpha1 -> Y+16
;	teta -> Y+12
;	r -> Y+8
;	x1 -> R16,R17
;	x2 -> R18,R19
;	y1 -> R20,R21
;	y2 -> Y+6
;	x0 -> Y+17
;	y0 -> Y+15
;	x1 -> Y+13
;	y1 -> Y+11
;	rad -> Y+9
;	fill -> Y+8
;	color -> Y+6
;	a -> R16,R17
;	b -> R18,R19
;	P -> R20,R21
;	x0 -> Y+21
;	y0 -> Y+19
;	a -> Y+17
;	b -> Y+15
;	fill -> Y+14
;	color -> Y+12
;	x11 -> R16,R17
;	x12 -> R18,R19
;	x21 -> R20,R21
;	x22 -> Y+10
;	y1 -> Y+8
;	y2 -> Y+6
_lcd_gotoxy:
; .FSTART _lcd_gotoxy
	ST   -Y,R27
	ST   -Y,R26
;	x -> Y+2
;	y -> Y+0
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	SBIW R26,30
	BRGE _0x273
	LD   R26,Y
	LDD  R27,Y+1
	SBIW R26,20
	BRLT _0x272
_0x273:
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(240)
	LDI  R31,HIGH(240)
	CALL __DIVW21
	MOVW R26,R30
	LDI  R30,LOW(8)
	LDI  R31,HIGH(8)
	CALL __DIVW21
	LD   R26,Y
	LDD  R27,Y+1
	ADD  R30,R26
	ADC  R31,R27
	ST   Y,R30
	STD  Y+1,R31
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	LDI  R30,LOW(30)
	LDI  R31,HIGH(30)
	CALL __MODW21
	STD  Y+2,R30
	STD  Y+2+1,R31
_0x272:
	LDD  R30,Y+2
	STS  _x_text,R30
	LD   R30,Y
	STS  _y_text,R30
_0x20A0001:
	ADIW R28,4
	RET
; .FEND
;	x0 -> Y+19
;	y0 -> Y+17
;	x1 -> Y+15
;	y1 -> Y+13
;	font_color -> Y+11
;	*string -> Y+9
;	width_counter -> R16,R17
;	length_counter -> R18,R19
;	xx -> R20,R21
;	character_segment_data -> Y+8
;	character -> Y+7
;	s -> Y+6
;	a -> R16,R17
;	R -> R18,R19
;	G -> R20,R21
;	B -> Y+8
;	b -> Y+6
;
; //================================================================
;
; //declare your global variables here
; #define BUFFER_SIZE 721               //every row is 240 RGB pixels and 240*3=720
; unsigned char buffer[BUFFER_SIZE];    //The data of every row will be saved in this buffer
; FATFS Fs;
; WORD w_br;                            //used in pf_read function
; FRESULT _result1;                     //used to check the result(explained in the papers)
; FRESULT res;
; WORD WriteIndex;
; unsigned long int x=0,y=0;
; unsigned char MYBUFFER[7]={0};
; unsigned int ADDR=0;                  //Address of data we want to read in bmp file
; unsigned int i1=0,i2=0,i3=0;               //Loop counters
; unsigned char r,g,b;                  //Used for merging pixel colors in bmp to an int number
; unsigned long int color=0,tcolor;
; unsigned char count=0xffff,count1=0;

	.DSEG
;
;
;/***declaration of subfunctions***/
;
;  unsigned long int bmp_height(void){        //subfunction to get bmp picture height
; 0000 0052 unsigned long int bmp_height(void){

	.CSEG
; 0000 0053     unsigned long int height;
; 0000 0054     pf_lseek(0x16);                          /* The bmp file contains much informations except
; 0000 0055                                                 pixels colors such as the volume and the height and
; 0000 0056                                                 the width of the pic and in address 0x16 there are 4 bytes show
; 0000 0057                                                 the height of the bmp pic */
;	height -> Y+0
; 0000 0058     pf_read(&buffer,4,&w_br);
; 0000 0059     height=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];//calculations
; 0000 005A     return height;
; 0000 005B   }
;
;  unsigned long int bmp_width(void){         //subfunction to get bmp picture width
; 0000 005D unsigned long int bmp_width(void){
; 0000 005E     unsigned long int width=0;
; 0000 005F     pf_lseek(0x12);                         /* The bmp file contains much informations except
; 0000 0060                                                 pixels colors such as the volume and the height and
; 0000 0061                                                 the width of the pic and in address 0x12 there are 4 bytes show
; 0000 0062                                                 the width of the bmp pic */
;	width -> Y+0
; 0000 0063     pf_read(&buffer,4,&w_br);
; 0000 0064     width=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0]; //calculations
; 0000 0065     return width;
; 0000 0066   }
;
; void showbmp(void){
; 0000 0068 void showbmp(void){
_showbmp:
; .FSTART _showbmp
; 0000 0069 
; 0000 006A         //First settings
; 0000 006B      lcd_write_index_register(TS_INS_GRAM_ADX);
	LDI  R26,LOW(32)
	CALL SUBOPT_0x48
; 0000 006C      lcd_write_wdr(0);
; 0000 006D      lcd_write_index_register(TS_INS_START_ADX);
	LDI  R26,LOW(80)
	CALL SUBOPT_0x48
; 0000 006E      lcd_write_wdr(0);
; 0000 006F      lcd_write_index_register(TS_INS_END_ADX);
	CALL SUBOPT_0x4A
; 0000 0070      lcd_write_wdr(239);
; 0000 0071 
; 0000 0072      lcd_write_index_register(TS_INS_END_ADY);
	CALL SUBOPT_0x4B
; 0000 0073      lcd_write_wdr(319);
; 0000 0074      lcd_write_index_register(TS_INS_START_ADY);
	LDI  R26,LOW(82)
	CALL SUBOPT_0x48
; 0000 0075      lcd_write_wdr(0);
; 0000 0076      for(y=0;y<321;y++){        //main loop to put the image
	CALL SUBOPT_0x63
_0x290:
	LDS  R26,_y
	LDS  R27,_y+1
	LDS  R24,_y+2
	LDS  R25,_y+3
	__CPD2N 0x141
	BRLO PC+2
	RJMP _0x291
; 0000 0077                                 //This is the fastest way to show the pic
; 0000 0078       lcd_write_index_register(TS_INS_GRAM_ADY);
	LDI  R26,LOW(33)
	RCALL _lcd_write_index_register
; 0000 0079       lcd_write_wdr(y);
	LDS  R26,_y
	LDS  R27,_y+1
	RCALL _lcd_write_wdr
; 0000 007A       lcd_write_index_register(TS_INS_RW_GRAM);
	LDI  R26,LOW(34)
	RCALL _lcd_write_index_register
; 0000 007B       res=pf_read(&buffer,720,&w_br);
	CALL SUBOPT_0x64
	LDI  R30,LOW(720)
	LDI  R31,HIGH(720)
	CALL SUBOPT_0x65
	STS  _res,R30
; 0000 007C       CS_LOW;                        //It defined in the header ==> CS--> 0 volt
	CBI  0x12,3
; 0000 007D       RS_HIGH;                      //RS ---> 5 volt
	SBI  0x12,2
; 0000 007E 
; 0000 007F       for(i1=0;i1<720;i1+=3){           //convert 888 format to 565 .
	LDI  R30,LOW(0)
	STS  _i1,R30
	STS  _i1+1,R30
_0x297:
	LDS  R26,_i1
	LDS  R27,_i1+1
	CPI  R26,LOW(0x2D0)
	LDI  R30,HIGH(0x2D0)
	CPC  R27,R30
	BRLO PC+2
	RJMP _0x298
; 0000 0080 
; 0000 0081                 r=buffer[i1];
	CALL SUBOPT_0x66
	SUBI R30,LOW(-_buffer)
	SBCI R31,HIGH(-_buffer)
	LD   R30,Z
	STS  _r,R30
; 0000 0082                 g=buffer[i1+1];
	CALL SUBOPT_0x66
	__ADDW1MN _buffer,1
	LD   R30,Z
	STS  _g,R30
; 0000 0083                 b=buffer[i1+2];
	CALL SUBOPT_0x66
	__ADDW1MN _buffer,2
	LD   R30,Z
	STS  _b,R30
; 0000 0084                 color=r>>3;
	LDS  R30,_r
	LDI  R31,0
	CALL __ASRW3
	CALL __CWD1
	CALL SUBOPT_0x67
; 0000 0085                 color<<=6;
	CALL SUBOPT_0x68
	LDI  R30,LOW(6)
	CALL __LSLD12
	CALL SUBOPT_0x67
; 0000 0086                 tcolor=g>>2;
	LDS  R30,_g
	LDI  R31,0
	CALL __ASRW2
	CALL SUBOPT_0x69
; 0000 0087                 color+=tcolor;
; 0000 0088                 color<<=5;
	LDI  R30,LOW(5)
	CALL __LSLD12
	CALL SUBOPT_0x67
; 0000 0089                 tcolor=b>>3;
	LDS  R30,_b
	LDI  R31,0
	CALL __ASRW3
	CALL SUBOPT_0x69
; 0000 008A                 color+=tcolor;
; 0000 008B                 LCD_DATAPORT_MSB_PORT=(color>>8);
	LDI  R30,LOW(8)
	CALL __LSRD12
	OUT  0x1B,R30
; 0000 008C                 LCD_DATAPORT_LSB_PORT=color;
	LDS  R30,_color
	OUT  0x15,R30
; 0000 008D                 WR_LOW;
	CBI  0x12,1
; 0000 008E                 WR_HIGH;
	SBI  0x12,1
; 0000 008F       }
	CALL SUBOPT_0x66
	ADIW R30,3
	STS  _i1,R30
	STS  _i1+1,R31
	RJMP _0x297
_0x298:
; 0000 0090       CS_HIGH;
	SBI  0x12,3
; 0000 0091       }
	LDI  R26,LOW(_y)
	LDI  R27,HIGH(_y)
	CALL SUBOPT_0x19
	RJMP _0x290
_0x291:
; 0000 0092      y=0;
	CALL SUBOPT_0x63
; 0000 0093  }
	RET
; .FEND
;
;
;
;void main(void)
; 0000 0098 {
_main:
; .FSTART _main
; 0000 0099 //// SPI initialization to use SD card
; 0000 009A //// SPI disabled
; 0000 009B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
	LDI  R30,LOW(0)
	OUT  0xD,R30
; 0000 009C 
; 0000 009D  lcd_init();                        // LCD initialization
	RCALL _lcd_init
; 0000 009E  lcd_background_color(0xff80);      /*  Set the color of background, you can use
; 0000 009F                                         COLOURCO website to get the colour scheme*/
	LDI  R26,LOW(65408)
	LDI  R27,HIGH(65408)
	RCALL _lcd_background_color
; 0000 00A0 
; 0000 00A1  lcd_putsf("Designed by:",0x01ff,0,0xff80);    //Write on display(To see how it works refer to library)
	__POINTW1FN _0x0,0
	CALL SUBOPT_0x6A
	CALL SUBOPT_0x6B
; 0000 00A2  lcd_gotoxy(0,1);                              // Change the cursur position
	CALL SUBOPT_0x6C
	LDI  R26,LOW(1)
	LDI  R27,0
	RCALL _lcd_gotoxy
; 0000 00A3  lcd_putsf("    Mohammad Dehghani   ",0x01ff,0,0xff80);
	__POINTW1FN _0x0,13
	CALL SUBOPT_0x6A
	CALL SUBOPT_0x6B
; 0000 00A4  delay_ms(3000);
	CALL SUBOPT_0x6D
; 0000 00A5  lcd_gotoxy(0,3);
	CALL SUBOPT_0x6C
	LDI  R26,LOW(3)
	LDI  R27,0
	RCALL _lcd_gotoxy
; 0000 00A6  lcd_putsf("Read SD card",0x01ff,0,0xff80);
	__POINTW1FN _0x0,38
	CALL SUBOPT_0x6A
	CALL SUBOPT_0x6B
; 0000 00A7  delay_ms(2000);
	LDI  R26,LOW(2000)
	LDI  R27,HIGH(2000)
	CALL _delay_ms
; 0000 00A8  lcd_gotoxy(0,4);
	CALL SUBOPT_0x6C
	LDI  R26,LOW(4)
	LDI  R27,0
	RCALL _lcd_gotoxy
; 0000 00A9  lcd_putsf("Init Drive",0x01ff,0,0xff80);
	__POINTW1FN _0x0,51
	CALL SUBOPT_0x6A
	CALL SUBOPT_0x6B
; 0000 00AA  while(disk_initialize() != FR_OK)   delay_ms(100);     //refer to MMC document
_0x29F:
	RCALL _disk_initialize
	CPI  R30,0
	BREQ _0x2A1
	CALL SUBOPT_0x6E
	RJMP _0x29F
_0x2A1:
; 0000 00AB lcd_putsf("   --->OK",0x01ff,0,0xff80);
	__POINTW1FN _0x0,62
	CALL SUBOPT_0x6A
	CALL SUBOPT_0x6B
; 0000 00AC  delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 00AD  lcd_gotoxy(0,5);
	CALL SUBOPT_0x6C
	LDI  R26,LOW(5)
	LDI  R27,0
	RCALL _lcd_gotoxy
; 0000 00AE 
; 0000 00AF  ///////////////////////////////SHOW PICTURES ON DISPLAY//////////////////////////////
; 0000 00B0  //////////////////////////////////////////////////////////////////////////////////////////
; 0000 00B1  //////////////////////////////////////////////////////////////////////////////////////////
; 0000 00B2  //////////////////////////////////////////////////////////////////////////////////////////
; 0000 00B3  lcd_putsf("OPEN DRIVE",0x01ff,0,0xff80);
	__POINTW1FN _0x0,72
	CALL SUBOPT_0x6A
	CALL SUBOPT_0x6B
; 0000 00B4  while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
_0x2A2:
	CALL SUBOPT_0x70
	BREQ _0x2A4
	CALL SUBOPT_0x6E
	RJMP _0x2A2
_0x2A4:
; 0000 00B5 lcd_gotoxy(0,6);
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x71
; 0000 00B6  while(pf_open("1.bmp")!=FR_OK)   delay_ms(100);
_0x2A5:
	__POINTW2MN _0x2A8,0
	CALL _pf_open
	CPI  R30,0
	BREQ _0x2A7
	CALL SUBOPT_0x6E
	RJMP _0x2A5
_0x2A7:
; 0000 00B7 delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 00B8  pf_lseek(0x0A);                         /* The bmp file contains much informations except
; 0000 00B9                                                 pixels colors such as the volume and the height and
; 0000 00BA                                                 the width of the pic and the pixel colour informations
; 0000 00BB                                                 begin in address 0x10  */
	CALL SUBOPT_0x72
; 0000 00BC  pf_read(&buffer,4,&w_br);
	CALL SUBOPT_0x73
; 0000 00BD  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0]; //calculate address
	CALL SUBOPT_0x74
; 0000 00BE  pf_lseek(ADDR);
; 0000 00BF  showbmp();
; 0000 00C0  delay_ms(6000);
	LDI  R26,LOW(6000)
	LDI  R27,HIGH(6000)
	CALL _delay_ms
; 0000 00C1  while(pf_mount(0)!=FR_OK )  delay_ms(100);
_0x2A9:
	CALL SUBOPT_0x75
	BREQ _0x2AB
	CALL SUBOPT_0x6E
	RJMP _0x2A9
_0x2AB:
; 0000 00C2 while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
_0x2AC:
	CALL SUBOPT_0x70
	BREQ _0x2AE
	CALL SUBOPT_0x6E
	RJMP _0x2AC
_0x2AE:
; 0000 00C3 lcd_gotoxy(0,6);
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x71
; 0000 00C4  //////////////////////////////////////////
; 0000 00C5  while(pf_open("2.bmp")!=FR_OK)   delay_ms(100);
_0x2AF:
	__POINTW2MN _0x2A8,6
	CALL _pf_open
	CPI  R30,0
	BREQ _0x2B1
	CALL SUBOPT_0x6E
	RJMP _0x2AF
_0x2B1:
; 0000 00C6 delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 00C7  pf_lseek(0x0A);
	CALL SUBOPT_0x72
; 0000 00C8  pf_read(&buffer,4,&w_br);
	CALL SUBOPT_0x73
; 0000 00C9  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
	CALL SUBOPT_0x74
; 0000 00CA  pf_lseek(ADDR);
; 0000 00CB  showbmp();
; 0000 00CC  delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 00CD   for(count=0;count<254;count++){                  //circle frame
	LDI  R30,LOW(0)
	STS  _count,R30
_0x2B3:
	LDS  R26,_count
	CPI  R26,LOW(0xFE)
	BRSH _0x2B4
; 0000 00CE       lcd_draw_circle(120,160,count,0,0XBDD7);
	CALL SUBOPT_0x76
	LDI  R26,LOW(48599)
	LDI  R27,HIGH(48599)
	RCALL _lcd_draw_circle
; 0000 00CF       }
	CALL SUBOPT_0x77
	RJMP _0x2B3
_0x2B4:
; 0000 00D0  //lcd_background_color(BLACK);
; 0000 00D1  while(pf_mount(0)!=FR_OK )  delay_ms(100);
_0x2B5:
	CALL SUBOPT_0x75
	BREQ _0x2B7
	CALL SUBOPT_0x6E
	RJMP _0x2B5
_0x2B7:
; 0000 00D5 lcd_clear_screen();
	RCALL _lcd_clear_screen
; 0000 00D6       lcd_background_color(BLACK);
	LDI  R26,LOW(0)
	LDI  R27,HIGH(0)
	RCALL _lcd_background_color
; 0000 00D7       lcd_draw_line(1,1,239,319,0x6523);
	CALL SUBOPT_0x78
	CALL SUBOPT_0x78
	LDI  R30,LOW(239)
	LDI  R31,HIGH(239)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(319)
	LDI  R31,HIGH(319)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(25891)
	LDI  R27,HIGH(25891)
	RCALL _lcd_draw_line
; 0000 00D8       lcd_draw_line(239,1,1,319,0x7341);
	LDI  R30,LOW(239)
	LDI  R31,HIGH(239)
	ST   -Y,R31
	ST   -Y,R30
	CALL SUBOPT_0x78
	CALL SUBOPT_0x78
	LDI  R30,LOW(319)
	LDI  R31,HIGH(319)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(29505)
	LDI  R27,HIGH(29505)
	RCALL _lcd_draw_line
; 0000 00D9       for(count=0;count<100;count++){
	LDI  R30,LOW(0)
	STS  _count,R30
_0x2B9:
	LDS  R26,_count
	CPI  R26,LOW(0x64)
	BRSH _0x2BA
; 0000 00DA       lcd_draw_rectangle(count,count,240-count,320-count,0,0XAAAA);
	LDS  R30,_count
	LDI  R31,0
	ST   -Y,R31
	ST   -Y,R30
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(240)
	LDI  R27,HIGH(240)
	SUB  R26,R30
	SBC  R27,R31
	ST   -Y,R27
	ST   -Y,R26
	LDI  R26,LOW(320)
	LDI  R27,HIGH(320)
	SUB  R26,R30
	SBC  R27,R31
	ST   -Y,R27
	ST   -Y,R26
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDI  R26,LOW(43690)
	LDI  R27,HIGH(43690)
	RCALL _lcd_draw_rectangle
; 0000 00DB       }
	CALL SUBOPT_0x77
	RJMP _0x2B9
_0x2BA:
; 0000 00DC       for(count=0;count<254;count++){
	LDI  R30,LOW(0)
	STS  _count,R30
_0x2BC:
	LDS  R26,_count
	CPI  R26,LOW(0xFE)
	BRSH _0x2BD
; 0000 00DD       lcd_draw_circle(120,160,count,0,0XA234);
	CALL SUBOPT_0x76
	LDI  R26,LOW(41524)
	LDI  R27,HIGH(41524)
	RCALL _lcd_draw_circle
; 0000 00DE       }
	CALL SUBOPT_0x77
	RJMP _0x2BC
_0x2BD:
; 0000 00DF 
; 0000 00E0 
; 0000 00E1 while (1)
_0x2BE:
; 0000 00E2       {                 //It finished so play the 19,20,21,22 pictures again and again ...
; 0000 00E3 
; 0000 00E4   //////////////////////////////////////////
; 0000 00E5  while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
_0x2C1:
	CALL SUBOPT_0x70
	BREQ _0x2C3
	CALL SUBOPT_0x6E
	RJMP _0x2C1
_0x2C3:
; 0000 00E6 lcd_gotoxy(0,6);
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x71
; 0000 00E7  while(pf_open("19.bmp")!=FR_OK)   delay_ms(100);
_0x2C4:
	__POINTW2MN _0x2A8,12
	CALL _pf_open
	CPI  R30,0
	BREQ _0x2C6
	CALL SUBOPT_0x6E
	RJMP _0x2C4
_0x2C6:
; 0000 00E8 delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 00E9  pf_lseek(0x0A);
	CALL SUBOPT_0x72
; 0000 00EA  pf_read(&buffer,4,&w_br);
	CALL SUBOPT_0x73
; 0000 00EB  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
	CALL SUBOPT_0x74
; 0000 00EC  pf_lseek(ADDR);
; 0000 00ED  showbmp();
; 0000 00EE  delay_ms(3000);
	CALL SUBOPT_0x6D
; 0000 00EF  while(pf_mount(0)!=FR_OK )  delay_ms(100);
_0x2C7:
	CALL SUBOPT_0x75
	BREQ _0x2C9
	CALL SUBOPT_0x6E
	RJMP _0x2C7
_0x2C9:
; 0000 00F1 while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
_0x2CA:
	CALL SUBOPT_0x70
	BREQ _0x2CC
	CALL SUBOPT_0x6E
	RJMP _0x2CA
_0x2CC:
; 0000 00F2 lcd_gotoxy(0,6);
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x71
; 0000 00F3  while(pf_open("20.bmp")!=FR_OK)   delay_ms(100);
_0x2CD:
	__POINTW2MN _0x2A8,19
	CALL _pf_open
	CPI  R30,0
	BREQ _0x2CF
	CALL SUBOPT_0x6E
	RJMP _0x2CD
_0x2CF:
; 0000 00F4 delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 00F5  pf_lseek(0x0A);
	CALL SUBOPT_0x72
; 0000 00F6  pf_read(&buffer,4,&w_br);
	CALL SUBOPT_0x73
; 0000 00F7  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
	CALL SUBOPT_0x74
; 0000 00F8  pf_lseek(ADDR);
; 0000 00F9  showbmp();
; 0000 00FA  delay_ms(3000);
	CALL SUBOPT_0x6D
; 0000 00FB  while(pf_mount(0)!=FR_OK )  delay_ms(100);
_0x2D0:
	CALL SUBOPT_0x75
	BREQ _0x2D2
	CALL SUBOPT_0x6E
	RJMP _0x2D0
_0x2D2:
; 0000 00FD while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
_0x2D3:
	CALL SUBOPT_0x70
	BREQ _0x2D5
	CALL SUBOPT_0x6E
	RJMP _0x2D3
_0x2D5:
; 0000 00FE lcd_gotoxy(0,6);
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x71
; 0000 00FF  while(pf_open("21.bmp")!=FR_OK)   delay_ms(100);
_0x2D6:
	__POINTW2MN _0x2A8,26
	CALL _pf_open
	CPI  R30,0
	BREQ _0x2D8
	CALL SUBOPT_0x6E
	RJMP _0x2D6
_0x2D8:
; 0000 0100 delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 0101  pf_lseek(0x0A);
	CALL SUBOPT_0x72
; 0000 0102  pf_read(&buffer,4,&w_br);
	CALL SUBOPT_0x73
; 0000 0103  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
	CALL SUBOPT_0x74
; 0000 0104  pf_lseek(ADDR);
; 0000 0105  showbmp();
; 0000 0106  delay_ms(3000);
	CALL SUBOPT_0x6D
; 0000 0107  while(pf_mount(0)!=FR_OK )  delay_ms(100);
_0x2D9:
	CALL SUBOPT_0x75
	BREQ _0x2DB
	CALL SUBOPT_0x6E
	RJMP _0x2D9
_0x2DB:
; 0000 0109 while(pf_mount(&Fs)!=FR_OK) delay_ms(100);
_0x2DC:
	CALL SUBOPT_0x70
	BREQ _0x2DE
	CALL SUBOPT_0x6E
	RJMP _0x2DC
_0x2DE:
; 0000 010A lcd_gotoxy(0,6);
	CALL SUBOPT_0x6C
	CALL SUBOPT_0x71
; 0000 010B  while(pf_open("22.bmp")!=FR_OK)   delay_ms(100);
_0x2DF:
	__POINTW2MN _0x2A8,33
	CALL _pf_open
	CPI  R30,0
	BREQ _0x2E1
	CALL SUBOPT_0x6E
	RJMP _0x2DF
_0x2E1:
; 0000 010C delay_ms(1000);
	CALL SUBOPT_0x6F
; 0000 010D  pf_lseek(0x0A);
	CALL SUBOPT_0x72
; 0000 010E  pf_read(&buffer,4,&w_br);
	CALL SUBOPT_0x73
; 0000 010F  ADDR=(long)buffer[3]*512+(long)buffer[2]*64+(long)buffer[1]+(long)buffer[0];
	CALL SUBOPT_0x74
; 0000 0110  pf_lseek(ADDR);
; 0000 0111  showbmp();
; 0000 0112  delay_ms(3000);
	CALL SUBOPT_0x6D
; 0000 0113  while(pf_mount(0)!=FR_OK )  delay_ms(100);
_0x2E2:
	CALL SUBOPT_0x75
	BREQ _0x2E4
	CALL SUBOPT_0x6E
	RJMP _0x2E2
_0x2E4:
; 0000 011A }
	RJMP _0x2BE
; 0000 011B 
; 0000 011C }
_0x2E5:
	RJMP _0x2E5
; .FEND

	.DSEG
_0x2A8:
	.BYTE 0x28
;
;
;/* this source is designed by MOHAMMAD DEHGHANI
	#ifndef __SLEEP_DEFINED__
	#define __SLEEP_DEFINED__
	.EQU __se_bit=0x80
	.EQU __sm_mask=0x70
	.EQU __sm_powerdown=0x20
	.EQU __sm_powersave=0x30
	.EQU __sm_standby=0x60
	.EQU __sm_ext_standby=0x70
	.EQU __sm_adc_noise_red=0x10
	.SET power_ctrl_reg=mcucr
	#endif

	.CSEG

	.CSEG

	.CSEG

	.CSEG

	.CSEG

	.DSEG

	.CSEG

	.DSEG
_FatFs_G000:
	.BYTE 0x2
_CardType_G000:
	.BYTE 0x1
_highlight_color:
	.BYTE 0x2
_x_base:
	.BYTE 0x2
_x_text:
	.BYTE 0x1
_y_text:
	.BYTE 0x1
_buffer:
	.BYTE 0x2D1
_Fs:
	.BYTE 0x2C
_w_br:
	.BYTE 0x2
_res:
	.BYTE 0x1
_y:
	.BYTE 0x4
_ADDR:
	.BYTE 0x2
_i1:
	.BYTE 0x2
_r:
	.BYTE 0x1
_g:
	.BYTE 0x1
_b:
	.BYTE 0x1
_color:
	.BYTE 0x4
_tcolor:
	.BYTE 0x4
_count:
	.BYTE 0x1
__seed_G104:
	.BYTE 0x4

	.CSEG
;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x0:
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR6
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1:
	LDS  R30,_FatFs_G000
	LDS  R31,_FatFs_G000+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2:
	__GETD2S 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x3:
	__CPD2N 0x2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x4:
	MOVW R30,R28
	ADIW R30,8
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__GETD2Z 12
	MOVW R30,R18
	CLR  R22
	CLR  R23
	CALL __ADDD12
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x5:
	LDI  R26,LOW(2)
	LDI  R27,0
	CALL _disk_readp
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x6:
	LDI  R30,LOW(511)
	LDI  R31,HIGH(511)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x7:
	LDI  R27,0
	CALL _disk_readp
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x8:
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	__GETD2Z 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x9:
	CLR  R22
	CLR  R23
	CALL __ADDD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0xA:
	LDI  R30,0
	LDD  R31,Y+9
	MOVW R26,R30
	LDD  R30,Y+8
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0xB:
	__GETD2S 14
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0xC:
	CALL __ADDD12
	CALL __PUTPARD1
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0xD:
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x5

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
SUBOPT_0xE:
	LDI  R31,0
	CALL __CWD1
	MOVW R26,R30
	MOVW R24,R22
	LDI  R30,LOW(24)
	CALL __LSLD12
	MOVW R26,R30
	MOVW R24,R22
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
SUBOPT_0xF:
	LDI  R31,0
	CALL __CWD1
	CALL __LSLD16
	CALL __ORD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x10:
	CLR  R22
	CLR  R23
	CALL __ORD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x11:
	CLR  R31
	CLR  R22
	CLR  R23
	CALL __ORD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x12:
	ST   -Y,R17
	ST   -Y,R16
	__GETWRMN 16,17,0,_FatFs_G000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x13:
	__GETD1S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x14:
	__PUTD1S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x15:
	__GETD2S 2
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x16:
	__GETD1N 0x0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x17:
	CALL __GETD1P
	RJMP SUBOPT_0x14

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x18:
	CALL __SAVELOCR4
	__GETWRMN 18,19,0,_FatFs_G000
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x19:
	CALL __GETD1P_INC
	__SUBD1N -1
	CALL __PUTDP1_DEC
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1A:
	__GETD2S 4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1B:
	ST   -Y,R27
	ST   -Y,R26
	CALL __SAVELOCR4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1C:
	LDS  R26,_FatFs_G000
	LDS  R27,_FatFs_G000+1
	ADIW R26,6
	LD   R18,X+
	LD   R19,X
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x1D:
	__GETD2Z 12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x1E:
	MOV  R30,R18
	SUBI R18,-1
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	LDI  R31,0
	ADD  R26,R30
	ADC  R27,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x1F:
	MOV  R30,R21
	SUBI R21,-1
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	LDI  R31,0
	ADD  R30,R26
	ADC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x20:
	RCALL SUBOPT_0x16
	CALL __PUTDP1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x21:
	LDD  R26,Y+6
	LDD  R27,Y+6+1
	ADIW R26,2
	CALL __GETW1P
	LDD  R30,Z+11
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x22:
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	CLR  R22
	CLR  R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x23:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	ST   -Y,R31
	ST   -Y,R30
	RCALL SUBOPT_0x13
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x24:
	LDD  R30,Y+4
	LDD  R31,Y+4+1
	LDD  R30,Z+1
	MOV  R31,R30
	LDI  R30,0
	MOVW R0,R30
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	LD   R30,X
	LDI  R31,0
	OR   R30,R0
	OR   R31,R1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x25:
	MOVW R30,R28
	ADIW R30,17
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x26:
	__GETD2S 15
	CALL _check_fs_G000
	MOV  R17,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x27:
	__GETD1S 15
	CALL __PUTPARD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x28:
	LD   R31,Z
	LDI  R30,LOW(0)
	RJMP SUBOPT_0x10

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x29:
	SBIW R30,12
	LD   R31,Z
	LDI  R30,LOW(0)
	MOVW R26,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2A:
	__PUTD1S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2B:
	__GETD1S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2C:
	__GETD2S 9
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2D:
	MOVW R30,R28
	ADIW R30,31
	SBIW R30,13
	LD   R30,Z
	LDI  R31,0
	OR   R30,R26
	OR   R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x2E:
	MOVW R26,R30
	MOVW R24,R22
	MOVW R30,R28
	ADIW R30,49
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x2F:
	LDD  R30,Y+53
	LDD  R31,Y+53+1
	LDD  R26,Z+4
	LDD  R27,Z+5
	MOVW R30,R26
	CALL __LSRW4
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x30:
	LDD  R30,Z+1
	LDI  R31,0
	CALL __CWD1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x31:
	LDD  R30,Y+53
	LDD  R31,Y+53+1
	RCALL SUBOPT_0x1D
	RCALL SUBOPT_0x2B
	CALL __ADDD12
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x32:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	__GETD2Z 24
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x33:
	__GETD1N 0x200
	CALL __DIVD21U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x34:
	LDD  R30,Y+6
	LDD  R31,Y+6+1
	__GETD2Z 36
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x35:
	ADIW R26,3
	LD   R30,X
	SUBI R30,-LOW(1)
	ST   X,R30
	SUBI R30,LOW(1)
	LDI  R31,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x36:
	ADIW R30,24
	MOVW R0,R30
	MOVW R26,R30
	CALL __GETD1P
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x37:
	CALL __GETD1P
	__GETD2S 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x38:
	__GETD2S 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x39:
	__GETD2N 0x200
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x3A:
	__GETD1S 18
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x3B:
	__SUBD1N 1
	MOVW R26,R30
	MOVW R24,R22
	__GETD1S 10
	CALL __DIVD21U
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x3C:
	CALL __GETD1P
	__PUTD1S 14
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x3D:
	__GETD1S 14
	__PUTD1RNS 16,36
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x3E:
	ST   -Y,R30
	__GETD2N 0x0
	JMP  _send_cmd_G000

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x3F:
	MOV  R30,R17
	LDI  R31,0
	MOVW R26,R28
	ADIW R26,6
	ADD  R30,R26
	ADC  R31,R27
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x40:
	OUT  0x1B,R30
	LD   R30,Y
	OUT  0x15,R30
	CBI  0x12,1
	SBI  0x12,1
	SBI  0x12,3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:46 WORDS
SUBOPT_0x41:
	SBIW R28,4
	LDI  R26,LOW(32)
	CALL _lcd_write_index_register
	LDI  R26,LOW(0)
	LDI  R27,0
	CALL _lcd_write_wdr
	LDI  R26,LOW(33)
	CALL _lcd_write_index_register
	LDI  R26,LOW(0)
	LDI  R27,0
	CALL _lcd_write_wdr
	LDI  R26,LOW(80)
	CALL _lcd_write_index_register
	LDI  R26,LOW(0)
	LDI  R27,0
	CALL _lcd_write_wdr
	LDI  R26,LOW(81)
	CALL _lcd_write_index_register
	LDI  R26,LOW(239)
	LDI  R27,0
	CALL _lcd_write_wdr
	LDI  R26,LOW(82)
	CALL _lcd_write_index_register
	LDI  R26,LOW(0)
	LDI  R27,0
	CALL _lcd_write_wdr
	LDI  R26,LOW(83)
	CALL _lcd_write_index_register
	LDI  R26,LOW(319)
	LDI  R27,HIGH(319)
	CALL _lcd_write_wdr
	LDI  R26,LOW(34)
	CALL _lcd_write_index_register
	LDI  R30,LOW(0)
	CALL __CLRD1S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
SUBOPT_0x42:
	CALL __GETD2S0
	__CPD2N 0x12C00
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x43:
	CALL __GETD1S0
	__SUBD1N -1
	CALL __PUTD1S0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x44:
	LDD  R26,Y+4
	LDD  R27,Y+4+1
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x45:
	CALL _lcd_write_index_register
	LDI  R26,LOW(1)
	LDI  R27,0
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x46:
	LDI  R26,LOW(50)
	LDI  R27,0
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x47:
	CALL _lcd_write_index_register
	LDI  R26,LOW(1792)
	LDI  R27,HIGH(1792)
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 31 TIMES, CODE SIZE REDUCTION:117 WORDS
SUBOPT_0x48:
	CALL _lcd_write_index_register
	LDI  R26,LOW(0)
	LDI  R27,0
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x49:
	LDI  R26,LOW(17)
	CALL _lcd_write_index_register
	LDI  R26,LOW(7)
	LDI  R27,0
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x4A:
	LDI  R26,LOW(81)
	CALL _lcd_write_index_register
	LDI  R26,LOW(239)
	LDI  R27,0
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x4B:
	LDI  R26,LOW(83)
	CALL _lcd_write_index_register
	LDI  R26,LOW(319)
	LDI  R27,HIGH(319)
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x4C:
	CALL _lcd_write_index_register
	RJMP SUBOPT_0x44

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x4D:
	LDI  R26,LOW(33)
	CALL _lcd_write_index_register
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL _lcd_write_wdr
	LDI  R26,LOW(80)
	RJMP SUBOPT_0x4C

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x4E:
	LDI  R26,LOW(82)
	CALL _lcd_write_index_register
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL _lcd_write_wdr
	LDI  R26,LOW(83)
	CALL _lcd_write_index_register
	LDD  R26,Y+2
	LDD  R27,Y+2+1
	CALL _lcd_write_wdr
	LDI  R26,LOW(34)
	JMP  _lcd_write_index_register

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x4F:
	LDD  R30,Y+8
	LDD  R31,Y+8+1
	LDD  R26,Y+16
	LDD  R27,Y+16+1
	ADD  R30,R26
	ADC  R31,R27
	STD  Y+16,R30
	STD  Y+16+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x50:
	MOVW R30,R20
	LDD  R26,Y+18
	LDD  R27,Y+18+1
	ADD  R30,R26
	ADC  R31,R27
	STD  Y+18,R30
	STD  Y+18+1,R31
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x51:
	LD   R26,Y
	LDD  R27,Y+1
	ADD  R30,R26
	ADC  R31,R27
	ST   Y,R30
	STD  Y+1,R31
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R30,Y+18
	LDD  R31,Y+18+1
	ST   -Y,R31
	ST   -Y,R30
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	JMP  _lcd_write_pixel

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x52:
	CALL _lcd_write_index_register
	LDD  R26,Y+12
	LDD  R27,Y+12+1
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x53:
	CALL _lcd_write_index_register
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	JMP  _lcd_write_wdr

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x54:
	LDD  R30,Y+9
	LDD  R31,Y+9+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x55:
	LDD  R30,Y+13
	LDD  R31,Y+13+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x56:
	LDD  R26,Y+8
	LDD  R27,Y+8+1
	CALL _lcd_draw_line
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x57:
	LDD  R30,Y+5
	LDD  R31,Y+5+1
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x55

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x58:
	LDD  R30,Y+13
	LDD  R31,Y+13+1
	SUB  R30,R16
	SBC  R31,R17
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
SUBOPT_0x59:
	LDD  R26,Y+13
	LDD  R27,Y+13+1
	ADD  R30,R26
	ADC  R31,R27
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x5A:
	MOVW R30,R16
	LDD  R26,Y+17
	LDD  R27,Y+17+1
	ADD  R30,R26
	ADC  R31,R27
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x5B:
	MOVW R30,R18
	LDD  R26,Y+17
	LDD  R27,Y+17+1
	ADD  R30,R26
	ADC  R31,R27
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x5C:
	LDD  R26,Y+14
	LDD  R27,Y+14+1
	JMP  _lcd_draw_line

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x5D:
	LDD  R30,Y+13
	LDD  R31,Y+13+1
	SUB  R30,R18
	SBC  R31,R19
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x5E:
	LDD  R30,Y+13
	LDD  R31,Y+13+1
	ADD  R30,R16
	ADC  R31,R17
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x5F:
	LDD  R30,Y+13
	LDD  R31,Y+13+1
	ADD  R30,R18
	ADC  R31,R19
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x60:
	LDD  R26,Y+10
	LDD  R27,Y+10+1
	JMP  _lcd_write_pixel

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
SUBOPT_0x61:
	LDS  R26,_x_text
	LDI  R30,LOW(8)
	MUL  R30,R26
	MOVW R30,R0
	ADD  R30,R16
	ADC  R31,R17
	ST   -Y,R31
	ST   -Y,R30
	LDS  R26,_y_text
	LDI  R30,LOW(16)
	MUL  R30,R26
	MOVW R30,R0
	ADD  R30,R18
	ADC  R31,R19
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
SUBOPT_0x62:
	LDS  R26,_y_text
	LDI  R30,LOW(16)
	MUL  R30,R26
	MOVW R30,R0
	ADD  R30,R18
	ADC  R31,R19
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
SUBOPT_0x63:
	LDI  R30,LOW(0)
	STS  _y,R30
	STS  _y+1,R30
	STS  _y+2,R30
	STS  _y+3,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
SUBOPT_0x64:
	LDI  R30,LOW(_buffer)
	LDI  R31,HIGH(_buffer)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x65:
	ST   -Y,R31
	ST   -Y,R30
	LDI  R26,LOW(_w_br)
	LDI  R27,HIGH(_w_br)
	JMP  _pf_read

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x66:
	LDS  R30,_i1
	LDS  R31,_i1+1
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x67:
	STS  _color,R30
	STS  _color+1,R31
	STS  _color+2,R22
	STS  _color+3,R23
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x68:
	LDS  R26,_color
	LDS  R27,_color+1
	LDS  R24,_color+2
	LDS  R25,_color+3
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:21 WORDS
SUBOPT_0x69:
	CALL __CWD1
	STS  _tcolor,R30
	STS  _tcolor+1,R31
	STS  _tcolor+2,R22
	STS  _tcolor+3,R23
	RCALL SUBOPT_0x68
	CALL __ADDD12
	RCALL SUBOPT_0x67
	RJMP SUBOPT_0x68

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x6A:
	ST   -Y,R31
	ST   -Y,R30
	RJMP SUBOPT_0x6

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
SUBOPT_0x6B:
	LDI  R30,LOW(0)
	ST   -Y,R30
	LDI  R26,LOW(65408)
	LDI  R27,HIGH(65408)
	JMP  _lcd_putsf

;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
SUBOPT_0x6C:
	LDI  R30,LOW(0)
	LDI  R31,HIGH(0)
	ST   -Y,R31
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
SUBOPT_0x6D:
	LDI  R26,LOW(3000)
	LDI  R27,HIGH(3000)
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
SUBOPT_0x6E:
	LDI  R26,LOW(100)
	LDI  R27,0
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
SUBOPT_0x6F:
	LDI  R26,LOW(1000)
	LDI  R27,HIGH(1000)
	JMP  _delay_ms

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x70:
	LDI  R26,LOW(_Fs)
	LDI  R27,HIGH(_Fs)
	CALL _pf_mount
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x71:
	LDI  R26,LOW(6)
	LDI  R27,0
	JMP  _lcd_gotoxy

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
SUBOPT_0x72:
	__GETD2N 0xA
	CALL _pf_lseek
	RJMP SUBOPT_0x64

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
SUBOPT_0x73:
	LDI  R30,LOW(4)
	LDI  R31,HIGH(4)
	RJMP SUBOPT_0x65

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:187 WORDS
SUBOPT_0x74:
	__GETB2MN _buffer,3
	LDI  R27,0
	LDI  R30,LOW(512)
	LDI  R31,HIGH(512)
	CALL __MULW12
	MOVW R22,R30
	__GETB2MN _buffer,2
	LDI  R30,LOW(64)
	MUL  R30,R26
	MOVW R30,R0
	MOVW R26,R22
	ADD  R26,R30
	ADC  R27,R31
	__GETB1MN _buffer,1
	LDI  R31,0
	ADD  R26,R30
	ADC  R27,R31
	LDS  R30,_buffer
	LDI  R31,0
	ADD  R30,R26
	ADC  R31,R27
	STS  _ADDR,R30
	STS  _ADDR+1,R31
	LDS  R26,_ADDR
	LDS  R27,_ADDR+1
	CLR  R24
	CLR  R25
	CALL _pf_lseek
	JMP  _showbmp

;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
SUBOPT_0x75:
	LDI  R26,LOW(0)
	LDI  R27,0
	CALL _pf_mount
	CPI  R30,0
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
SUBOPT_0x76:
	LDI  R30,LOW(120)
	LDI  R31,HIGH(120)
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(160)
	LDI  R31,HIGH(160)
	ST   -Y,R31
	ST   -Y,R30
	LDS  R30,_count
	LDI  R31,0
	ST   -Y,R31
	ST   -Y,R30
	LDI  R30,LOW(0)
	ST   -Y,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x77:
	LDS  R30,_count
	SUBI R30,-LOW(1)
	STS  _count,R30
	RET

;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
SUBOPT_0x78:
	LDI  R30,LOW(1)
	LDI  R31,HIGH(1)
	ST   -Y,R31
	ST   -Y,R30
	RET


	.CSEG
_delay_ms:
	adiw r26,0
	breq __delay_ms1
__delay_ms0:
	__DELAY_USW 0x7D0
	wdr
	sbiw r26,1
	brne __delay_ms0
__delay_ms1:
	ret

__ADDD12:
	ADD  R30,R26
	ADC  R31,R27
	ADC  R22,R24
	ADC  R23,R25
	RET

__SUBD12:
	SUB  R30,R26
	SBC  R31,R27
	SBC  R22,R24
	SBC  R23,R25
	RET

__SUBD21:
	SUB  R26,R30
	SBC  R27,R31
	SBC  R24,R22
	SBC  R25,R23
	RET

__ANDD12:
	AND  R30,R26
	AND  R31,R27
	AND  R22,R24
	AND  R23,R25
	RET

__ORD12:
	OR   R30,R26
	OR   R31,R27
	OR   R22,R24
	OR   R23,R25
	RET

__ANEGW1:
	NEG  R31
	NEG  R30
	SBCI R31,0
	RET

__LSRB12:
	TST  R30
	MOV  R0,R30
	MOV  R30,R26
	BREQ __LSRB12R
__LSRB12L:
	LSR  R30
	DEC  R0
	BRNE __LSRB12L
__LSRB12R:
	RET

__LSLD12:
	TST  R30
	MOV  R0,R30
	MOVW R30,R26
	MOVW R22,R24
	BREQ __LSLD12R
__LSLD12L:
	LSL  R30
	ROL  R31
	ROL  R22
	ROL  R23
	DEC  R0
	BRNE __LSLD12L
__LSLD12R:
	RET

__LSRD12:
	TST  R30
	MOV  R0,R30
	MOVW R30,R26
	MOVW R22,R24
	BREQ __LSRD12R
__LSRD12L:
	LSR  R23
	ROR  R22
	ROR  R31
	ROR  R30
	DEC  R0
	BRNE __LSRD12L
__LSRD12R:
	RET

__LSLW4:
	LSL  R30
	ROL  R31
__LSLW3:
	LSL  R30
	ROL  R31
__LSLW2:
	LSL  R30
	ROL  R31
	LSL  R30
	ROL  R31
	RET

__ASRW3:
	ASR  R31
	ROR  R30
__ASRW2:
	ASR  R31
	ROR  R30
	ASR  R31
	ROR  R30
	RET

__LSRW4:
	LSR  R31
	ROR  R30
__LSRW3:
	LSR  R31
	ROR  R30
__LSRW2:
	LSR  R31
	ROR  R30
	LSR  R31
	ROR  R30
	RET

__ASRW8:
	MOV  R30,R31
	CLR  R31
	SBRC R30,7
	SER  R31
	RET

__LSRD16:
	MOV  R30,R22
	MOV  R31,R23
	LDI  R22,0
	LDI  R23,0
	RET

__LSLD16:
	MOV  R22,R30
	MOV  R23,R31
	LDI  R30,0
	LDI  R31,0
	RET

__CWD1:
	MOV  R22,R31
	ADD  R22,R22
	SBC  R22,R22
	MOV  R23,R22
	RET

__COMD1:
	COM  R30
	COM  R31
	COM  R22
	COM  R23
	RET

__MULW12U:
	MUL  R31,R26
	MOV  R31,R0
	MUL  R30,R27
	ADD  R31,R0
	MUL  R30,R26
	MOV  R30,R0
	ADD  R31,R1
	RET

__MULD12U:
	MUL  R23,R26
	MOV  R23,R0
	MUL  R22,R27
	ADD  R23,R0
	MUL  R31,R24
	ADD  R23,R0
	MUL  R30,R25
	ADD  R23,R0
	MUL  R22,R26
	MOV  R22,R0
	ADD  R23,R1
	MUL  R31,R27
	ADD  R22,R0
	ADC  R23,R1
	MUL  R30,R24
	ADD  R22,R0
	ADC  R23,R1
	CLR  R24
	MUL  R31,R26
	MOV  R31,R0
	ADD  R22,R1
	ADC  R23,R24
	MUL  R30,R27
	ADD  R31,R0
	ADC  R22,R1
	ADC  R23,R24
	MUL  R30,R26
	MOV  R30,R0
	ADD  R31,R1
	ADC  R22,R24
	ADC  R23,R24
	RET

__MULW12:
	RCALL __CHKSIGNW
	RCALL __MULW12U
	BRTC __MULW121
	RCALL __ANEGW1
__MULW121:
	RET

__DIVW21U:
	CLR  R0
	CLR  R1
	LDI  R25,16
__DIVW21U1:
	LSL  R26
	ROL  R27
	ROL  R0
	ROL  R1
	SUB  R0,R30
	SBC  R1,R31
	BRCC __DIVW21U2
	ADD  R0,R30
	ADC  R1,R31
	RJMP __DIVW21U3
__DIVW21U2:
	SBR  R26,1
__DIVW21U3:
	DEC  R25
	BRNE __DIVW21U1
	MOVW R30,R26
	MOVW R26,R0
	RET

__DIVW21:
	RCALL __CHKSIGNW
	RCALL __DIVW21U
	BRTC __DIVW211
	RCALL __ANEGW1
__DIVW211:
	RET

__DIVD21U:
	PUSH R19
	PUSH R20
	PUSH R21
	CLR  R0
	CLR  R1
	CLR  R20
	CLR  R21
	LDI  R19,32
__DIVD21U1:
	LSL  R26
	ROL  R27
	ROL  R24
	ROL  R25
	ROL  R0
	ROL  R1
	ROL  R20
	ROL  R21
	SUB  R0,R30
	SBC  R1,R31
	SBC  R20,R22
	SBC  R21,R23
	BRCC __DIVD21U2
	ADD  R0,R30
	ADC  R1,R31
	ADC  R20,R22
	ADC  R21,R23
	RJMP __DIVD21U3
__DIVD21U2:
	SBR  R26,1
__DIVD21U3:
	DEC  R19
	BRNE __DIVD21U1
	MOVW R30,R26
	MOVW R22,R24
	MOVW R26,R0
	MOVW R24,R20
	POP  R21
	POP  R20
	POP  R19
	RET

__MODW21:
	CLT
	SBRS R27,7
	RJMP __MODW211
	COM  R26
	COM  R27
	ADIW R26,1
	SET
__MODW211:
	SBRC R31,7
	RCALL __ANEGW1
	RCALL __DIVW21U
	MOVW R30,R26
	BRTC __MODW212
	RCALL __ANEGW1
__MODW212:
	RET

__MODD21U:
	RCALL __DIVD21U
	MOVW R30,R26
	MOVW R22,R24
	RET

__CHKSIGNW:
	CLT
	SBRS R31,7
	RJMP __CHKSW1
	RCALL __ANEGW1
	SET
__CHKSW1:
	SBRS R27,7
	RJMP __CHKSW2
	COM  R26
	COM  R27
	ADIW R26,1
	BLD  R0,0
	INC  R0
	BST  R0,0
__CHKSW2:
	RET

__GETW1P:
	LD   R30,X+
	LD   R31,X
	SBIW R26,1
	RET

__GETD1P:
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X
	SBIW R26,3
	RET

__GETD1P_INC:
	LD   R30,X+
	LD   R31,X+
	LD   R22,X+
	LD   R23,X+
	RET

__PUTDP1:
	ST   X+,R30
	ST   X+,R31
	ST   X+,R22
	ST   X,R23
	RET

__PUTDP1_DEC:
	ST   -X,R23
	ST   -X,R22
	ST   -X,R31
	ST   -X,R30
	RET

__GETD1S0:
	LD   R30,Y
	LDD  R31,Y+1
	LDD  R22,Y+2
	LDD  R23,Y+3
	RET

__GETD2S0:
	LD   R26,Y
	LDD  R27,Y+1
	LDD  R24,Y+2
	LDD  R25,Y+3
	RET

__PUTD1S0:
	ST   Y,R30
	STD  Y+1,R31
	STD  Y+2,R22
	STD  Y+3,R23
	RET

__CLRD1S0:
	ST   Y,R30
	STD  Y+1,R30
	STD  Y+2,R30
	STD  Y+3,R30
	RET

__PUTPARD1:
	ST   -Y,R23
	ST   -Y,R22
	ST   -Y,R31
	ST   -Y,R30
	RET

__PUTPARD2:
	ST   -Y,R25
	ST   -Y,R24
	ST   -Y,R27
	ST   -Y,R26
	RET

__SWAPD12:
	MOV  R1,R24
	MOV  R24,R22
	MOV  R22,R1
	MOV  R1,R25
	MOV  R25,R23
	MOV  R23,R1

__SWAPW12:
	MOV  R1,R27
	MOV  R27,R31
	MOV  R31,R1

__SWAPB12:
	MOV  R1,R26
	MOV  R26,R30
	MOV  R30,R1
	RET

__CPD10:
	SBIW R30,0
	SBCI R22,0
	SBCI R23,0
	RET

__CPD02:
	CLR  R0
	CP   R0,R26
	CPC  R0,R27
	CPC  R0,R24
	CPC  R0,R25
	RET

__CPD12:
	CP   R30,R26
	CPC  R31,R27
	CPC  R22,R24
	CPC  R23,R25
	RET

__CPD21:
	CP   R26,R30
	CPC  R27,R31
	CPC  R24,R22
	CPC  R25,R23
	RET

__SAVELOCR6:
	ST   -Y,R21
__SAVELOCR5:
	ST   -Y,R20
__SAVELOCR4:
	ST   -Y,R19
__SAVELOCR3:
	ST   -Y,R18
__SAVELOCR2:
	ST   -Y,R17
	ST   -Y,R16
	RET

__LOADLOCR6:
	LDD  R21,Y+5
__LOADLOCR5:
	LDD  R20,Y+4
__LOADLOCR4:
	LDD  R19,Y+3
__LOADLOCR3:
	LDD  R18,Y+2
__LOADLOCR2:
	LDD  R17,Y+1
	LD   R16,Y
	RET

__INITLOCB:
__INITLOCW:
	ADD  R26,R28
	ADC  R27,R29
__INITLOC0:
	LPM  R0,Z+
	ST   X+,R0
	DEC  R24
	BRNE __INITLOC0
	RET

;END OF CODE MARKER
__END_OF_CODE:
